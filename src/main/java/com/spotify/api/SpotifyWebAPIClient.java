/*
 * SpotifyWebAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.spotify.api;

import com.spotify.api.authentication.AuthorizationCodeAuthManager;
import com.spotify.api.authentication.AuthorizationCodeAuthModel;
import com.spotify.api.controllers.AlbumsController;
import com.spotify.api.controllers.ArtistsController;
import com.spotify.api.controllers.AudiobooksController;
import com.spotify.api.controllers.CategoriesController;
import com.spotify.api.controllers.ChaptersController;
import com.spotify.api.controllers.EpisodesController;
import com.spotify.api.controllers.GenresController;
import com.spotify.api.controllers.MarketsController;
import com.spotify.api.controllers.OAuthAuthorizationController;
import com.spotify.api.controllers.PlayerController;
import com.spotify.api.controllers.PlaylistsController;
import com.spotify.api.controllers.SearchController;
import com.spotify.api.controllers.ShowsController;
import com.spotify.api.controllers.TracksController;
import com.spotify.api.controllers.UsersController;
import com.spotify.api.http.client.HttpClientConfiguration;
import com.spotify.api.http.client.ReadonlyHttpClientConfiguration;
import com.spotify.api.models.OAuthScopeEnum;
import com.spotify.api.models.OAuthToken;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.authentication.Authentication;
import io.apimatic.coreinterfaces.compatibility.CompatibilityFactory;
import io.apimatic.coreinterfaces.http.HttpClient;
import io.apimatic.okhttpclient.adapter.OkClient;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Consumer;
import java.util.function.Supplier;

/**
 * Gateway class for the library.
 * This class acts as a factory for Controllers.
 * It holds the state of the SDK.
 */
public final class SpotifyWebAPIClient implements Configuration {

    /**
     * Private store for controllers.
     */
    private AlbumsController albums;
    private ArtistsController artists;
    private AudiobooksController audiobooks;
    private CategoriesController categories;
    private ChaptersController chapters;
    private EpisodesController episodes;
    private GenresController genres;
    private MarketsController markets;
    private PlayerController player;
    private PlaylistsController playlists;
    private SearchController search;
    private ShowsController shows;
    private TracksController tracks;
    private UsersController users;
    private OAuthAuthorizationController oAuthAuthorization;

    private static final CompatibilityFactory compatibilityFactory = new CompatibilityFactoryImpl();

    private static String userAgent = "APIMATIC 3.0";

    /**
     * Current API environment.
     */
    private final Environment environment;

    /**
     * The HTTP Client instance to use for making HTTP requests.
     */
    private final HttpClient httpClient;

    /**
     * Http Client Configuration instance.
     */
    private final ReadonlyHttpClientConfiguration httpClientConfig;

    /**
     * AuthorizationCodeAuthManager.
     */
    private AuthorizationCodeAuthManager authorizationCodeAuthManager;

    /**
     * The instance of AuthorizationCodeAuthModel.
     */
    private AuthorizationCodeAuthModel authorizationCodeAuthModel;

    /**
     * Map of authentication Managers.
     */
    private Map<String, Authentication> authentications = new HashMap<String, Authentication>();

    private SpotifyWebAPIClient(Environment environment, HttpClient httpClient,
            ReadonlyHttpClientConfiguration httpClientConfig,
            AuthorizationCodeAuthModel authorizationCodeAuthModel) {
        this.environment = environment;
        this.httpClient = httpClient;
        this.httpClientConfig = httpClientConfig;

        this.authorizationCodeAuthModel = authorizationCodeAuthModel;

        this.authorizationCodeAuthManager = new AuthorizationCodeAuthManager(
                authorizationCodeAuthModel);
        this.authentications.put("oauth_2_0", authorizationCodeAuthManager);

        GlobalConfiguration globalConfig = new GlobalConfiguration.Builder()
                .httpClient(httpClient).baseUri(server -> getBaseUri(server))
                .compatibilityFactory(compatibilityFactory)
                .authentication(this.authentications)
                .userAgent(userAgent)
                .build();
        this.authorizationCodeAuthManager.applyGlobalConfiguration(globalConfig);

        albums = new AlbumsController(globalConfig);
        artists = new ArtistsController(globalConfig);
        audiobooks = new AudiobooksController(globalConfig);
        categories = new CategoriesController(globalConfig);
        chapters = new ChaptersController(globalConfig);
        episodes = new EpisodesController(globalConfig);
        genres = new GenresController(globalConfig);
        markets = new MarketsController(globalConfig);
        player = new PlayerController(globalConfig);
        playlists = new PlaylistsController(globalConfig);
        search = new SearchController(globalConfig);
        shows = new ShowsController(globalConfig);
        tracks = new TracksController(globalConfig);
        users = new UsersController(globalConfig);
        oAuthAuthorization = new OAuthAuthorizationController(globalConfig);
    }

    /**
     * Shutdown the underlying HttpClient instance.
     */
    public static void shutdown() {
        OkClient.shutdown();
    }

    /**
     * Get the instance of AlbumsController.
     * @return albums
     */
    public AlbumsController getAlbumsController() {
        return albums;
    }

    /**
     * Get the instance of ArtistsController.
     * @return artists
     */
    public ArtistsController getArtistsController() {
        return artists;
    }

    /**
     * Get the instance of AudiobooksController.
     * @return audiobooks
     */
    public AudiobooksController getAudiobooksController() {
        return audiobooks;
    }

    /**
     * Get the instance of CategoriesController.
     * @return categories
     */
    public CategoriesController getCategoriesController() {
        return categories;
    }

    /**
     * Get the instance of ChaptersController.
     * @return chapters
     */
    public ChaptersController getChaptersController() {
        return chapters;
    }

    /**
     * Get the instance of EpisodesController.
     * @return episodes
     */
    public EpisodesController getEpisodesController() {
        return episodes;
    }

    /**
     * Get the instance of GenresController.
     * @return genres
     */
    public GenresController getGenresController() {
        return genres;
    }

    /**
     * Get the instance of MarketsController.
     * @return markets
     */
    public MarketsController getMarketsController() {
        return markets;
    }

    /**
     * Get the instance of PlayerController.
     * @return player
     */
    public PlayerController getPlayerController() {
        return player;
    }

    /**
     * Get the instance of PlaylistsController.
     * @return playlists
     */
    public PlaylistsController getPlaylistsController() {
        return playlists;
    }

    /**
     * Get the instance of SearchController.
     * @return search
     */
    public SearchController getSearchController() {
        return search;
    }

    /**
     * Get the instance of ShowsController.
     * @return shows
     */
    public ShowsController getShowsController() {
        return shows;
    }

    /**
     * Get the instance of TracksController.
     * @return tracks
     */
    public TracksController getTracksController() {
        return tracks;
    }

    /**
     * Get the instance of UsersController.
     * @return users
     */
    public UsersController getUsersController() {
        return users;
    }

    /**
     * Get the instance of OAuthAuthorizationController.
     * @return oAuthAuthorization
     */
    public OAuthAuthorizationController getOAuthAuthorizationController() {
        return oAuthAuthorization;
    }

    /**
     * Current API environment.
     * @return environment
     */
    public Environment getEnvironment() {
        return environment;
    }

    /**
     * The HTTP Client instance to use for making HTTP requests.
     * @return httpClient
     */
    private HttpClient getHttpClient() {
        return httpClient;
    }

    /**
     * Http Client Configuration instance.
     * @return httpClientConfig
     */
    public ReadonlyHttpClientConfiguration getHttpClientConfig() {
        return httpClientConfig;
    }

    /**
     * The credentials to use with AuthorizationCodeAuth.
     * @return authorizationCodeAuth
     */
    public AuthorizationCodeAuth getAuthorizationCodeAuth() {
        return authorizationCodeAuthManager;
    }

    /**
     * The auth credential model for AuthorizationCodeAuth.
     * @return the instance of AuthorizationCodeAuthModel
     */
    public AuthorizationCodeAuthModel getAuthorizationCodeAuthModel() {
        return authorizationCodeAuthModel;
    }
    /**
     * The timeout to use for making HTTP requests.
     * @deprecated This method will be removed in a future version. Use
     *             {@link #getHttpClientConfig()} instead.
     *
     * @return timeout
     */
    @Deprecated
    public long timeout() {
        return httpClientConfig.getTimeout();
    }

    /**
     * Get base URI by current environment.
     * @param server Server for which to get the base URI
     * @return Processed base URI
     */
    public String getBaseUri(Server server) {
        Map<String, SimpleEntry<Object, Boolean>> parameters = new HashMap<>();
        StringBuilder baseUrl = new StringBuilder(environmentMapper(environment, server));
        ApiHelper.appendUrlWithTemplateParameters(baseUrl, parameters);
        return baseUrl.toString();
    }

    /**
     * Get base URI by current environment.
     * @return Processed base URI
     */
    public String getBaseUri() {
        return getBaseUri(Server.ENUM_DEFAULT);
    }


    /**
     * Get base URI by current environment.
     * 
     * @param server string for which to get the base URI
     * @return Processed base URI
     */
    public String getBaseUri(String server) {
        return getBaseUri(Server.fromString(server));
    }


    /**
     * Base URLs by environment and server aliases.
     * @param environment Environment for which to get the base URI
     * @param server Server for which to get the base URI
     * @return base URL
     */
    private static String environmentMapper(Environment environment, Server server) {
        if (environment.equals(Environment.PRODUCTION)) {
            if (server.equals(Server.ENUM_DEFAULT)) {
                return "https://api.spotify.com/v1";
            }
            if (server.equals(Server.AUTH_SERVER)) {
                return "https://accounts.spotify.com";
            }
        }
        return "https://api.spotify.com/v1";
    }

    /**
     * Converts this SpotifyWebAPIClient into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "SpotifyWebAPIClient [" + "environment=" + environment + ", httpClientConfig="
                + httpClientConfig + ", authentications=" + authentications + "]";
    }

    /**
     * Builds a new {@link SpotifyWebAPIClient.Builder} object.
     * Creates the instance with the state of the current client.
     * @return a new {@link SpotifyWebAPIClient.Builder} object
     */
    public Builder newBuilder() {
        Builder builder = new Builder();
        builder.environment = getEnvironment();
        builder.httpClient = getHttpClient();
        builder.authorizationCodeAuth(getAuthorizationCodeAuthModel()
                .toBuilder().build());
        builder.httpClientConfig(() -> ((HttpClientConfiguration) httpClientConfig).newBuilder());
        return builder;
    }

    /**
     * Class to build instances of {@link SpotifyWebAPIClient}.
     */
    public static class Builder {

        private Environment environment = Environment.PRODUCTION;
        private HttpClient httpClient;
        private AuthorizationCodeAuthModel authorizationCodeAuthModel =
                new AuthorizationCodeAuthModel.Builder("", "", "").build();
        private HttpClientConfiguration.Builder httpClientConfigBuilder =
                new HttpClientConfiguration.Builder();


        /**
         * Credentials setter for AuthorizationCodeAuth.
         * @param oAuthClientId String value for oAuthClientId.
         * @param oAuthClientSecret String value for oAuthClientSecret.
         * @param oAuthRedirectUri String value for oAuthRedirectUri.
         * @deprecated This builder method is deprecated.
         * Use {@link #authorizationCodeAuth(AuthorizationCodeAuthModel) authorizationCodeAuth} instead.
         * @return The current instance of builder.
         */
        @Deprecated
        public Builder authorizationCodeAuthCredentials(String oAuthClientId,
                String oAuthClientSecret, String oAuthRedirectUri) {
            authorizationCodeAuthModel = authorizationCodeAuthModel.toBuilder()
                .oAuthClientId(oAuthClientId)
                .oAuthClientSecret(oAuthClientSecret)
                .oAuthRedirectUri(oAuthRedirectUri)
                .build();
            return this;
        }

        /**
         * Credentials setter for AuthorizationCodeAuth.
         * @param oAuthToken OAuthToken value for oAuthToken.
         * @deprecated This builder method is deprecated.
         * Use {@link #authorizationCodeAuth(AuthorizationCodeAuthModel) authorizationCodeAuth} instead.
         * @return Builder
         */
        @Deprecated
        public Builder oAuthToken(OAuthToken oAuthToken) {
            authorizationCodeAuthModel = authorizationCodeAuthModel.toBuilder()
                .oAuthToken(oAuthToken)
                .build();
            return this;
        }

        /**
         * Credentials setter for AuthorizationCodeAuth.
         * @param oAuthScopes List of OAuthScopeEnum value for oAuthScopes.
         * @deprecated This builder method is deprecated.
         * Use {@link #authorizationCodeAuth(AuthorizationCodeAuthModel) authorizationCodeAuth} instead.
         * @return Builder
         */
        @Deprecated
        public Builder oAuthScopes(List<OAuthScopeEnum> oAuthScopes) {
            authorizationCodeAuthModel = authorizationCodeAuthModel.toBuilder()
                .oAuthScopes(oAuthScopes)
                .build();
            return this;
        }

        /**
         * Credentials setter for AuthorizationCodeAuth.
         * @param authorizationCodeAuthModel The instance of AuthorizationCodeAuthModel.
         * @return The current instance of builder.
         */
        public Builder authorizationCodeAuth(
                AuthorizationCodeAuthModel authorizationCodeAuthModel) {
            this.authorizationCodeAuthModel = authorizationCodeAuthModel;
            return this;
        }

        /**
         * Current API environment.
         * @param environment The environment for client.
         * @return Builder
         */
        public Builder environment(Environment environment) {
            this.environment = environment;
            return this;
        }

        /**
         * The timeout to use for making HTTP requests.
         * @deprecated This method will be removed in a future version. Use
         *             {@link #httpClientConfig(Consumer) httpClientConfig} instead.
         * @param timeout must be greater then 0.
         * @return Builder
         */
        @Deprecated
        public Builder timeout(long timeout) {
            this.httpClientConfigBuilder.timeout(timeout);
            return this;
        }

        /**
         * Setter for the Builder of httpClientConfiguration, takes in an operation to be performed
         * on the builder instance of HTTP client configuration.
         * 
         * @param action Consumer for the builder of httpClientConfiguration.
         * @return Builder
         */
        public Builder httpClientConfig(Consumer<HttpClientConfiguration.Builder> action) {
            action.accept(httpClientConfigBuilder);
            return this;
        }

        /**
         * Private Setter for the Builder of httpClientConfiguration, takes in an operation to be performed
         * on the builder instance of HTTP client configuration.
         * 
         * @param supplier Supplier for the builder of httpClientConfiguration.
         * @return Builder
         */
        private Builder httpClientConfig(Supplier<HttpClientConfiguration.Builder> supplier) {
            httpClientConfigBuilder = supplier.get();
            return this;
        }

        /**
         * Builds a new SpotifyWebAPIClient object using the set fields.
         * @return SpotifyWebAPIClient
         */
        public SpotifyWebAPIClient build() {
            HttpClientConfiguration httpClientConfig = httpClientConfigBuilder.build();
            httpClient = new OkClient(httpClientConfig.getConfiguration(), compatibilityFactory);

            return new SpotifyWebAPIClient(environment, httpClient, httpClientConfig,
                    authorizationCodeAuthModel);
        }
    }
}