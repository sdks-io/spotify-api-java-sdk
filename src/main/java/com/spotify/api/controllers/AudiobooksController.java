/*
 * SpotifyWebAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.spotify.api.controllers;

import com.spotify.api.ApiHelper;
import com.spotify.api.Server;
import com.spotify.api.exceptions.ApiException;
import com.spotify.api.exceptions.BadRequestException;
import com.spotify.api.exceptions.ForbiddenException;
import com.spotify.api.exceptions.NotFoundException;
import com.spotify.api.exceptions.TooManyRequestsException;
import com.spotify.api.exceptions.UnauthorizedException;
import com.spotify.api.http.request.HttpMethod;
import com.spotify.api.http.response.ApiResponse;
import com.spotify.api.models.AudiobookObject;
import com.spotify.api.models.ManyAudiobooks;
import com.spotify.api.models.PagingSavedAudiobookObject;
import com.spotify.api.models.PagingSimplifiedChapterObject;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.http.request.ArraySerializationFormat;
import io.apimatic.coreinterfaces.http.request.ResponseClassType;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class AudiobooksController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public AudiobooksController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Get Spotify catalog information for a single audiobook. Audiobooks are only available within
     * the US, UK, Canada, Ireland, New Zealand and Australia markets.
     * @param  id  Required parameter: Example:
     * @param  market  Optional parameter: Example:
     * @return    Returns the AudiobookObject wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<AudiobookObject> getAnAudiobook(
            final String id,
            final String market) throws ApiException, IOException {
        return prepareGetAnAudiobookRequest(id, market).execute();
    }

    /**
     * Get Spotify catalog information for a single audiobook. Audiobooks are only available within
     * the US, UK, Canada, Ireland, New Zealand and Australia markets.
     * @param  id  Required parameter: Example:
     * @param  market  Optional parameter: Example:
     * @return    Returns the AudiobookObject wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<AudiobookObject>> getAnAudiobookAsync(
            final String id,
            final String market) {
        try { 
            return prepareGetAnAudiobookRequest(id, market).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getAnAudiobook.
     */
    private ApiCall<ApiResponse<AudiobookObject>, ApiException> prepareGetAnAudiobookRequest(
            final String id,
            final String market) throws IOException {
        return new ApiCall.Builder<ApiResponse<AudiobookObject>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/audiobooks/{id}")
                        .queryParam(param -> param.key("market")
                                .value(market).isRequired(false))
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oauth_2_0"))
                        .arraySerializationFormat(ArraySerializationFormat.CSV)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, AudiobookObject.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("The request contains malformed data in path, query parameters, or body.\n",
                                (reason, context) -> new BadRequestException(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n",
                                (reason, context) -> new UnauthorizedException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n",
                                (reason, context) -> new ForbiddenException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.setReason("The requested resource cannot be found.\n",
                                (reason, context) -> new NotFoundException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("The app has exceeded its rate limits.\n",
                                (reason, context) -> new TooManyRequestsException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get Spotify catalog information for several audiobooks identified by their Spotify IDs.
     * Audiobooks are only available within the US, UK, Canada, Ireland, New Zealand and Australia
     * markets.
     * @param  ids  Required parameter: Example:
     * @param  market  Optional parameter: Example:
     * @return    Returns the ManyAudiobooks wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<ManyAudiobooks> getMultipleAudiobooks(
            final String ids,
            final String market) throws ApiException, IOException {
        return prepareGetMultipleAudiobooksRequest(ids, market).execute();
    }

    /**
     * Get Spotify catalog information for several audiobooks identified by their Spotify IDs.
     * Audiobooks are only available within the US, UK, Canada, Ireland, New Zealand and Australia
     * markets.
     * @param  ids  Required parameter: Example:
     * @param  market  Optional parameter: Example:
     * @return    Returns the ManyAudiobooks wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<ManyAudiobooks>> getMultipleAudiobooksAsync(
            final String ids,
            final String market) {
        try { 
            return prepareGetMultipleAudiobooksRequest(ids, market).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getMultipleAudiobooks.
     */
    private ApiCall<ApiResponse<ManyAudiobooks>, ApiException> prepareGetMultipleAudiobooksRequest(
            final String ids,
            final String market) throws IOException {
        return new ApiCall.Builder<ApiResponse<ManyAudiobooks>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/audiobooks")
                        .queryParam(param -> param.key("ids")
                                .value(ids))
                        .queryParam(param -> param.key("market")
                                .value(market).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oauth_2_0"))
                        .arraySerializationFormat(ArraySerializationFormat.CSV)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, ManyAudiobooks.class))
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n",
                                (reason, context) -> new UnauthorizedException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n",
                                (reason, context) -> new ForbiddenException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("The app has exceeded its rate limits.\n",
                                (reason, context) -> new TooManyRequestsException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get Spotify catalog information about an audiobook's chapters. Audiobooks are only available
     * within the US, UK, Canada, Ireland, New Zealand and Australia markets.
     * @param  id  Required parameter: Example:
     * @param  market  Optional parameter: Example:
     * @param  limit  Optional parameter: Example: 20
     * @param  offset  Optional parameter: Example: 0
     * @return    Returns the PagingSimplifiedChapterObject wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<PagingSimplifiedChapterObject> getAudiobookChapters(
            final String id,
            final String market,
            final Integer limit,
            final Integer offset) throws ApiException, IOException {
        return prepareGetAudiobookChaptersRequest(id, market, limit, offset).execute();
    }

    /**
     * Get Spotify catalog information about an audiobook's chapters. Audiobooks are only available
     * within the US, UK, Canada, Ireland, New Zealand and Australia markets.
     * @param  id  Required parameter: Example:
     * @param  market  Optional parameter: Example:
     * @param  limit  Optional parameter: Example: 20
     * @param  offset  Optional parameter: Example: 0
     * @return    Returns the PagingSimplifiedChapterObject wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<PagingSimplifiedChapterObject>> getAudiobookChaptersAsync(
            final String id,
            final String market,
            final Integer limit,
            final Integer offset) {
        try { 
            return prepareGetAudiobookChaptersRequest(id, market, limit, offset).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getAudiobookChapters.
     */
    private ApiCall<ApiResponse<PagingSimplifiedChapterObject>, ApiException> prepareGetAudiobookChaptersRequest(
            final String id,
            final String market,
            final Integer limit,
            final Integer offset) throws IOException {
        return new ApiCall.Builder<ApiResponse<PagingSimplifiedChapterObject>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/audiobooks/{id}/chapters")
                        .queryParam(param -> param.key("market")
                                .value(market).isRequired(false))
                        .queryParam(param -> param.key("limit")
                                .value((limit != null) ? limit : 20).isRequired(false))
                        .queryParam(param -> param.key("offset")
                                .value((offset != null) ? offset : 0).isRequired(false))
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oauth_2_0"))
                        .arraySerializationFormat(ArraySerializationFormat.CSV)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, PagingSimplifiedChapterObject.class))
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n",
                                (reason, context) -> new UnauthorizedException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n",
                                (reason, context) -> new ForbiddenException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("The app has exceeded its rate limits.\n",
                                (reason, context) -> new TooManyRequestsException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get a list of the audiobooks saved in the current Spotify user's 'Your Music' library.
     * @param  limit  Optional parameter: Example: 20
     * @param  offset  Optional parameter: Example: 0
     * @return    Returns the PagingSavedAudiobookObject wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<PagingSavedAudiobookObject> getUsersSavedAudiobooks(
            final Integer limit,
            final Integer offset) throws ApiException, IOException {
        return prepareGetUsersSavedAudiobooksRequest(limit, offset).execute();
    }

    /**
     * Get a list of the audiobooks saved in the current Spotify user's 'Your Music' library.
     * @param  limit  Optional parameter: Example: 20
     * @param  offset  Optional parameter: Example: 0
     * @return    Returns the PagingSavedAudiobookObject wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<PagingSavedAudiobookObject>> getUsersSavedAudiobooksAsync(
            final Integer limit,
            final Integer offset) {
        try { 
            return prepareGetUsersSavedAudiobooksRequest(limit, offset).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getUsersSavedAudiobooks.
     */
    private ApiCall<ApiResponse<PagingSavedAudiobookObject>, ApiException> prepareGetUsersSavedAudiobooksRequest(
            final Integer limit,
            final Integer offset) throws IOException {
        return new ApiCall.Builder<ApiResponse<PagingSavedAudiobookObject>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/me/audiobooks")
                        .queryParam(param -> param.key("limit")
                                .value((limit != null) ? limit : 20).isRequired(false))
                        .queryParam(param -> param.key("offset")
                                .value((offset != null) ? offset : 0).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oauth_2_0"))
                        .arraySerializationFormat(ArraySerializationFormat.CSV)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, PagingSavedAudiobookObject.class))
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n",
                                (reason, context) -> new UnauthorizedException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n",
                                (reason, context) -> new ForbiddenException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("The app has exceeded its rate limits.\n",
                                (reason, context) -> new TooManyRequestsException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Save one or more audiobooks to the current Spotify user's library.
     * @param  ids  Required parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<Void> saveAudiobooksUser(
            final String ids) throws ApiException, IOException {
        return prepareSaveAudiobooksUserRequest(ids).execute();
    }

    /**
     * Save one or more audiobooks to the current Spotify user's library.
     * @param  ids  Required parameter: Example:
     * @return    Returns the Void wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<Void>> saveAudiobooksUserAsync(
            final String ids) {
        try { 
            return prepareSaveAudiobooksUserRequest(ids).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for saveAudiobooksUser.
     */
    private ApiCall<ApiResponse<Void>, ApiException> prepareSaveAudiobooksUserRequest(
            final String ids) throws IOException {
        return new ApiCall.Builder<ApiResponse<Void>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/me/audiobooks")
                        .queryParam(param -> param.key("ids")
                                .value(ids))
                        .withAuth(auth -> auth
                                .add("oauth_2_0"))
                        .arraySerializationFormat(ArraySerializationFormat.CSV)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n",
                                (reason, context) -> new UnauthorizedException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n",
                                (reason, context) -> new ForbiddenException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("The app has exceeded its rate limits.\n",
                                (reason, context) -> new TooManyRequestsException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Remove one or more audiobooks from the Spotify user's library.
     * @param  ids  Required parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<Void> removeAudiobooksUser(
            final String ids) throws ApiException, IOException {
        return prepareRemoveAudiobooksUserRequest(ids).execute();
    }

    /**
     * Remove one or more audiobooks from the Spotify user's library.
     * @param  ids  Required parameter: Example:
     * @return    Returns the Void wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<Void>> removeAudiobooksUserAsync(
            final String ids) {
        try { 
            return prepareRemoveAudiobooksUserRequest(ids).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for removeAudiobooksUser.
     */
    private ApiCall<ApiResponse<Void>, ApiException> prepareRemoveAudiobooksUserRequest(
            final String ids) throws IOException {
        return new ApiCall.Builder<ApiResponse<Void>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/me/audiobooks")
                        .queryParam(param -> param.key("ids")
                                .value(ids))
                        .withAuth(auth -> auth
                                .add("oauth_2_0"))
                        .arraySerializationFormat(ArraySerializationFormat.CSV)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n",
                                (reason, context) -> new UnauthorizedException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n",
                                (reason, context) -> new ForbiddenException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("The app has exceeded its rate limits.\n",
                                (reason, context) -> new TooManyRequestsException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Check if one or more audiobooks are already saved in the current Spotify user's library.
     * @param  ids  Required parameter: Example:
     * @return    Returns the List of Boolean wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<List<Boolean>> checkUsersSavedAudiobooks(
            final String ids) throws ApiException, IOException {
        return prepareCheckUsersSavedAudiobooksRequest(ids).execute();
    }

    /**
     * Check if one or more audiobooks are already saved in the current Spotify user's library.
     * @param  ids  Required parameter: Example:
     * @return    Returns the List of Boolean wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<List<Boolean>>> checkUsersSavedAudiobooksAsync(
            final String ids) {
        try { 
            return prepareCheckUsersSavedAudiobooksRequest(ids).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for checkUsersSavedAudiobooks.
     */
    private ApiCall<ApiResponse<List<Boolean>>, ApiException> prepareCheckUsersSavedAudiobooksRequest(
            final String ids) throws IOException {
        return new ApiCall.Builder<ApiResponse<List<Boolean>>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/me/audiobooks/contains")
                        .queryParam(param -> param.key("ids")
                                .value(ids))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oauth_2_0"))
                        .arraySerializationFormat(ArraySerializationFormat.CSV)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        Boolean[].class))
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n",
                                (reason, context) -> new UnauthorizedException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n",
                                (reason, context) -> new ForbiddenException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("The app has exceeded its rate limits.\n",
                                (reason, context) -> new TooManyRequestsException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}