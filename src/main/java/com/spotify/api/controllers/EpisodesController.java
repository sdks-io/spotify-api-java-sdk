/*
 * SpotifyWebAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.spotify.api.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.spotify.api.ApiHelper;
import com.spotify.api.Server;
import com.spotify.api.exceptions.ApiException;
import com.spotify.api.exceptions.ForbiddenException;
import com.spotify.api.exceptions.TooManyRequestsException;
import com.spotify.api.exceptions.UnauthorizedException;
import com.spotify.api.http.request.HttpMethod;
import com.spotify.api.http.response.ApiResponse;
import com.spotify.api.models.EpisodeObject;
import com.spotify.api.models.ManyEpisodes;
import com.spotify.api.models.MeEpisodesRequest;
import com.spotify.api.models.MeEpisodesRequest1;
import com.spotify.api.models.PagingSavedEpisodeObject;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.http.request.ArraySerializationFormat;
import io.apimatic.coreinterfaces.http.request.ResponseClassType;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class EpisodesController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public EpisodesController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Get Spotify catalog information for a single episode identified by its unique Spotify ID.
     * @param  id  Required parameter: Example:
     * @param  market  Optional parameter: Example:
     * @return    Returns the EpisodeObject wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<EpisodeObject> getAnEpisode(
            final String id,
            final String market) throws ApiException, IOException {
        return prepareGetAnEpisodeRequest(id, market).execute();
    }

    /**
     * Get Spotify catalog information for a single episode identified by its unique Spotify ID.
     * @param  id  Required parameter: Example:
     * @param  market  Optional parameter: Example:
     * @return    Returns the EpisodeObject wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<EpisodeObject>> getAnEpisodeAsync(
            final String id,
            final String market) {
        try { 
            return prepareGetAnEpisodeRequest(id, market).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getAnEpisode.
     */
    private ApiCall<ApiResponse<EpisodeObject>, ApiException> prepareGetAnEpisodeRequest(
            final String id,
            final String market) throws IOException {
        return new ApiCall.Builder<ApiResponse<EpisodeObject>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/episodes/{id}")
                        .queryParam(param -> param.key("market")
                                .value(market).isRequired(false))
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oauth_2_0"))
                        .arraySerializationFormat(ArraySerializationFormat.CSV)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, EpisodeObject.class))
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n",
                                (reason, context) -> new UnauthorizedException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n",
                                (reason, context) -> new ForbiddenException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("The app has exceeded its rate limits.\n",
                                (reason, context) -> new TooManyRequestsException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get Spotify catalog information for several episodes based on their Spotify IDs.
     * @param  ids  Required parameter: Example:
     * @param  market  Optional parameter: Example:
     * @return    Returns the ManyEpisodes wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<ManyEpisodes> getMultipleEpisodes(
            final String ids,
            final String market) throws ApiException, IOException {
        return prepareGetMultipleEpisodesRequest(ids, market).execute();
    }

    /**
     * Get Spotify catalog information for several episodes based on their Spotify IDs.
     * @param  ids  Required parameter: Example:
     * @param  market  Optional parameter: Example:
     * @return    Returns the ManyEpisodes wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<ManyEpisodes>> getMultipleEpisodesAsync(
            final String ids,
            final String market) {
        try { 
            return prepareGetMultipleEpisodesRequest(ids, market).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getMultipleEpisodes.
     */
    private ApiCall<ApiResponse<ManyEpisodes>, ApiException> prepareGetMultipleEpisodesRequest(
            final String ids,
            final String market) throws IOException {
        return new ApiCall.Builder<ApiResponse<ManyEpisodes>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/episodes")
                        .queryParam(param -> param.key("ids")
                                .value(ids))
                        .queryParam(param -> param.key("market")
                                .value(market).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oauth_2_0"))
                        .arraySerializationFormat(ArraySerializationFormat.CSV)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, ManyEpisodes.class))
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n",
                                (reason, context) -> new UnauthorizedException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n",
                                (reason, context) -> new ForbiddenException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("The app has exceeded its rate limits.\n",
                                (reason, context) -> new TooManyRequestsException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get a list of the episodes saved in the current Spotify user's library.&lt;br/&gt; This API
     * endpoint is in __beta__ and could change without warning. Please share any feedback that you
     * have, or issues that you discover, in our [developer community
     * forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).
     * @param  market  Optional parameter: Example:
     * @param  limit  Optional parameter: Example: 20
     * @param  offset  Optional parameter: Example: 0
     * @return    Returns the PagingSavedEpisodeObject wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<PagingSavedEpisodeObject> getUsersSavedEpisodes(
            final String market,
            final Integer limit,
            final Integer offset) throws ApiException, IOException {
        return prepareGetUsersSavedEpisodesRequest(market, limit, offset).execute();
    }

    /**
     * Get a list of the episodes saved in the current Spotify user's library.&lt;br/&gt; This API
     * endpoint is in __beta__ and could change without warning. Please share any feedback that you
     * have, or issues that you discover, in our [developer community
     * forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).
     * @param  market  Optional parameter: Example:
     * @param  limit  Optional parameter: Example: 20
     * @param  offset  Optional parameter: Example: 0
     * @return    Returns the PagingSavedEpisodeObject wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<PagingSavedEpisodeObject>> getUsersSavedEpisodesAsync(
            final String market,
            final Integer limit,
            final Integer offset) {
        try { 
            return prepareGetUsersSavedEpisodesRequest(market, limit, offset).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getUsersSavedEpisodes.
     */
    private ApiCall<ApiResponse<PagingSavedEpisodeObject>, ApiException> prepareGetUsersSavedEpisodesRequest(
            final String market,
            final Integer limit,
            final Integer offset) throws IOException {
        return new ApiCall.Builder<ApiResponse<PagingSavedEpisodeObject>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/me/episodes")
                        .queryParam(param -> param.key("market")
                                .value(market).isRequired(false))
                        .queryParam(param -> param.key("limit")
                                .value((limit != null) ? limit : 20).isRequired(false))
                        .queryParam(param -> param.key("offset")
                                .value((offset != null) ? offset : 0).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oauth_2_0"))
                        .arraySerializationFormat(ArraySerializationFormat.CSV)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, PagingSavedEpisodeObject.class))
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n",
                                (reason, context) -> new UnauthorizedException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n",
                                (reason, context) -> new ForbiddenException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("The app has exceeded its rate limits.\n",
                                (reason, context) -> new TooManyRequestsException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Save one or more episodes to the current user's library.&lt;br/&gt; This API endpoint is in
     * __beta__ and could change without warning. Please share any feedback that you have, or issues
     * that you discover, in our [developer community
     * forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).
     * @param  ids  Required parameter: Example:
     * @param  body  Optional parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<Void> saveEpisodesUser(
            final String ids,
            final MeEpisodesRequest body) throws ApiException, IOException {
        return prepareSaveEpisodesUserRequest(ids, body).execute();
    }

    /**
     * Save one or more episodes to the current user's library.&lt;br/&gt; This API endpoint is in
     * __beta__ and could change without warning. Please share any feedback that you have, or issues
     * that you discover, in our [developer community
     * forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).
     * @param  ids  Required parameter: Example:
     * @param  body  Optional parameter: Example:
     * @return    Returns the Void wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<Void>> saveEpisodesUserAsync(
            final String ids,
            final MeEpisodesRequest body) {
        try { 
            return prepareSaveEpisodesUserRequest(ids, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for saveEpisodesUser.
     */
    private ApiCall<ApiResponse<Void>, ApiException> prepareSaveEpisodesUserRequest(
            final String ids,
            final MeEpisodesRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<Void>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/me/episodes")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .queryParam(param -> param.key("ids")
                                .value(ids))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .withAuth(auth -> auth
                                .add("oauth_2_0"))
                        .arraySerializationFormat(ArraySerializationFormat.CSV)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n",
                                (reason, context) -> new UnauthorizedException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n",
                                (reason, context) -> new ForbiddenException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("The app has exceeded its rate limits.\n",
                                (reason, context) -> new TooManyRequestsException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Remove one or more episodes from the current user's library.&lt;br/&gt; This API endpoint is in
     * __beta__ and could change without warning. Please share any feedback that you have, or issues
     * that you discover, in our [developer community
     * forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).
     * @param  ids  Required parameter: Example:
     * @param  body  Optional parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<Void> removeEpisodesUser(
            final String ids,
            final MeEpisodesRequest1 body) throws ApiException, IOException {
        return prepareRemoveEpisodesUserRequest(ids, body).execute();
    }

    /**
     * Remove one or more episodes from the current user's library.&lt;br/&gt; This API endpoint is in
     * __beta__ and could change without warning. Please share any feedback that you have, or issues
     * that you discover, in our [developer community
     * forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).
     * @param  ids  Required parameter: Example:
     * @param  body  Optional parameter: Example:
     * @return    Returns the Void wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<Void>> removeEpisodesUserAsync(
            final String ids,
            final MeEpisodesRequest1 body) {
        try { 
            return prepareRemoveEpisodesUserRequest(ids, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for removeEpisodesUser.
     */
    private ApiCall<ApiResponse<Void>, ApiException> prepareRemoveEpisodesUserRequest(
            final String ids,
            final MeEpisodesRequest1 body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<Void>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/me/episodes")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .queryParam(param -> param.key("ids")
                                .value(ids))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .withAuth(auth -> auth
                                .add("oauth_2_0"))
                        .arraySerializationFormat(ArraySerializationFormat.CSV)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n",
                                (reason, context) -> new UnauthorizedException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n",
                                (reason, context) -> new ForbiddenException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("The app has exceeded its rate limits.\n",
                                (reason, context) -> new TooManyRequestsException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Check if one or more episodes is already saved in the current Spotify user's 'Your Episodes'
     * library.&lt;br/&gt; This API endpoint is in __beta__ and could change without warning. Please share
     * any feedback that you have, or issues that you discover, in our [developer community
     * forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer)..
     * @param  ids  Required parameter: Example:
     * @return    Returns the List of Boolean wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<List<Boolean>> checkUsersSavedEpisodes(
            final String ids) throws ApiException, IOException {
        return prepareCheckUsersSavedEpisodesRequest(ids).execute();
    }

    /**
     * Check if one or more episodes is already saved in the current Spotify user's 'Your Episodes'
     * library.&lt;br/&gt; This API endpoint is in __beta__ and could change without warning. Please share
     * any feedback that you have, or issues that you discover, in our [developer community
     * forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer)..
     * @param  ids  Required parameter: Example:
     * @return    Returns the List of Boolean wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<List<Boolean>>> checkUsersSavedEpisodesAsync(
            final String ids) {
        try { 
            return prepareCheckUsersSavedEpisodesRequest(ids).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for checkUsersSavedEpisodes.
     */
    private ApiCall<ApiResponse<List<Boolean>>, ApiException> prepareCheckUsersSavedEpisodesRequest(
            final String ids) throws IOException {
        return new ApiCall.Builder<ApiResponse<List<Boolean>>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/me/episodes/contains")
                        .queryParam(param -> param.key("ids")
                                .value(ids))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oauth_2_0"))
                        .arraySerializationFormat(ArraySerializationFormat.CSV)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        Boolean[].class))
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n",
                                (reason, context) -> new UnauthorizedException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n",
                                (reason, context) -> new ForbiddenException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("The app has exceeded its rate limits.\n",
                                (reason, context) -> new TooManyRequestsException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}