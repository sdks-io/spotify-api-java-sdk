/*
 * SpotifyWebAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.spotify.api.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.spotify.api.ApiHelper;
import com.spotify.api.Server;
import com.spotify.api.exceptions.ApiException;
import com.spotify.api.exceptions.ForbiddenException;
import com.spotify.api.exceptions.TooManyRequestsException;
import com.spotify.api.exceptions.UnauthorizedException;
import com.spotify.api.http.request.HttpMethod;
import com.spotify.api.http.response.ApiResponse;
import com.spotify.api.models.ImageObject;
import com.spotify.api.models.PagingFeaturedPlaylistObject;
import com.spotify.api.models.PagingPlaylistObject;
import com.spotify.api.models.PagingPlaylistTrackObject;
import com.spotify.api.models.PlaylistObject;
import com.spotify.api.models.PlaylistSnapshotId;
import com.spotify.api.models.PlaylistsRequest;
import com.spotify.api.models.PlaylistsTracksRequest;
import com.spotify.api.models.PlaylistsTracksRequest1;
import com.spotify.api.models.PlaylistsTracksRequest2;
import com.spotify.api.models.UsersPlaylistsRequest;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.http.request.ArraySerializationFormat;
import io.apimatic.coreinterfaces.http.request.ResponseClassType;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class PlaylistsController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public PlaylistsController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Get a playlist owned by a Spotify user.
     * @param  playlistId  Required parameter: Example:
     * @param  market  Optional parameter: Example:
     * @param  fields  Optional parameter: Example:
     * @param  additionalTypes  Optional parameter: Example:
     * @return    Returns the PlaylistObject wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<PlaylistObject> getPlaylist(
            final String playlistId,
            final String market,
            final String fields,
            final String additionalTypes) throws ApiException, IOException {
        return prepareGetPlaylistRequest(playlistId, market, fields, additionalTypes).execute();
    }

    /**
     * Get a playlist owned by a Spotify user.
     * @param  playlistId  Required parameter: Example:
     * @param  market  Optional parameter: Example:
     * @param  fields  Optional parameter: Example:
     * @param  additionalTypes  Optional parameter: Example:
     * @return    Returns the PlaylistObject wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<PlaylistObject>> getPlaylistAsync(
            final String playlistId,
            final String market,
            final String fields,
            final String additionalTypes) {
        try { 
            return prepareGetPlaylistRequest(playlistId, market, fields, additionalTypes).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getPlaylist.
     */
    private ApiCall<ApiResponse<PlaylistObject>, ApiException> prepareGetPlaylistRequest(
            final String playlistId,
            final String market,
            final String fields,
            final String additionalTypes) throws IOException {
        return new ApiCall.Builder<ApiResponse<PlaylistObject>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/playlists/{playlist_id}")
                        .queryParam(param -> param.key("market")
                                .value(market).isRequired(false))
                        .queryParam(param -> param.key("fields")
                                .value(fields).isRequired(false))
                        .queryParam(param -> param.key("additional_types")
                                .value(additionalTypes).isRequired(false))
                        .templateParam(param -> param.key("playlist_id").value(playlistId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oauth_2_0"))
                        .arraySerializationFormat(ArraySerializationFormat.CSV)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, PlaylistObject.class))
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n",
                                (reason, context) -> new UnauthorizedException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n",
                                (reason, context) -> new ForbiddenException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("The app has exceeded its rate limits.\n",
                                (reason, context) -> new TooManyRequestsException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Change a playlist's name and public/private state. (The user must, of course, own the
     * playlist.).
     * @param  playlistId  Required parameter: Example:
     * @param  body  Optional parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<Void> changePlaylistDetails(
            final String playlistId,
            final PlaylistsRequest body) throws ApiException, IOException {
        return prepareChangePlaylistDetailsRequest(playlistId, body).execute();
    }

    /**
     * Change a playlist's name and public/private state. (The user must, of course, own the
     * playlist.).
     * @param  playlistId  Required parameter: Example:
     * @param  body  Optional parameter: Example:
     * @return    Returns the Void wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<Void>> changePlaylistDetailsAsync(
            final String playlistId,
            final PlaylistsRequest body) {
        try { 
            return prepareChangePlaylistDetailsRequest(playlistId, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for changePlaylistDetails.
     */
    private ApiCall<ApiResponse<Void>, ApiException> prepareChangePlaylistDetailsRequest(
            final String playlistId,
            final PlaylistsRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<Void>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/playlists/{playlist_id}")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("playlist_id").value(playlistId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .withAuth(auth -> auth
                                .add("oauth_2_0"))
                        .arraySerializationFormat(ArraySerializationFormat.CSV)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n",
                                (reason, context) -> new UnauthorizedException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n",
                                (reason, context) -> new ForbiddenException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("The app has exceeded its rate limits.\n",
                                (reason, context) -> new TooManyRequestsException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get full details of the items of a playlist owned by a Spotify user.
     * @param  playlistId  Required parameter: Example:
     * @param  market  Optional parameter: Example:
     * @param  fields  Optional parameter: Example:
     * @param  limit  Optional parameter: Example: 20
     * @param  offset  Optional parameter: Example: 0
     * @param  additionalTypes  Optional parameter: Example:
     * @return    Returns the PagingPlaylistTrackObject wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<PagingPlaylistTrackObject> getPlaylistsTracks(
            final String playlistId,
            final String market,
            final String fields,
            final Integer limit,
            final Integer offset,
            final String additionalTypes) throws ApiException, IOException {
        return prepareGetPlaylistsTracksRequest(playlistId, market, fields, limit, offset,
                additionalTypes).execute();
    }

    /**
     * Get full details of the items of a playlist owned by a Spotify user.
     * @param  playlistId  Required parameter: Example:
     * @param  market  Optional parameter: Example:
     * @param  fields  Optional parameter: Example:
     * @param  limit  Optional parameter: Example: 20
     * @param  offset  Optional parameter: Example: 0
     * @param  additionalTypes  Optional parameter: Example:
     * @return    Returns the PagingPlaylistTrackObject wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<PagingPlaylistTrackObject>> getPlaylistsTracksAsync(
            final String playlistId,
            final String market,
            final String fields,
            final Integer limit,
            final Integer offset,
            final String additionalTypes) {
        try { 
            return prepareGetPlaylistsTracksRequest(playlistId, market, fields, limit, offset,
            additionalTypes).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getPlaylistsTracks.
     */
    private ApiCall<ApiResponse<PagingPlaylistTrackObject>, ApiException> prepareGetPlaylistsTracksRequest(
            final String playlistId,
            final String market,
            final String fields,
            final Integer limit,
            final Integer offset,
            final String additionalTypes) throws IOException {
        return new ApiCall.Builder<ApiResponse<PagingPlaylistTrackObject>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/playlists/{playlist_id}/tracks")
                        .queryParam(param -> param.key("market")
                                .value(market).isRequired(false))
                        .queryParam(param -> param.key("fields")
                                .value(fields).isRequired(false))
                        .queryParam(param -> param.key("limit")
                                .value((limit != null) ? limit : 20).isRequired(false))
                        .queryParam(param -> param.key("offset")
                                .value((offset != null) ? offset : 0).isRequired(false))
                        .queryParam(param -> param.key("additional_types")
                                .value(additionalTypes).isRequired(false))
                        .templateParam(param -> param.key("playlist_id").value(playlistId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oauth_2_0"))
                        .arraySerializationFormat(ArraySerializationFormat.CSV)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, PagingPlaylistTrackObject.class))
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n",
                                (reason, context) -> new UnauthorizedException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n",
                                (reason, context) -> new ForbiddenException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("The app has exceeded its rate limits.\n",
                                (reason, context) -> new TooManyRequestsException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Add one or more items to a user's playlist.
     * @param  playlistId  Required parameter: Example:
     * @param  position  Optional parameter: Example:
     * @param  uris  Optional parameter: Example:
     * @param  body  Optional parameter: Example:
     * @return    Returns the PlaylistSnapshotId wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<PlaylistSnapshotId> addTracksToPlaylist(
            final String playlistId,
            final Integer position,
            final String uris,
            final PlaylistsTracksRequest body) throws ApiException, IOException {
        return prepareAddTracksToPlaylistRequest(playlistId, position, uris, body).execute();
    }

    /**
     * Add one or more items to a user's playlist.
     * @param  playlistId  Required parameter: Example:
     * @param  position  Optional parameter: Example:
     * @param  uris  Optional parameter: Example:
     * @param  body  Optional parameter: Example:
     * @return    Returns the PlaylistSnapshotId wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<PlaylistSnapshotId>> addTracksToPlaylistAsync(
            final String playlistId,
            final Integer position,
            final String uris,
            final PlaylistsTracksRequest body) {
        try { 
            return prepareAddTracksToPlaylistRequest(playlistId, position, uris, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for addTracksToPlaylist.
     */
    private ApiCall<ApiResponse<PlaylistSnapshotId>, ApiException> prepareAddTracksToPlaylistRequest(
            final String playlistId,
            final Integer position,
            final String uris,
            final PlaylistsTracksRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<PlaylistSnapshotId>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/playlists/{playlist_id}/tracks")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .queryParam(param -> param.key("position")
                                .value(position).isRequired(false))
                        .queryParam(param -> param.key("uris")
                                .value(uris).isRequired(false))
                        .templateParam(param -> param.key("playlist_id").value(playlistId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oauth_2_0"))
                        .arraySerializationFormat(ArraySerializationFormat.CSV)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, PlaylistSnapshotId.class))
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n",
                                (reason, context) -> new UnauthorizedException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n",
                                (reason, context) -> new ForbiddenException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("The app has exceeded its rate limits.\n",
                                (reason, context) -> new TooManyRequestsException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Either reorder or replace items in a playlist depending on the request's parameters. To
     * reorder items, include `range_start`, `insert_before`, `range_length` and `snapshot_id` in
     * the request's body. To replace items, include `uris` as either a query parameter or in the
     * request's body. Replacing items in a playlist will overwrite its existing items. This
     * operation can be used for replacing or clearing items in a playlist. &lt;br/&gt; **Note**: Replace
     * and reorder are mutually exclusive operations which share the same endpoint, but have
     * different parameters. These operations can't be applied together in a single request.
     * @param  playlistId  Required parameter: Example:
     * @param  uris  Optional parameter: Example:
     * @param  body  Optional parameter: Example:
     * @return    Returns the PlaylistSnapshotId wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<PlaylistSnapshotId> reorderOrReplacePlaylistsTracks(
            final String playlistId,
            final String uris,
            final PlaylistsTracksRequest1 body) throws ApiException, IOException {
        return prepareReorderOrReplacePlaylistsTracksRequest(playlistId, uris, body).execute();
    }

    /**
     * Either reorder or replace items in a playlist depending on the request's parameters. To
     * reorder items, include `range_start`, `insert_before`, `range_length` and `snapshot_id` in
     * the request's body. To replace items, include `uris` as either a query parameter or in the
     * request's body. Replacing items in a playlist will overwrite its existing items. This
     * operation can be used for replacing or clearing items in a playlist. &lt;br/&gt; **Note**: Replace
     * and reorder are mutually exclusive operations which share the same endpoint, but have
     * different parameters. These operations can't be applied together in a single request.
     * @param  playlistId  Required parameter: Example:
     * @param  uris  Optional parameter: Example:
     * @param  body  Optional parameter: Example:
     * @return    Returns the PlaylistSnapshotId wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<PlaylistSnapshotId>> reorderOrReplacePlaylistsTracksAsync(
            final String playlistId,
            final String uris,
            final PlaylistsTracksRequest1 body) {
        try { 
            return prepareReorderOrReplacePlaylistsTracksRequest(playlistId, uris, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for reorderOrReplacePlaylistsTracks.
     */
    private ApiCall<ApiResponse<PlaylistSnapshotId>, ApiException> prepareReorderOrReplacePlaylistsTracksRequest(
            final String playlistId,
            final String uris,
            final PlaylistsTracksRequest1 body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<PlaylistSnapshotId>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/playlists/{playlist_id}/tracks")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .queryParam(param -> param.key("uris")
                                .value(uris).isRequired(false))
                        .templateParam(param -> param.key("playlist_id").value(playlistId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oauth_2_0"))
                        .arraySerializationFormat(ArraySerializationFormat.CSV)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, PlaylistSnapshotId.class))
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n",
                                (reason, context) -> new UnauthorizedException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n",
                                (reason, context) -> new ForbiddenException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("The app has exceeded its rate limits.\n",
                                (reason, context) -> new TooManyRequestsException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Remove one or more items from a user's playlist.
     * @param  playlistId  Required parameter: Example:
     * @param  body  Optional parameter: Example:
     * @return    Returns the PlaylistSnapshotId wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<PlaylistSnapshotId> removeTracksPlaylist(
            final String playlistId,
            final PlaylistsTracksRequest2 body) throws ApiException, IOException {
        return prepareRemoveTracksPlaylistRequest(playlistId, body).execute();
    }

    /**
     * Remove one or more items from a user's playlist.
     * @param  playlistId  Required parameter: Example:
     * @param  body  Optional parameter: Example:
     * @return    Returns the PlaylistSnapshotId wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<PlaylistSnapshotId>> removeTracksPlaylistAsync(
            final String playlistId,
            final PlaylistsTracksRequest2 body) {
        try { 
            return prepareRemoveTracksPlaylistRequest(playlistId, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for removeTracksPlaylist.
     */
    private ApiCall<ApiResponse<PlaylistSnapshotId>, ApiException> prepareRemoveTracksPlaylistRequest(
            final String playlistId,
            final PlaylistsTracksRequest2 body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<PlaylistSnapshotId>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/playlists/{playlist_id}/tracks")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("playlist_id").value(playlistId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oauth_2_0"))
                        .arraySerializationFormat(ArraySerializationFormat.CSV)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, PlaylistSnapshotId.class))
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n",
                                (reason, context) -> new UnauthorizedException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n",
                                (reason, context) -> new ForbiddenException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("The app has exceeded its rate limits.\n",
                                (reason, context) -> new TooManyRequestsException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get a list of the playlists owned or followed by the current Spotify user.
     * @param  limit  Optional parameter: Example: 20
     * @param  offset  Optional parameter: Example: 0
     * @return    Returns the PagingPlaylistObject wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<PagingPlaylistObject> getAListOfCurrentUsersPlaylists(
            final Integer limit,
            final Integer offset) throws ApiException, IOException {
        return prepareGetAListOfCurrentUsersPlaylistsRequest(limit, offset).execute();
    }

    /**
     * Get a list of the playlists owned or followed by the current Spotify user.
     * @param  limit  Optional parameter: Example: 20
     * @param  offset  Optional parameter: Example: 0
     * @return    Returns the PagingPlaylistObject wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<PagingPlaylistObject>> getAListOfCurrentUsersPlaylistsAsync(
            final Integer limit,
            final Integer offset) {
        try { 
            return prepareGetAListOfCurrentUsersPlaylistsRequest(limit, offset).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getAListOfCurrentUsersPlaylists.
     */
    private ApiCall<ApiResponse<PagingPlaylistObject>, ApiException> prepareGetAListOfCurrentUsersPlaylistsRequest(
            final Integer limit,
            final Integer offset) throws IOException {
        return new ApiCall.Builder<ApiResponse<PagingPlaylistObject>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/me/playlists")
                        .queryParam(param -> param.key("limit")
                                .value((limit != null) ? limit : 20).isRequired(false))
                        .queryParam(param -> param.key("offset")
                                .value((offset != null) ? offset : 0).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oauth_2_0"))
                        .arraySerializationFormat(ArraySerializationFormat.CSV)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, PagingPlaylistObject.class))
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n",
                                (reason, context) -> new UnauthorizedException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n",
                                (reason, context) -> new ForbiddenException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("The app has exceeded its rate limits.\n",
                                (reason, context) -> new TooManyRequestsException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get a list of the playlists owned or followed by a Spotify user.
     * @param  userId  Required parameter: Example:
     * @param  limit  Optional parameter: Example: 20
     * @param  offset  Optional parameter: Example: 0
     * @return    Returns the PagingPlaylistObject wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<PagingPlaylistObject> getListUsersPlaylists(
            final String userId,
            final Integer limit,
            final Integer offset) throws ApiException, IOException {
        return prepareGetListUsersPlaylistsRequest(userId, limit, offset).execute();
    }

    /**
     * Get a list of the playlists owned or followed by a Spotify user.
     * @param  userId  Required parameter: Example:
     * @param  limit  Optional parameter: Example: 20
     * @param  offset  Optional parameter: Example: 0
     * @return    Returns the PagingPlaylistObject wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<PagingPlaylistObject>> getListUsersPlaylistsAsync(
            final String userId,
            final Integer limit,
            final Integer offset) {
        try { 
            return prepareGetListUsersPlaylistsRequest(userId, limit, offset).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getListUsersPlaylists.
     */
    private ApiCall<ApiResponse<PagingPlaylistObject>, ApiException> prepareGetListUsersPlaylistsRequest(
            final String userId,
            final Integer limit,
            final Integer offset) throws IOException {
        return new ApiCall.Builder<ApiResponse<PagingPlaylistObject>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/users/{user_id}/playlists")
                        .queryParam(param -> param.key("limit")
                                .value((limit != null) ? limit : 20).isRequired(false))
                        .queryParam(param -> param.key("offset")
                                .value((offset != null) ? offset : 0).isRequired(false))
                        .templateParam(param -> param.key("user_id").value(userId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oauth_2_0"))
                        .arraySerializationFormat(ArraySerializationFormat.CSV)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, PagingPlaylistObject.class))
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n",
                                (reason, context) -> new UnauthorizedException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n",
                                (reason, context) -> new ForbiddenException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("The app has exceeded its rate limits.\n",
                                (reason, context) -> new TooManyRequestsException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Create a playlist for a Spotify user. (The playlist will be empty until you [add
     * tracks](/documentation/web-api/reference/add-tracks-to-playlist).) Each user is generally
     * limited to a maximum of 11000 playlists.
     * @param  userId  Required parameter: Example:
     * @param  body  Optional parameter: Example:
     * @return    Returns the PlaylistObject wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<PlaylistObject> createPlaylist(
            final String userId,
            final UsersPlaylistsRequest body) throws ApiException, IOException {
        return prepareCreatePlaylistRequest(userId, body).execute();
    }

    /**
     * Create a playlist for a Spotify user. (The playlist will be empty until you [add
     * tracks](/documentation/web-api/reference/add-tracks-to-playlist).) Each user is generally
     * limited to a maximum of 11000 playlists.
     * @param  userId  Required parameter: Example:
     * @param  body  Optional parameter: Example:
     * @return    Returns the PlaylistObject wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<PlaylistObject>> createPlaylistAsync(
            final String userId,
            final UsersPlaylistsRequest body) {
        try { 
            return prepareCreatePlaylistRequest(userId, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for createPlaylist.
     */
    private ApiCall<ApiResponse<PlaylistObject>, ApiException> prepareCreatePlaylistRequest(
            final String userId,
            final UsersPlaylistsRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<PlaylistObject>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/users/{user_id}/playlists")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("user_id").value(userId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oauth_2_0"))
                        .arraySerializationFormat(ArraySerializationFormat.CSV)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, PlaylistObject.class))
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n",
                                (reason, context) -> new UnauthorizedException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n",
                                (reason, context) -> new ForbiddenException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("The app has exceeded its rate limits.\n",
                                (reason, context) -> new TooManyRequestsException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get a list of Spotify featured playlists (shown, for example, on a Spotify player's 'Browse'
     * tab).
     * @param  locale  Optional parameter: Example:
     * @param  limit  Optional parameter: Example: 20
     * @param  offset  Optional parameter: Example: 0
     * @return    Returns the PagingFeaturedPlaylistObject wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<PagingFeaturedPlaylistObject> getFeaturedPlaylists(
            final String locale,
            final Integer limit,
            final Integer offset) throws ApiException, IOException {
        return prepareGetFeaturedPlaylistsRequest(locale, limit, offset).execute();
    }

    /**
     * Get a list of Spotify featured playlists (shown, for example, on a Spotify player's 'Browse'
     * tab).
     * @param  locale  Optional parameter: Example:
     * @param  limit  Optional parameter: Example: 20
     * @param  offset  Optional parameter: Example: 0
     * @return    Returns the PagingFeaturedPlaylistObject wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<PagingFeaturedPlaylistObject>> getFeaturedPlaylistsAsync(
            final String locale,
            final Integer limit,
            final Integer offset) {
        try { 
            return prepareGetFeaturedPlaylistsRequest(locale, limit, offset).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getFeaturedPlaylists.
     */
    private ApiCall<ApiResponse<PagingFeaturedPlaylistObject>, ApiException> prepareGetFeaturedPlaylistsRequest(
            final String locale,
            final Integer limit,
            final Integer offset) throws IOException {
        return new ApiCall.Builder<ApiResponse<PagingFeaturedPlaylistObject>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/browse/featured-playlists")
                        .queryParam(param -> param.key("locale")
                                .value(locale).isRequired(false))
                        .queryParam(param -> param.key("limit")
                                .value((limit != null) ? limit : 20).isRequired(false))
                        .queryParam(param -> param.key("offset")
                                .value((offset != null) ? offset : 0).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oauth_2_0"))
                        .arraySerializationFormat(ArraySerializationFormat.CSV)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, PagingFeaturedPlaylistObject.class))
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n",
                                (reason, context) -> new UnauthorizedException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n",
                                (reason, context) -> new ForbiddenException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("The app has exceeded its rate limits.\n",
                                (reason, context) -> new TooManyRequestsException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get a list of Spotify playlists tagged with a particular category.
     * @param  categoryId  Required parameter: Example:
     * @param  limit  Optional parameter: Example: 20
     * @param  offset  Optional parameter: Example: 0
     * @return    Returns the PagingFeaturedPlaylistObject wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<PagingFeaturedPlaylistObject> getACategoriesPlaylists(
            final String categoryId,
            final Integer limit,
            final Integer offset) throws ApiException, IOException {
        return prepareGetACategoriesPlaylistsRequest(categoryId, limit, offset).execute();
    }

    /**
     * Get a list of Spotify playlists tagged with a particular category.
     * @param  categoryId  Required parameter: Example:
     * @param  limit  Optional parameter: Example: 20
     * @param  offset  Optional parameter: Example: 0
     * @return    Returns the PagingFeaturedPlaylistObject wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<PagingFeaturedPlaylistObject>> getACategoriesPlaylistsAsync(
            final String categoryId,
            final Integer limit,
            final Integer offset) {
        try { 
            return prepareGetACategoriesPlaylistsRequest(categoryId, limit, offset).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getACategoriesPlaylists.
     */
    private ApiCall<ApiResponse<PagingFeaturedPlaylistObject>, ApiException> prepareGetACategoriesPlaylistsRequest(
            final String categoryId,
            final Integer limit,
            final Integer offset) throws IOException {
        return new ApiCall.Builder<ApiResponse<PagingFeaturedPlaylistObject>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/browse/categories/{category_id}/playlists")
                        .queryParam(param -> param.key("limit")
                                .value((limit != null) ? limit : 20).isRequired(false))
                        .queryParam(param -> param.key("offset")
                                .value((offset != null) ? offset : 0).isRequired(false))
                        .templateParam(param -> param.key("category_id").value(categoryId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oauth_2_0"))
                        .arraySerializationFormat(ArraySerializationFormat.CSV)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, PagingFeaturedPlaylistObject.class))
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n",
                                (reason, context) -> new UnauthorizedException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n",
                                (reason, context) -> new ForbiddenException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("The app has exceeded its rate limits.\n",
                                (reason, context) -> new TooManyRequestsException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get the current image associated with a specific playlist.
     * @param  playlistId  Required parameter: Example:
     * @return    Returns the List of ImageObject wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<List<ImageObject>> getPlaylistCover(
            final String playlistId) throws ApiException, IOException {
        return prepareGetPlaylistCoverRequest(playlistId).execute();
    }

    /**
     * Get the current image associated with a specific playlist.
     * @param  playlistId  Required parameter: Example:
     * @return    Returns the List of ImageObject wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<List<ImageObject>>> getPlaylistCoverAsync(
            final String playlistId) {
        try { 
            return prepareGetPlaylistCoverRequest(playlistId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getPlaylistCover.
     */
    private ApiCall<ApiResponse<List<ImageObject>>, ApiException> prepareGetPlaylistCoverRequest(
            final String playlistId) throws IOException {
        return new ApiCall.Builder<ApiResponse<List<ImageObject>>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/playlists/{playlist_id}/images")
                        .templateParam(param -> param.key("playlist_id").value(playlistId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oauth_2_0"))
                        .arraySerializationFormat(ArraySerializationFormat.CSV)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        ImageObject[].class))
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n",
                                (reason, context) -> new UnauthorizedException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n",
                                (reason, context) -> new ForbiddenException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("The app has exceeded its rate limits.\n",
                                (reason, context) -> new TooManyRequestsException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Replace the image used to represent a specific playlist.
     * @param  playlistId  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<Void> uploadCustomPlaylistCover(
            final String playlistId,
            final Object body) throws ApiException, IOException {
        return prepareUploadCustomPlaylistCoverRequest(playlistId, body).execute();
    }

    /**
     * Replace the image used to represent a specific playlist.
     * @param  playlistId  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the Void wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<Void>> uploadCustomPlaylistCoverAsync(
            final String playlistId,
            final Object body) {
        try { 
            return prepareUploadCustomPlaylistCoverRequest(playlistId, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for uploadCustomPlaylistCover.
     */
    private ApiCall<ApiResponse<Void>, ApiException> prepareUploadCustomPlaylistCoverRequest(
            final String playlistId,
            final Object body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<Void>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/playlists/{playlist_id}/images")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("playlist_id").value(playlistId)
                                .shouldEncode(true))
                        .headerParam(param ->param.key("content-type").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oauth_2_0"))
                        .arraySerializationFormat(ArraySerializationFormat.CSV)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n",
                                (reason, context) -> new UnauthorizedException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n",
                                (reason, context) -> new ForbiddenException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("The app has exceeded its rate limits.\n",
                                (reason, context) -> new TooManyRequestsException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}