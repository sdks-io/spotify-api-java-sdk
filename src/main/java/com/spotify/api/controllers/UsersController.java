/*
 * SpotifyWebAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.spotify.api.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.spotify.api.ApiHelper;
import com.spotify.api.Server;
import com.spotify.api.exceptions.ApiException;
import com.spotify.api.exceptions.ForbiddenException;
import com.spotify.api.exceptions.TooManyRequestsException;
import com.spotify.api.exceptions.UnauthorizedException;
import com.spotify.api.http.request.HttpMethod;
import com.spotify.api.http.response.ApiResponse;
import com.spotify.api.models.CursorPagedArtists;
import com.spotify.api.models.ItemType1Enum;
import com.spotify.api.models.ItemType2Enum;
import com.spotify.api.models.ItemType3Enum;
import com.spotify.api.models.MeFollowingRequest;
import com.spotify.api.models.MeFollowingRequest1;
import com.spotify.api.models.PagingArtistObject;
import com.spotify.api.models.PagingTrackObject;
import com.spotify.api.models.PlaylistsFollowersRequest;
import com.spotify.api.models.PrivateUserObject;
import com.spotify.api.models.PublicUserObject;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.http.request.ArraySerializationFormat;
import io.apimatic.coreinterfaces.http.request.ResponseClassType;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class UsersController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public UsersController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Get detailed profile information about the current user (including the current user's
     * username).
     * @return    Returns the PrivateUserObject wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<PrivateUserObject> getCurrentUsersProfile() throws ApiException, IOException {
        return prepareGetCurrentUsersProfileRequest().execute();
    }

    /**
     * Get detailed profile information about the current user (including the current user's
     * username).
     * @return    Returns the PrivateUserObject wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<PrivateUserObject>> getCurrentUsersProfileAsync() {
        try { 
            return prepareGetCurrentUsersProfileRequest().executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getCurrentUsersProfile.
     */
    private ApiCall<ApiResponse<PrivateUserObject>, ApiException> prepareGetCurrentUsersProfileRequest() throws IOException {
        return new ApiCall.Builder<ApiResponse<PrivateUserObject>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/me")
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oauth_2_0"))
                        .arraySerializationFormat(ArraySerializationFormat.CSV)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, PrivateUserObject.class))
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n",
                                (reason, context) -> new UnauthorizedException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n",
                                (reason, context) -> new ForbiddenException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("The app has exceeded its rate limits.\n",
                                (reason, context) -> new TooManyRequestsException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get public profile information about a Spotify user.
     * @param  userId  Required parameter: Example:
     * @return    Returns the PublicUserObject wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<PublicUserObject> getUsersProfile(
            final String userId) throws ApiException, IOException {
        return prepareGetUsersProfileRequest(userId).execute();
    }

    /**
     * Get public profile information about a Spotify user.
     * @param  userId  Required parameter: Example:
     * @return    Returns the PublicUserObject wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<PublicUserObject>> getUsersProfileAsync(
            final String userId) {
        try { 
            return prepareGetUsersProfileRequest(userId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getUsersProfile.
     */
    private ApiCall<ApiResponse<PublicUserObject>, ApiException> prepareGetUsersProfileRequest(
            final String userId) throws IOException {
        return new ApiCall.Builder<ApiResponse<PublicUserObject>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/users/{user_id}")
                        .templateParam(param -> param.key("user_id").value(userId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oauth_2_0"))
                        .arraySerializationFormat(ArraySerializationFormat.CSV)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, PublicUserObject.class))
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n",
                                (reason, context) -> new UnauthorizedException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n",
                                (reason, context) -> new ForbiddenException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("The app has exceeded its rate limits.\n",
                                (reason, context) -> new TooManyRequestsException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Add the current user as a follower of a playlist.
     * @param  playlistId  Required parameter: Example:
     * @param  body  Optional parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<Void> followPlaylist(
            final String playlistId,
            final PlaylistsFollowersRequest body) throws ApiException, IOException {
        return prepareFollowPlaylistRequest(playlistId, body).execute();
    }

    /**
     * Add the current user as a follower of a playlist.
     * @param  playlistId  Required parameter: Example:
     * @param  body  Optional parameter: Example:
     * @return    Returns the Void wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<Void>> followPlaylistAsync(
            final String playlistId,
            final PlaylistsFollowersRequest body) {
        try { 
            return prepareFollowPlaylistRequest(playlistId, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for followPlaylist.
     */
    private ApiCall<ApiResponse<Void>, ApiException> prepareFollowPlaylistRequest(
            final String playlistId,
            final PlaylistsFollowersRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<Void>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/playlists/{playlist_id}/followers")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("playlist_id").value(playlistId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .withAuth(auth -> auth
                                .add("oauth_2_0"))
                        .arraySerializationFormat(ArraySerializationFormat.CSV)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n",
                                (reason, context) -> new UnauthorizedException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n",
                                (reason, context) -> new ForbiddenException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("The app has exceeded its rate limits.\n",
                                (reason, context) -> new TooManyRequestsException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Remove the current user as a follower of a playlist.
     * @param  playlistId  Required parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<Void> unfollowPlaylist(
            final String playlistId) throws ApiException, IOException {
        return prepareUnfollowPlaylistRequest(playlistId).execute();
    }

    /**
     * Remove the current user as a follower of a playlist.
     * @param  playlistId  Required parameter: Example:
     * @return    Returns the Void wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<Void>> unfollowPlaylistAsync(
            final String playlistId) {
        try { 
            return prepareUnfollowPlaylistRequest(playlistId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for unfollowPlaylist.
     */
    private ApiCall<ApiResponse<Void>, ApiException> prepareUnfollowPlaylistRequest(
            final String playlistId) throws IOException {
        return new ApiCall.Builder<ApiResponse<Void>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/playlists/{playlist_id}/followers")
                        .templateParam(param -> param.key("playlist_id").value(playlistId)
                                .shouldEncode(true))
                        .withAuth(auth -> auth
                                .add("oauth_2_0"))
                        .arraySerializationFormat(ArraySerializationFormat.CSV)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n",
                                (reason, context) -> new UnauthorizedException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n",
                                (reason, context) -> new ForbiddenException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("The app has exceeded its rate limits.\n",
                                (reason, context) -> new TooManyRequestsException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get the current user's followed artists.
     * @param  type  Required parameter: Example:
     * @param  after  Optional parameter: Example:
     * @param  limit  Optional parameter: Example: 20
     * @return    Returns the CursorPagedArtists wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<CursorPagedArtists> getFollowed(
            final ItemType1Enum type,
            final String after,
            final Integer limit) throws ApiException, IOException {
        return prepareGetFollowedRequest(type, after, limit).execute();
    }

    /**
     * Get the current user's followed artists.
     * @param  type  Required parameter: Example:
     * @param  after  Optional parameter: Example:
     * @param  limit  Optional parameter: Example: 20
     * @return    Returns the CursorPagedArtists wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<CursorPagedArtists>> getFollowedAsync(
            final ItemType1Enum type,
            final String after,
            final Integer limit) {
        try { 
            return prepareGetFollowedRequest(type, after, limit).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getFollowed.
     */
    private ApiCall<ApiResponse<CursorPagedArtists>, ApiException> prepareGetFollowedRequest(
            final ItemType1Enum type,
            final String after,
            final Integer limit) throws IOException {
        return new ApiCall.Builder<ApiResponse<CursorPagedArtists>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/me/following")
                        .queryParam(param -> param.key("type")
                                .value((type != null) ? type.value() : null))
                        .queryParam(param -> param.key("after")
                                .value(after).isRequired(false))
                        .queryParam(param -> param.key("limit")
                                .value((limit != null) ? limit : 20).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oauth_2_0"))
                        .arraySerializationFormat(ArraySerializationFormat.CSV)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, CursorPagedArtists.class))
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n",
                                (reason, context) -> new UnauthorizedException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n",
                                (reason, context) -> new ForbiddenException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("The app has exceeded its rate limits.\n",
                                (reason, context) -> new TooManyRequestsException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Add the current user as a follower of one or more artists or other Spotify users.
     * @param  type  Required parameter: Example:
     * @param  ids  Required parameter: Example:
     * @param  body  Optional parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<Void> followArtistsUsers(
            final ItemType2Enum type,
            final String ids,
            final MeFollowingRequest body) throws ApiException, IOException {
        return prepareFollowArtistsUsersRequest(type, ids, body).execute();
    }

    /**
     * Add the current user as a follower of one or more artists or other Spotify users.
     * @param  type  Required parameter: Example:
     * @param  ids  Required parameter: Example:
     * @param  body  Optional parameter: Example:
     * @return    Returns the Void wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<Void>> followArtistsUsersAsync(
            final ItemType2Enum type,
            final String ids,
            final MeFollowingRequest body) {
        try { 
            return prepareFollowArtistsUsersRequest(type, ids, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for followArtistsUsers.
     */
    private ApiCall<ApiResponse<Void>, ApiException> prepareFollowArtistsUsersRequest(
            final ItemType2Enum type,
            final String ids,
            final MeFollowingRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<Void>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/me/following")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .queryParam(param -> param.key("type")
                                .value((type != null) ? type.value() : null))
                        .queryParam(param -> param.key("ids")
                                .value(ids))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .withAuth(auth -> auth
                                .add("oauth_2_0"))
                        .arraySerializationFormat(ArraySerializationFormat.CSV)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n",
                                (reason, context) -> new UnauthorizedException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n",
                                (reason, context) -> new ForbiddenException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("The app has exceeded its rate limits.\n",
                                (reason, context) -> new TooManyRequestsException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Remove the current user as a follower of one or more artists or other Spotify users.
     * @param  type  Required parameter: Example:
     * @param  ids  Required parameter: Example:
     * @param  body  Optional parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<Void> unfollowArtistsUsers(
            final ItemType3Enum type,
            final String ids,
            final MeFollowingRequest1 body) throws ApiException, IOException {
        return prepareUnfollowArtistsUsersRequest(type, ids, body).execute();
    }

    /**
     * Remove the current user as a follower of one or more artists or other Spotify users.
     * @param  type  Required parameter: Example:
     * @param  ids  Required parameter: Example:
     * @param  body  Optional parameter: Example:
     * @return    Returns the Void wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<Void>> unfollowArtistsUsersAsync(
            final ItemType3Enum type,
            final String ids,
            final MeFollowingRequest1 body) {
        try { 
            return prepareUnfollowArtistsUsersRequest(type, ids, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for unfollowArtistsUsers.
     */
    private ApiCall<ApiResponse<Void>, ApiException> prepareUnfollowArtistsUsersRequest(
            final ItemType3Enum type,
            final String ids,
            final MeFollowingRequest1 body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<Void>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/me/following")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .queryParam(param -> param.key("type")
                                .value((type != null) ? type.value() : null))
                        .queryParam(param -> param.key("ids")
                                .value(ids))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .withAuth(auth -> auth
                                .add("oauth_2_0"))
                        .arraySerializationFormat(ArraySerializationFormat.CSV)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n",
                                (reason, context) -> new UnauthorizedException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n",
                                (reason, context) -> new ForbiddenException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("The app has exceeded its rate limits.\n",
                                (reason, context) -> new TooManyRequestsException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Check to see if the current user is following one or more artists or other Spotify users.
     * @param  type  Required parameter: Example:
     * @param  ids  Required parameter: Example:
     * @return    Returns the List of Boolean wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<List<Boolean>> checkCurrentUserFollows(
            final ItemType3Enum type,
            final String ids) throws ApiException, IOException {
        return prepareCheckCurrentUserFollowsRequest(type, ids).execute();
    }

    /**
     * Check to see if the current user is following one or more artists or other Spotify users.
     * @param  type  Required parameter: Example:
     * @param  ids  Required parameter: Example:
     * @return    Returns the List of Boolean wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<List<Boolean>>> checkCurrentUserFollowsAsync(
            final ItemType3Enum type,
            final String ids) {
        try { 
            return prepareCheckCurrentUserFollowsRequest(type, ids).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for checkCurrentUserFollows.
     */
    private ApiCall<ApiResponse<List<Boolean>>, ApiException> prepareCheckCurrentUserFollowsRequest(
            final ItemType3Enum type,
            final String ids) throws IOException {
        return new ApiCall.Builder<ApiResponse<List<Boolean>>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/me/following/contains")
                        .queryParam(param -> param.key("type")
                                .value((type != null) ? type.value() : null))
                        .queryParam(param -> param.key("ids")
                                .value(ids))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oauth_2_0"))
                        .arraySerializationFormat(ArraySerializationFormat.CSV)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        Boolean[].class))
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n",
                                (reason, context) -> new UnauthorizedException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n",
                                (reason, context) -> new ForbiddenException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("The app has exceeded its rate limits.\n",
                                (reason, context) -> new TooManyRequestsException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Check to see if one or more Spotify users are following a specified playlist.
     * @param  playlistId  Required parameter: Example:
     * @param  ids  Required parameter: Example:
     * @return    Returns the List of Boolean wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<List<Boolean>> checkIfUserFollowsPlaylist(
            final String playlistId,
            final String ids) throws ApiException, IOException {
        return prepareCheckIfUserFollowsPlaylistRequest(playlistId, ids).execute();
    }

    /**
     * Check to see if one or more Spotify users are following a specified playlist.
     * @param  playlistId  Required parameter: Example:
     * @param  ids  Required parameter: Example:
     * @return    Returns the List of Boolean wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<List<Boolean>>> checkIfUserFollowsPlaylistAsync(
            final String playlistId,
            final String ids) {
        try { 
            return prepareCheckIfUserFollowsPlaylistRequest(playlistId, ids).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for checkIfUserFollowsPlaylist.
     */
    private ApiCall<ApiResponse<List<Boolean>>, ApiException> prepareCheckIfUserFollowsPlaylistRequest(
            final String playlistId,
            final String ids) throws IOException {
        return new ApiCall.Builder<ApiResponse<List<Boolean>>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/playlists/{playlist_id}/followers/contains")
                        .queryParam(param -> param.key("ids")
                                .value(ids))
                        .templateParam(param -> param.key("playlist_id").value(playlistId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oauth_2_0"))
                        .arraySerializationFormat(ArraySerializationFormat.CSV)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        Boolean[].class))
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n",
                                (reason, context) -> new UnauthorizedException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n",
                                (reason, context) -> new ForbiddenException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("The app has exceeded its rate limits.\n",
                                (reason, context) -> new TooManyRequestsException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get the current user's top artists based on calculated affinity.
     * @param  timeRange  Optional parameter: Example: medium_term
     * @param  limit  Optional parameter: Example: 20
     * @param  offset  Optional parameter: Example: 0
     * @return    Returns the PagingArtistObject wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<PagingArtistObject> getUsersTopArtists(
            final String timeRange,
            final Integer limit,
            final Integer offset) throws ApiException, IOException {
        return prepareGetUsersTopArtistsRequest(timeRange, limit, offset).execute();
    }

    /**
     * Get the current user's top artists based on calculated affinity.
     * @param  timeRange  Optional parameter: Example: medium_term
     * @param  limit  Optional parameter: Example: 20
     * @param  offset  Optional parameter: Example: 0
     * @return    Returns the PagingArtistObject wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<PagingArtistObject>> getUsersTopArtistsAsync(
            final String timeRange,
            final Integer limit,
            final Integer offset) {
        try { 
            return prepareGetUsersTopArtistsRequest(timeRange, limit, offset).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getUsersTopArtists.
     */
    private ApiCall<ApiResponse<PagingArtistObject>, ApiException> prepareGetUsersTopArtistsRequest(
            final String timeRange,
            final Integer limit,
            final Integer offset) throws IOException {
        return new ApiCall.Builder<ApiResponse<PagingArtistObject>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/me/top/artists")
                        .queryParam(param -> param.key("time_range")
                                .value((timeRange != null) ? timeRange : "medium_term").isRequired(false))
                        .queryParam(param -> param.key("limit")
                                .value((limit != null) ? limit : 20).isRequired(false))
                        .queryParam(param -> param.key("offset")
                                .value((offset != null) ? offset : 0).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oauth_2_0"))
                        .arraySerializationFormat(ArraySerializationFormat.CSV)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, PagingArtistObject.class))
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n",
                                (reason, context) -> new UnauthorizedException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n",
                                (reason, context) -> new ForbiddenException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("The app has exceeded its rate limits.\n",
                                (reason, context) -> new TooManyRequestsException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get the current user's top tracks based on calculated affinity.
     * @param  timeRange  Optional parameter: Example: medium_term
     * @param  limit  Optional parameter: Example: 20
     * @param  offset  Optional parameter: Example: 0
     * @return    Returns the PagingTrackObject wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<PagingTrackObject> getUsersTopTracks(
            final String timeRange,
            final Integer limit,
            final Integer offset) throws ApiException, IOException {
        return prepareGetUsersTopTracksRequest(timeRange, limit, offset).execute();
    }

    /**
     * Get the current user's top tracks based on calculated affinity.
     * @param  timeRange  Optional parameter: Example: medium_term
     * @param  limit  Optional parameter: Example: 20
     * @param  offset  Optional parameter: Example: 0
     * @return    Returns the PagingTrackObject wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<PagingTrackObject>> getUsersTopTracksAsync(
            final String timeRange,
            final Integer limit,
            final Integer offset) {
        try { 
            return prepareGetUsersTopTracksRequest(timeRange, limit, offset).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getUsersTopTracks.
     */
    private ApiCall<ApiResponse<PagingTrackObject>, ApiException> prepareGetUsersTopTracksRequest(
            final String timeRange,
            final Integer limit,
            final Integer offset) throws IOException {
        return new ApiCall.Builder<ApiResponse<PagingTrackObject>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/me/top/tracks")
                        .queryParam(param -> param.key("time_range")
                                .value((timeRange != null) ? timeRange : "medium_term").isRequired(false))
                        .queryParam(param -> param.key("limit")
                                .value((limit != null) ? limit : 20).isRequired(false))
                        .queryParam(param -> param.key("offset")
                                .value((offset != null) ? offset : 0).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oauth_2_0"))
                        .arraySerializationFormat(ArraySerializationFormat.CSV)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, PagingTrackObject.class))
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n",
                                (reason, context) -> new UnauthorizedException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n",
                                (reason, context) -> new ForbiddenException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("The app has exceeded its rate limits.\n",
                                (reason, context) -> new TooManyRequestsException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}