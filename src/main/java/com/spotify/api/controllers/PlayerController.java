/*
 * SpotifyWebAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.spotify.api.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.spotify.api.ApiHelper;
import com.spotify.api.Server;
import com.spotify.api.exceptions.ApiException;
import com.spotify.api.exceptions.ForbiddenException;
import com.spotify.api.exceptions.TooManyRequestsException;
import com.spotify.api.exceptions.UnauthorizedException;
import com.spotify.api.http.request.HttpMethod;
import com.spotify.api.http.response.ApiResponse;
import com.spotify.api.models.CurrentlyPlayingContextObject;
import com.spotify.api.models.CurrentlyPlayingObject;
import com.spotify.api.models.CursorPagingPlayHistoryObject;
import com.spotify.api.models.ManyDevices;
import com.spotify.api.models.MePlayerPlayRequest;
import com.spotify.api.models.MePlayerRequest;
import com.spotify.api.models.QueueObject;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.http.request.ArraySerializationFormat;
import io.apimatic.coreinterfaces.http.request.ResponseClassType;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class PlayerController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public PlayerController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Get information about the user’s current playback state, including track or episode,
     * progress, and active device.
     * @param  market  Optional parameter: Example:
     * @param  additionalTypes  Optional parameter: Example:
     * @return    Returns the CurrentlyPlayingContextObject wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<CurrentlyPlayingContextObject> getInformationAboutTheUsersCurrentPlayback(
            final String market,
            final String additionalTypes) throws ApiException, IOException {
        return prepareGetInformationAboutTheUsersCurrentPlaybackRequest(market,
                additionalTypes).execute();
    }

    /**
     * Get information about the user’s current playback state, including track or episode,
     * progress, and active device.
     * @param  market  Optional parameter: Example:
     * @param  additionalTypes  Optional parameter: Example:
     * @return    Returns the CurrentlyPlayingContextObject wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<CurrentlyPlayingContextObject>> getInformationAboutTheUsersCurrentPlaybackAsync(
            final String market,
            final String additionalTypes) {
        try { 
            return prepareGetInformationAboutTheUsersCurrentPlaybackRequest(market,
            additionalTypes).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getInformationAboutTheUsersCurrentPlayback.
     */
    private ApiCall<ApiResponse<CurrentlyPlayingContextObject>, ApiException> prepareGetInformationAboutTheUsersCurrentPlaybackRequest(
            final String market,
            final String additionalTypes) throws IOException {
        return new ApiCall.Builder<ApiResponse<CurrentlyPlayingContextObject>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/me/player")
                        .queryParam(param -> param.key("market")
                                .value(market).isRequired(false))
                        .queryParam(param -> param.key("additional_types")
                                .value(additionalTypes).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oauth_2_0"))
                        .arraySerializationFormat(ArraySerializationFormat.CSV)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, CurrentlyPlayingContextObject.class))
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n",
                                (reason, context) -> new UnauthorizedException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n",
                                (reason, context) -> new ForbiddenException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("The app has exceeded its rate limits.\n",
                                (reason, context) -> new TooManyRequestsException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Transfer playback to a new device and optionally begin playback. This API only works for
     * users who have Spotify Premium. The order of execution is not guaranteed when you use this
     * API with other Player API endpoints.
     * @param  body  Optional parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<Void> transferAUsersPlayback(
            final MePlayerRequest body) throws ApiException, IOException {
        return prepareTransferAUsersPlaybackRequest(body).execute();
    }

    /**
     * Transfer playback to a new device and optionally begin playback. This API only works for
     * users who have Spotify Premium. The order of execution is not guaranteed when you use this
     * API with other Player API endpoints.
     * @param  body  Optional parameter: Example:
     * @return    Returns the Void wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<Void>> transferAUsersPlaybackAsync(
            final MePlayerRequest body) {
        try { 
            return prepareTransferAUsersPlaybackRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for transferAUsersPlayback.
     */
    private ApiCall<ApiResponse<Void>, ApiException> prepareTransferAUsersPlaybackRequest(
            final MePlayerRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<Void>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/me/player")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .withAuth(auth -> auth
                                .add("oauth_2_0"))
                        .arraySerializationFormat(ArraySerializationFormat.CSV)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n",
                                (reason, context) -> new UnauthorizedException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n",
                                (reason, context) -> new ForbiddenException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("The app has exceeded its rate limits.\n",
                                (reason, context) -> new TooManyRequestsException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get information about a user’s available Spotify Connect devices. Some device models are not
     * supported and will not be listed in the API response.
     * @return    Returns the ManyDevices wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<ManyDevices> getAUsersAvailableDevices() throws ApiException, IOException {
        return prepareGetAUsersAvailableDevicesRequest().execute();
    }

    /**
     * Get information about a user’s available Spotify Connect devices. Some device models are not
     * supported and will not be listed in the API response.
     * @return    Returns the ManyDevices wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<ManyDevices>> getAUsersAvailableDevicesAsync() {
        try { 
            return prepareGetAUsersAvailableDevicesRequest().executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getAUsersAvailableDevices.
     */
    private ApiCall<ApiResponse<ManyDevices>, ApiException> prepareGetAUsersAvailableDevicesRequest() throws IOException {
        return new ApiCall.Builder<ApiResponse<ManyDevices>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/me/player/devices")
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oauth_2_0"))
                        .arraySerializationFormat(ArraySerializationFormat.CSV)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, ManyDevices.class))
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n",
                                (reason, context) -> new UnauthorizedException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n",
                                (reason, context) -> new ForbiddenException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("The app has exceeded its rate limits.\n",
                                (reason, context) -> new TooManyRequestsException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get the object currently being played on the user's Spotify account.
     * @param  market  Optional parameter: Example:
     * @param  additionalTypes  Optional parameter: Example:
     * @return    Returns the CurrentlyPlayingObject wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<CurrentlyPlayingObject> getTheUsersCurrentlyPlayingTrack(
            final String market,
            final String additionalTypes) throws ApiException, IOException {
        return prepareGetTheUsersCurrentlyPlayingTrackRequest(market, additionalTypes).execute();
    }

    /**
     * Get the object currently being played on the user's Spotify account.
     * @param  market  Optional parameter: Example:
     * @param  additionalTypes  Optional parameter: Example:
     * @return    Returns the CurrentlyPlayingObject wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<CurrentlyPlayingObject>> getTheUsersCurrentlyPlayingTrackAsync(
            final String market,
            final String additionalTypes) {
        try { 
            return prepareGetTheUsersCurrentlyPlayingTrackRequest(market, additionalTypes).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getTheUsersCurrentlyPlayingTrack.
     */
    private ApiCall<ApiResponse<CurrentlyPlayingObject>, ApiException> prepareGetTheUsersCurrentlyPlayingTrackRequest(
            final String market,
            final String additionalTypes) throws IOException {
        return new ApiCall.Builder<ApiResponse<CurrentlyPlayingObject>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/me/player/currently-playing")
                        .queryParam(param -> param.key("market")
                                .value(market).isRequired(false))
                        .queryParam(param -> param.key("additional_types")
                                .value(additionalTypes).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oauth_2_0"))
                        .arraySerializationFormat(ArraySerializationFormat.CSV)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, CurrentlyPlayingObject.class))
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n",
                                (reason, context) -> new UnauthorizedException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n",
                                (reason, context) -> new ForbiddenException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("The app has exceeded its rate limits.\n",
                                (reason, context) -> new TooManyRequestsException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Start a new context or resume current playback on the user's active device. This API only
     * works for users who have Spotify Premium. The order of execution is not guaranteed when you
     * use this API with other Player API endpoints.
     * @param  deviceId  Optional parameter: Example:
     * @param  body  Optional parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<Void> startAUsersPlayback(
            final String deviceId,
            final MePlayerPlayRequest body) throws ApiException, IOException {
        return prepareStartAUsersPlaybackRequest(deviceId, body).execute();
    }

    /**
     * Start a new context or resume current playback on the user's active device. This API only
     * works for users who have Spotify Premium. The order of execution is not guaranteed when you
     * use this API with other Player API endpoints.
     * @param  deviceId  Optional parameter: Example:
     * @param  body  Optional parameter: Example:
     * @return    Returns the Void wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<Void>> startAUsersPlaybackAsync(
            final String deviceId,
            final MePlayerPlayRequest body) {
        try { 
            return prepareStartAUsersPlaybackRequest(deviceId, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for startAUsersPlayback.
     */
    private ApiCall<ApiResponse<Void>, ApiException> prepareStartAUsersPlaybackRequest(
            final String deviceId,
            final MePlayerPlayRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<Void>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/me/player/play")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .queryParam(param -> param.key("device_id")
                                .value(deviceId).isRequired(false))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .withAuth(auth -> auth
                                .add("oauth_2_0"))
                        .arraySerializationFormat(ArraySerializationFormat.CSV)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n",
                                (reason, context) -> new UnauthorizedException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n",
                                (reason, context) -> new ForbiddenException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("The app has exceeded its rate limits.\n",
                                (reason, context) -> new TooManyRequestsException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Pause playback on the user's account. This API only works for users who have Spotify Premium.
     * The order of execution is not guaranteed when you use this API with other Player API
     * endpoints.
     * @param  deviceId  Optional parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<Void> pauseAUsersPlayback(
            final String deviceId) throws ApiException, IOException {
        return preparePauseAUsersPlaybackRequest(deviceId).execute();
    }

    /**
     * Pause playback on the user's account. This API only works for users who have Spotify Premium.
     * The order of execution is not guaranteed when you use this API with other Player API
     * endpoints.
     * @param  deviceId  Optional parameter: Example:
     * @return    Returns the Void wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<Void>> pauseAUsersPlaybackAsync(
            final String deviceId) {
        try { 
            return preparePauseAUsersPlaybackRequest(deviceId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for pauseAUsersPlayback.
     */
    private ApiCall<ApiResponse<Void>, ApiException> preparePauseAUsersPlaybackRequest(
            final String deviceId) throws IOException {
        return new ApiCall.Builder<ApiResponse<Void>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/me/player/pause")
                        .queryParam(param -> param.key("device_id")
                                .value(deviceId).isRequired(false))
                        .withAuth(auth -> auth
                                .add("oauth_2_0"))
                        .arraySerializationFormat(ArraySerializationFormat.CSV)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n",
                                (reason, context) -> new UnauthorizedException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n",
                                (reason, context) -> new ForbiddenException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("The app has exceeded its rate limits.\n",
                                (reason, context) -> new TooManyRequestsException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Skips to next track in the user’s queue. This API only works for users who have Spotify
     * Premium. The order of execution is not guaranteed when you use this API with other Player API
     * endpoints.
     * @param  deviceId  Optional parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<Void> skipUsersPlaybackToNextTrack(
            final String deviceId) throws ApiException, IOException {
        return prepareSkipUsersPlaybackToNextTrackRequest(deviceId).execute();
    }

    /**
     * Skips to next track in the user’s queue. This API only works for users who have Spotify
     * Premium. The order of execution is not guaranteed when you use this API with other Player API
     * endpoints.
     * @param  deviceId  Optional parameter: Example:
     * @return    Returns the Void wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<Void>> skipUsersPlaybackToNextTrackAsync(
            final String deviceId) {
        try { 
            return prepareSkipUsersPlaybackToNextTrackRequest(deviceId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for skipUsersPlaybackToNextTrack.
     */
    private ApiCall<ApiResponse<Void>, ApiException> prepareSkipUsersPlaybackToNextTrackRequest(
            final String deviceId) throws IOException {
        return new ApiCall.Builder<ApiResponse<Void>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/me/player/next")
                        .queryParam(param -> param.key("device_id")
                                .value(deviceId).isRequired(false))
                        .withAuth(auth -> auth
                                .add("oauth_2_0"))
                        .arraySerializationFormat(ArraySerializationFormat.CSV)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n",
                                (reason, context) -> new UnauthorizedException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n",
                                (reason, context) -> new ForbiddenException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("The app has exceeded its rate limits.\n",
                                (reason, context) -> new TooManyRequestsException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Skips to previous track in the user’s queue. This API only works for users who have Spotify
     * Premium. The order of execution is not guaranteed when you use this API with other Player API
     * endpoints.
     * @param  deviceId  Optional parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<Void> skipUsersPlaybackToPreviousTrack(
            final String deviceId) throws ApiException, IOException {
        return prepareSkipUsersPlaybackToPreviousTrackRequest(deviceId).execute();
    }

    /**
     * Skips to previous track in the user’s queue. This API only works for users who have Spotify
     * Premium. The order of execution is not guaranteed when you use this API with other Player API
     * endpoints.
     * @param  deviceId  Optional parameter: Example:
     * @return    Returns the Void wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<Void>> skipUsersPlaybackToPreviousTrackAsync(
            final String deviceId) {
        try { 
            return prepareSkipUsersPlaybackToPreviousTrackRequest(deviceId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for skipUsersPlaybackToPreviousTrack.
     */
    private ApiCall<ApiResponse<Void>, ApiException> prepareSkipUsersPlaybackToPreviousTrackRequest(
            final String deviceId) throws IOException {
        return new ApiCall.Builder<ApiResponse<Void>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/me/player/previous")
                        .queryParam(param -> param.key("device_id")
                                .value(deviceId).isRequired(false))
                        .withAuth(auth -> auth
                                .add("oauth_2_0"))
                        .arraySerializationFormat(ArraySerializationFormat.CSV)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n",
                                (reason, context) -> new UnauthorizedException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n",
                                (reason, context) -> new ForbiddenException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("The app has exceeded its rate limits.\n",
                                (reason, context) -> new TooManyRequestsException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Seeks to the given position in the user’s currently playing track. This API only works for
     * users who have Spotify Premium. The order of execution is not guaranteed when you use this
     * API with other Player API endpoints.
     * @param  positionMs  Required parameter: Example:
     * @param  deviceId  Optional parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<Void> seekToPositionInCurrentlyPlayingTrack(
            final int positionMs,
            final String deviceId) throws ApiException, IOException {
        return prepareSeekToPositionInCurrentlyPlayingTrackRequest(positionMs, deviceId).execute();
    }

    /**
     * Seeks to the given position in the user’s currently playing track. This API only works for
     * users who have Spotify Premium. The order of execution is not guaranteed when you use this
     * API with other Player API endpoints.
     * @param  positionMs  Required parameter: Example:
     * @param  deviceId  Optional parameter: Example:
     * @return    Returns the Void wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<Void>> seekToPositionInCurrentlyPlayingTrackAsync(
            final int positionMs,
            final String deviceId) {
        try { 
            return prepareSeekToPositionInCurrentlyPlayingTrackRequest(positionMs, deviceId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for seekToPositionInCurrentlyPlayingTrack.
     */
    private ApiCall<ApiResponse<Void>, ApiException> prepareSeekToPositionInCurrentlyPlayingTrackRequest(
            final int positionMs,
            final String deviceId) throws IOException {
        return new ApiCall.Builder<ApiResponse<Void>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/me/player/seek")
                        .queryParam(param -> param.key("position_ms")
                                .value(positionMs).isRequired(false))
                        .queryParam(param -> param.key("device_id")
                                .value(deviceId).isRequired(false))
                        .withAuth(auth -> auth
                                .add("oauth_2_0"))
                        .arraySerializationFormat(ArraySerializationFormat.CSV)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n",
                                (reason, context) -> new UnauthorizedException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n",
                                (reason, context) -> new ForbiddenException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("The app has exceeded its rate limits.\n",
                                (reason, context) -> new TooManyRequestsException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Set the repeat mode for the user's playback. This API only works for users who have Spotify
     * Premium. The order of execution is not guaranteed when you use this API with other Player API
     * endpoints.
     * @param  state  Required parameter: Example:
     * @param  deviceId  Optional parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<Void> setRepeatModeOnUsersPlayback(
            final String state,
            final String deviceId) throws ApiException, IOException {
        return prepareSetRepeatModeOnUsersPlaybackRequest(state, deviceId).execute();
    }

    /**
     * Set the repeat mode for the user's playback. This API only works for users who have Spotify
     * Premium. The order of execution is not guaranteed when you use this API with other Player API
     * endpoints.
     * @param  state  Required parameter: Example:
     * @param  deviceId  Optional parameter: Example:
     * @return    Returns the Void wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<Void>> setRepeatModeOnUsersPlaybackAsync(
            final String state,
            final String deviceId) {
        try { 
            return prepareSetRepeatModeOnUsersPlaybackRequest(state, deviceId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for setRepeatModeOnUsersPlayback.
     */
    private ApiCall<ApiResponse<Void>, ApiException> prepareSetRepeatModeOnUsersPlaybackRequest(
            final String state,
            final String deviceId) throws IOException {
        return new ApiCall.Builder<ApiResponse<Void>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/me/player/repeat")
                        .queryParam(param -> param.key("state")
                                .value(state))
                        .queryParam(param -> param.key("device_id")
                                .value(deviceId).isRequired(false))
                        .withAuth(auth -> auth
                                .add("oauth_2_0"))
                        .arraySerializationFormat(ArraySerializationFormat.CSV)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n",
                                (reason, context) -> new UnauthorizedException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n",
                                (reason, context) -> new ForbiddenException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("The app has exceeded its rate limits.\n",
                                (reason, context) -> new TooManyRequestsException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Set the volume for the user’s current playback device. This API only works for users who have
     * Spotify Premium. The order of execution is not guaranteed when you use this API with other
     * Player API endpoints.
     * @param  volumePercent  Required parameter: Example:
     * @param  deviceId  Optional parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<Void> setVolumeForUsersPlayback(
            final int volumePercent,
            final String deviceId) throws ApiException, IOException {
        return prepareSetVolumeForUsersPlaybackRequest(volumePercent, deviceId).execute();
    }

    /**
     * Set the volume for the user’s current playback device. This API only works for users who have
     * Spotify Premium. The order of execution is not guaranteed when you use this API with other
     * Player API endpoints.
     * @param  volumePercent  Required parameter: Example:
     * @param  deviceId  Optional parameter: Example:
     * @return    Returns the Void wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<Void>> setVolumeForUsersPlaybackAsync(
            final int volumePercent,
            final String deviceId) {
        try { 
            return prepareSetVolumeForUsersPlaybackRequest(volumePercent, deviceId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for setVolumeForUsersPlayback.
     */
    private ApiCall<ApiResponse<Void>, ApiException> prepareSetVolumeForUsersPlaybackRequest(
            final int volumePercent,
            final String deviceId) throws IOException {
        return new ApiCall.Builder<ApiResponse<Void>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/me/player/volume")
                        .queryParam(param -> param.key("volume_percent")
                                .value(volumePercent).isRequired(false))
                        .queryParam(param -> param.key("device_id")
                                .value(deviceId).isRequired(false))
                        .withAuth(auth -> auth
                                .add("oauth_2_0"))
                        .arraySerializationFormat(ArraySerializationFormat.CSV)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n",
                                (reason, context) -> new UnauthorizedException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n",
                                (reason, context) -> new ForbiddenException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("The app has exceeded its rate limits.\n",
                                (reason, context) -> new TooManyRequestsException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Toggle shuffle on or off for user’s playback. This API only works for users who have Spotify
     * Premium. The order of execution is not guaranteed when you use this API with other Player API
     * endpoints.
     * @param  state  Required parameter: Example:
     * @param  deviceId  Optional parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<Void> toggleShuffleForUsersPlayback(
            final boolean state,
            final String deviceId) throws ApiException, IOException {
        return prepareToggleShuffleForUsersPlaybackRequest(state, deviceId).execute();
    }

    /**
     * Toggle shuffle on or off for user’s playback. This API only works for users who have Spotify
     * Premium. The order of execution is not guaranteed when you use this API with other Player API
     * endpoints.
     * @param  state  Required parameter: Example:
     * @param  deviceId  Optional parameter: Example:
     * @return    Returns the Void wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<Void>> toggleShuffleForUsersPlaybackAsync(
            final boolean state,
            final String deviceId) {
        try { 
            return prepareToggleShuffleForUsersPlaybackRequest(state, deviceId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for toggleShuffleForUsersPlayback.
     */
    private ApiCall<ApiResponse<Void>, ApiException> prepareToggleShuffleForUsersPlaybackRequest(
            final boolean state,
            final String deviceId) throws IOException {
        return new ApiCall.Builder<ApiResponse<Void>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/me/player/shuffle")
                        .queryParam(param -> param.key("state")
                                .value(state).isRequired(false))
                        .queryParam(param -> param.key("device_id")
                                .value(deviceId).isRequired(false))
                        .withAuth(auth -> auth
                                .add("oauth_2_0"))
                        .arraySerializationFormat(ArraySerializationFormat.CSV)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n",
                                (reason, context) -> new UnauthorizedException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n",
                                (reason, context) -> new ForbiddenException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("The app has exceeded its rate limits.\n",
                                (reason, context) -> new TooManyRequestsException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get tracks from the current user's recently played tracks. _**Note**: Currently doesn't
     * support podcast episodes._.
     * @param  limit  Optional parameter: Example: 20
     * @param  after  Optional parameter: Example:
     * @param  before  Optional parameter: Example:
     * @return    Returns the CursorPagingPlayHistoryObject wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<CursorPagingPlayHistoryObject> getRecentlyPlayed(
            final Integer limit,
            final Long after,
            final Integer before) throws ApiException, IOException {
        return prepareGetRecentlyPlayedRequest(limit, after, before).execute();
    }

    /**
     * Get tracks from the current user's recently played tracks. _**Note**: Currently doesn't
     * support podcast episodes._.
     * @param  limit  Optional parameter: Example: 20
     * @param  after  Optional parameter: Example:
     * @param  before  Optional parameter: Example:
     * @return    Returns the CursorPagingPlayHistoryObject wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<CursorPagingPlayHistoryObject>> getRecentlyPlayedAsync(
            final Integer limit,
            final Long after,
            final Integer before) {
        try { 
            return prepareGetRecentlyPlayedRequest(limit, after, before).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getRecentlyPlayed.
     */
    private ApiCall<ApiResponse<CursorPagingPlayHistoryObject>, ApiException> prepareGetRecentlyPlayedRequest(
            final Integer limit,
            final Long after,
            final Integer before) throws IOException {
        return new ApiCall.Builder<ApiResponse<CursorPagingPlayHistoryObject>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/me/player/recently-played")
                        .queryParam(param -> param.key("limit")
                                .value((limit != null) ? limit : 20).isRequired(false))
                        .queryParam(param -> param.key("after")
                                .value(after).isRequired(false))
                        .queryParam(param -> param.key("before")
                                .value(before).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oauth_2_0"))
                        .arraySerializationFormat(ArraySerializationFormat.CSV)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, CursorPagingPlayHistoryObject.class))
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n",
                                (reason, context) -> new UnauthorizedException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n",
                                (reason, context) -> new ForbiddenException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("The app has exceeded its rate limits.\n",
                                (reason, context) -> new TooManyRequestsException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get the list of objects that make up the user's queue.
     * @return    Returns the QueueObject wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<QueueObject> getQueue() throws ApiException, IOException {
        return prepareGetQueueRequest().execute();
    }

    /**
     * Get the list of objects that make up the user's queue.
     * @return    Returns the QueueObject wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<QueueObject>> getQueueAsync() {
        try { 
            return prepareGetQueueRequest().executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getQueue.
     */
    private ApiCall<ApiResponse<QueueObject>, ApiException> prepareGetQueueRequest() throws IOException {
        return new ApiCall.Builder<ApiResponse<QueueObject>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/me/player/queue")
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oauth_2_0"))
                        .arraySerializationFormat(ArraySerializationFormat.CSV)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, QueueObject.class))
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n",
                                (reason, context) -> new UnauthorizedException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n",
                                (reason, context) -> new ForbiddenException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("The app has exceeded its rate limits.\n",
                                (reason, context) -> new TooManyRequestsException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Add an item to the end of the user's current playback queue. This API only works for users
     * who have Spotify Premium. The order of execution is not guaranteed when you use this API with
     * other Player API endpoints.
     * @param  uri  Required parameter: Example:
     * @param  deviceId  Optional parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<Void> addToQueue(
            final String uri,
            final String deviceId) throws ApiException, IOException {
        return prepareAddToQueueRequest(uri, deviceId).execute();
    }

    /**
     * Add an item to the end of the user's current playback queue. This API only works for users
     * who have Spotify Premium. The order of execution is not guaranteed when you use this API with
     * other Player API endpoints.
     * @param  uri  Required parameter: Example:
     * @param  deviceId  Optional parameter: Example:
     * @return    Returns the Void wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<Void>> addToQueueAsync(
            final String uri,
            final String deviceId) {
        try { 
            return prepareAddToQueueRequest(uri, deviceId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for addToQueue.
     */
    private ApiCall<ApiResponse<Void>, ApiException> prepareAddToQueueRequest(
            final String uri,
            final String deviceId) throws IOException {
        return new ApiCall.Builder<ApiResponse<Void>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/me/player/queue")
                        .queryParam(param -> param.key("uri")
                                .value(uri))
                        .queryParam(param -> param.key("device_id")
                                .value(deviceId).isRequired(false))
                        .withAuth(auth -> auth
                                .add("oauth_2_0"))
                        .arraySerializationFormat(ArraySerializationFormat.CSV)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Bad or expired token. This can happen if the user revoked a token or\nthe access token has expired. You should re-authenticate the user.\n",
                                (reason, context) -> new UnauthorizedException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Bad OAuth request (wrong consumer key, bad nonce, expired\ntimestamp...). Unfortunately, re-authenticating the user won't help here.\n",
                                (reason, context) -> new ForbiddenException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("The app has exceeded its rate limits.\n",
                                (reason, context) -> new TooManyRequestsException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}