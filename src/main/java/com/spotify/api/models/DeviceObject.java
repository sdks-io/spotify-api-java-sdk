/*
 * SpotifyWebAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.spotify.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;

/**
 * This is a model class for DeviceObject type.
 */
public class DeviceObject {
    private OptionalNullable<String> id;
    private Boolean isActive;
    private Boolean isPrivateSession;
    private Boolean isRestricted;
    private String name;
    private String type;
    private OptionalNullable<Integer> volumePercent;
    private Boolean supportsVolume;

    /**
     * Default constructor.
     */
    public DeviceObject() {
    }

    /**
     * Initialization constructor.
     * @param  id  String value for id.
     * @param  isActive  Boolean value for isActive.
     * @param  isPrivateSession  Boolean value for isPrivateSession.
     * @param  isRestricted  Boolean value for isRestricted.
     * @param  name  String value for name.
     * @param  type  String value for type.
     * @param  volumePercent  Integer value for volumePercent.
     * @param  supportsVolume  Boolean value for supportsVolume.
     */
    public DeviceObject(
            String id,
            Boolean isActive,
            Boolean isPrivateSession,
            Boolean isRestricted,
            String name,
            String type,
            Integer volumePercent,
            Boolean supportsVolume) {
        this.id = OptionalNullable.of(id);
        this.isActive = isActive;
        this.isPrivateSession = isPrivateSession;
        this.isRestricted = isRestricted;
        this.name = name;
        this.type = type;
        this.volumePercent = OptionalNullable.of(volumePercent);
        this.supportsVolume = supportsVolume;
    }

    /**
     * Initialization constructor.
     * @param  id  String value for id.
     * @param  isActive  Boolean value for isActive.
     * @param  isPrivateSession  Boolean value for isPrivateSession.
     * @param  isRestricted  Boolean value for isRestricted.
     * @param  name  String value for name.
     * @param  type  String value for type.
     * @param  volumePercent  Integer value for volumePercent.
     * @param  supportsVolume  Boolean value for supportsVolume.
     */

    protected DeviceObject(OptionalNullable<String> id, Boolean isActive, Boolean isPrivateSession,
            Boolean isRestricted, String name, String type, OptionalNullable<Integer> volumePercent,
            Boolean supportsVolume) {
        this.id = id;
        this.isActive = isActive;
        this.isPrivateSession = isPrivateSession;
        this.isRestricted = isRestricted;
        this.name = name;
        this.type = type;
        this.volumePercent = volumePercent;
        this.supportsVolume = supportsVolume;
    }

    /**
     * Internal Getter for Id.
     * The device ID. This ID is unique and persistent to some extent. However, this is not
     * guaranteed and any cached `device_id` should periodically be cleared out and refetched as
     * necessary.
     * @return Returns the Internal String
     */
    @JsonGetter("id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetId() {
        return this.id;
    }

    /**
     * Getter for Id.
     * The device ID. This ID is unique and persistent to some extent. However, this is not
     * guaranteed and any cached `device_id` should periodically be cleared out and refetched as
     * necessary.
     * @return Returns the String
     */
    public String getId() {
        return OptionalNullable.getFrom(id);
    }

    /**
     * Setter for Id.
     * The device ID. This ID is unique and persistent to some extent. However, this is not
     * guaranteed and any cached `device_id` should periodically be cleared out and refetched as
     * necessary.
     * @param id Value for String
     */
    @JsonSetter("id")
    public void setId(String id) {
        this.id = OptionalNullable.of(id);
    }

    /**
     * UnSetter for Id.
     * The device ID. This ID is unique and persistent to some extent. However, this is not
     * guaranteed and any cached `device_id` should periodically be cleared out and refetched as
     * necessary.
     */
    public void unsetId() {
        id = null;
    }

    /**
     * Getter for IsActive.
     * If this device is the currently active device.
     * @return Returns the Boolean
     */
    @JsonGetter("is_active")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getIsActive() {
        return isActive;
    }

    /**
     * Setter for IsActive.
     * If this device is the currently active device.
     * @param isActive Value for Boolean
     */
    @JsonSetter("is_active")
    public void setIsActive(Boolean isActive) {
        this.isActive = isActive;
    }

    /**
     * Getter for IsPrivateSession.
     * If this device is currently in a private session.
     * @return Returns the Boolean
     */
    @JsonGetter("is_private_session")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getIsPrivateSession() {
        return isPrivateSession;
    }

    /**
     * Setter for IsPrivateSession.
     * If this device is currently in a private session.
     * @param isPrivateSession Value for Boolean
     */
    @JsonSetter("is_private_session")
    public void setIsPrivateSession(Boolean isPrivateSession) {
        this.isPrivateSession = isPrivateSession;
    }

    /**
     * Getter for IsRestricted.
     * Whether controlling this device is restricted. At present if this is "true" then no Web API
     * commands will be accepted by this device.
     * @return Returns the Boolean
     */
    @JsonGetter("is_restricted")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getIsRestricted() {
        return isRestricted;
    }

    /**
     * Setter for IsRestricted.
     * Whether controlling this device is restricted. At present if this is "true" then no Web API
     * commands will be accepted by this device.
     * @param isRestricted Value for Boolean
     */
    @JsonSetter("is_restricted")
    public void setIsRestricted(Boolean isRestricted) {
        this.isRestricted = isRestricted;
    }

    /**
     * Getter for Name.
     * A human-readable name for the device. Some devices have a name that the user can configure
     * (e.g. \"Loudest speaker\") and some devices have a generic name associated with the
     * manufacturer or device model.
     * @return Returns the String
     */
    @JsonGetter("name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * A human-readable name for the device. Some devices have a name that the user can configure
     * (e.g. \"Loudest speaker\") and some devices have a generic name associated with the
     * manufacturer or device model.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for Type.
     * Device type, such as "computer", "smartphone" or "speaker".
     * @return Returns the String
     */
    @JsonGetter("type")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getType() {
        return type;
    }

    /**
     * Setter for Type.
     * Device type, such as "computer", "smartphone" or "speaker".
     * @param type Value for String
     */
    @JsonSetter("type")
    public void setType(String type) {
        this.type = type;
    }

    /**
     * Internal Getter for VolumePercent.
     * The current volume in percent.
     * @return Returns the Internal Integer
     */
    @JsonGetter("volume_percent")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetVolumePercent() {
        return this.volumePercent;
    }

    /**
     * Getter for VolumePercent.
     * The current volume in percent.
     * @return Returns the Integer
     */
    public Integer getVolumePercent() {
        return OptionalNullable.getFrom(volumePercent);
    }

    /**
     * Setter for VolumePercent.
     * The current volume in percent.
     * @param volumePercent Value for Integer
     */
    @JsonSetter("volume_percent")
    public void setVolumePercent(Integer volumePercent) {
        this.volumePercent = OptionalNullable.of(volumePercent);
    }

    /**
     * UnSetter for VolumePercent.
     * The current volume in percent.
     */
    public void unsetVolumePercent() {
        volumePercent = null;
    }

    /**
     * Getter for SupportsVolume.
     * If this device can be used to set the volume.
     * @return Returns the Boolean
     */
    @JsonGetter("supports_volume")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getSupportsVolume() {
        return supportsVolume;
    }

    /**
     * Setter for SupportsVolume.
     * If this device can be used to set the volume.
     * @param supportsVolume Value for Boolean
     */
    @JsonSetter("supports_volume")
    public void setSupportsVolume(Boolean supportsVolume) {
        this.supportsVolume = supportsVolume;
    }

    /**
     * Converts this DeviceObject into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "DeviceObject [" + "id=" + id + ", isActive=" + isActive + ", isPrivateSession="
                + isPrivateSession + ", isRestricted=" + isRestricted + ", name=" + name + ", type="
                + type + ", volumePercent=" + volumePercent + ", supportsVolume=" + supportsVolume
                + "]";
    }

    /**
     * Builds a new {@link DeviceObject.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link DeviceObject.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .isActive(getIsActive())
                .isPrivateSession(getIsPrivateSession())
                .isRestricted(getIsRestricted())
                .name(getName())
                .type(getType())
                .supportsVolume(getSupportsVolume());
        builder.id = internalGetId();
        builder.volumePercent = internalGetVolumePercent();
        return builder;
    }

    /**
     * Class to build instances of {@link DeviceObject}.
     */
    public static class Builder {
        private OptionalNullable<String> id;
        private Boolean isActive;
        private Boolean isPrivateSession;
        private Boolean isRestricted;
        private String name;
        private String type;
        private OptionalNullable<Integer> volumePercent;
        private Boolean supportsVolume;



        /**
         * Setter for id.
         * @param  id  String value for id.
         * @return Builder
         */
        public Builder id(String id) {
            this.id = OptionalNullable.of(id);
            return this;
        }

        /**
         * UnSetter for id.
         * @return Builder
         */
        public Builder unsetId() {
            id = null;
            return this;
        }

        /**
         * Setter for isActive.
         * @param  isActive  Boolean value for isActive.
         * @return Builder
         */
        public Builder isActive(Boolean isActive) {
            this.isActive = isActive;
            return this;
        }

        /**
         * Setter for isPrivateSession.
         * @param  isPrivateSession  Boolean value for isPrivateSession.
         * @return Builder
         */
        public Builder isPrivateSession(Boolean isPrivateSession) {
            this.isPrivateSession = isPrivateSession;
            return this;
        }

        /**
         * Setter for isRestricted.
         * @param  isRestricted  Boolean value for isRestricted.
         * @return Builder
         */
        public Builder isRestricted(Boolean isRestricted) {
            this.isRestricted = isRestricted;
            return this;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for type.
         * @param  type  String value for type.
         * @return Builder
         */
        public Builder type(String type) {
            this.type = type;
            return this;
        }

        /**
         * Setter for volumePercent.
         * @param  volumePercent  Integer value for volumePercent.
         * @return Builder
         */
        public Builder volumePercent(Integer volumePercent) {
            this.volumePercent = OptionalNullable.of(volumePercent);
            return this;
        }

        /**
         * UnSetter for volumePercent.
         * @return Builder
         */
        public Builder unsetVolumePercent() {
            volumePercent = null;
            return this;
        }

        /**
         * Setter for supportsVolume.
         * @param  supportsVolume  Boolean value for supportsVolume.
         * @return Builder
         */
        public Builder supportsVolume(Boolean supportsVolume) {
            this.supportsVolume = supportsVolume;
            return this;
        }

        /**
         * Builds a new {@link DeviceObject} object using the set fields.
         * @return {@link DeviceObject}
         */
        public DeviceObject build() {
            return new DeviceObject(id, isActive, isPrivateSession, isRestricted, name, type,
                    volumePercent, supportsVolume);
        }
    }
}
