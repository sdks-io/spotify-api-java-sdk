/*
 * SpotifyWebAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.spotify.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;

/**
 * This is a model class for AudioFeaturesObject type.
 */
public class AudioFeaturesObject {
    private Double acousticness;
    private String analysisUrl;
    private Double danceability;
    private Integer durationMs;
    private Double energy;
    private String id;
    private Double instrumentalness;
    private Integer key;
    private Double liveness;
    private Double loudness;
    private Integer mode;
    private Double speechiness;
    private Double tempo;
    private Integer timeSignature;
    private String trackHref;
    private Type6Enum type;
    private String uri;
    private Double valence;

    /**
     * Default constructor.
     */
    public AudioFeaturesObject() {
    }

    /**
     * Initialization constructor.
     * @param  acousticness  Double value for acousticness.
     * @param  analysisUrl  String value for analysisUrl.
     * @param  danceability  Double value for danceability.
     * @param  durationMs  Integer value for durationMs.
     * @param  energy  Double value for energy.
     * @param  id  String value for id.
     * @param  instrumentalness  Double value for instrumentalness.
     * @param  key  Integer value for key.
     * @param  liveness  Double value for liveness.
     * @param  loudness  Double value for loudness.
     * @param  mode  Integer value for mode.
     * @param  speechiness  Double value for speechiness.
     * @param  tempo  Double value for tempo.
     * @param  timeSignature  Integer value for timeSignature.
     * @param  trackHref  String value for trackHref.
     * @param  type  Type6Enum value for type.
     * @param  uri  String value for uri.
     * @param  valence  Double value for valence.
     */
    public AudioFeaturesObject(
            Double acousticness,
            String analysisUrl,
            Double danceability,
            Integer durationMs,
            Double energy,
            String id,
            Double instrumentalness,
            Integer key,
            Double liveness,
            Double loudness,
            Integer mode,
            Double speechiness,
            Double tempo,
            Integer timeSignature,
            String trackHref,
            Type6Enum type,
            String uri,
            Double valence) {
        this.acousticness = acousticness;
        this.analysisUrl = analysisUrl;
        this.danceability = danceability;
        this.durationMs = durationMs;
        this.energy = energy;
        this.id = id;
        this.instrumentalness = instrumentalness;
        this.key = key;
        this.liveness = liveness;
        this.loudness = loudness;
        this.mode = mode;
        this.speechiness = speechiness;
        this.tempo = tempo;
        this.timeSignature = timeSignature;
        this.trackHref = trackHref;
        this.type = type;
        this.uri = uri;
        this.valence = valence;
    }

    /**
     * Getter for Acousticness.
     * A confidence measure from 0.0 to 1.0 of whether the track is acoustic. 1.0 represents high
     * confidence the track is acoustic.
     * @return Returns the Double
     */
    @JsonGetter("acousticness")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getAcousticness() {
        return acousticness;
    }

    /**
     * Setter for Acousticness.
     * A confidence measure from 0.0 to 1.0 of whether the track is acoustic. 1.0 represents high
     * confidence the track is acoustic.
     * @param acousticness Value for Double
     */
    @JsonSetter("acousticness")
    public void setAcousticness(Double acousticness) {
        this.acousticness = acousticness;
    }

    /**
     * Getter for AnalysisUrl.
     * A URL to access the full audio analysis of this track. An access token is required to access
     * this data.
     * @return Returns the String
     */
    @JsonGetter("analysis_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getAnalysisUrl() {
        return analysisUrl;
    }

    /**
     * Setter for AnalysisUrl.
     * A URL to access the full audio analysis of this track. An access token is required to access
     * this data.
     * @param analysisUrl Value for String
     */
    @JsonSetter("analysis_url")
    public void setAnalysisUrl(String analysisUrl) {
        this.analysisUrl = analysisUrl;
    }

    /**
     * Getter for Danceability.
     * Danceability describes how suitable a track is for dancing based on a combination of musical
     * elements including tempo, rhythm stability, beat strength, and overall regularity. A value of
     * 0.0 is least danceable and 1.0 is most danceable.
     * @return Returns the Double
     */
    @JsonGetter("danceability")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getDanceability() {
        return danceability;
    }

    /**
     * Setter for Danceability.
     * Danceability describes how suitable a track is for dancing based on a combination of musical
     * elements including tempo, rhythm stability, beat strength, and overall regularity. A value of
     * 0.0 is least danceable and 1.0 is most danceable.
     * @param danceability Value for Double
     */
    @JsonSetter("danceability")
    public void setDanceability(Double danceability) {
        this.danceability = danceability;
    }

    /**
     * Getter for DurationMs.
     * The duration of the track in milliseconds.
     * @return Returns the Integer
     */
    @JsonGetter("duration_ms")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getDurationMs() {
        return durationMs;
    }

    /**
     * Setter for DurationMs.
     * The duration of the track in milliseconds.
     * @param durationMs Value for Integer
     */
    @JsonSetter("duration_ms")
    public void setDurationMs(Integer durationMs) {
        this.durationMs = durationMs;
    }

    /**
     * Getter for Energy.
     * Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and
     * activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal
     * has high energy, while a Bach prelude scores low on the scale. Perceptual features
     * contributing to this attribute include dynamic range, perceived loudness, timbre, onset rate,
     * and general entropy.
     * @return Returns the Double
     */
    @JsonGetter("energy")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getEnergy() {
        return energy;
    }

    /**
     * Setter for Energy.
     * Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and
     * activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal
     * has high energy, while a Bach prelude scores low on the scale. Perceptual features
     * contributing to this attribute include dynamic range, perceived loudness, timbre, onset rate,
     * and general entropy.
     * @param energy Value for Double
     */
    @JsonSetter("energy")
    public void setEnergy(Double energy) {
        this.energy = energy;
    }

    /**
     * Getter for Id.
     * The Spotify ID for the track.
     * @return Returns the String
     */
    @JsonGetter("id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getId() {
        return id;
    }

    /**
     * Setter for Id.
     * The Spotify ID for the track.
     * @param id Value for String
     */
    @JsonSetter("id")
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Getter for Instrumentalness.
     * Predicts whether a track contains no vocals. "Ooh" and "aah" sounds are treated as
     * instrumental in this context. Rap or spoken word tracks are clearly "vocal". The closer the
     * instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content.
     * Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as
     * the value approaches 1.0.
     * @return Returns the Double
     */
    @JsonGetter("instrumentalness")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getInstrumentalness() {
        return instrumentalness;
    }

    /**
     * Setter for Instrumentalness.
     * Predicts whether a track contains no vocals. "Ooh" and "aah" sounds are treated as
     * instrumental in this context. Rap or spoken word tracks are clearly "vocal". The closer the
     * instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content.
     * Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as
     * the value approaches 1.0.
     * @param instrumentalness Value for Double
     */
    @JsonSetter("instrumentalness")
    public void setInstrumentalness(Double instrumentalness) {
        this.instrumentalness = instrumentalness;
    }

    /**
     * Getter for Key.
     * The key the track is in. Integers map to pitches using standard [Pitch Class
     * notation](https://en.wikipedia.org/wiki/Pitch_class). E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so
     * on. If no key was detected, the value is -1.
     * @return Returns the Integer
     */
    @JsonGetter("key")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getKey() {
        return key;
    }

    /**
     * Setter for Key.
     * The key the track is in. Integers map to pitches using standard [Pitch Class
     * notation](https://en.wikipedia.org/wiki/Pitch_class). E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so
     * on. If no key was detected, the value is -1.
     * @param key Value for Integer
     */
    @JsonSetter("key")
    public void setKey(Integer key) {
        this.key = key;
    }

    /**
     * Getter for Liveness.
     * Detects the presence of an audience in the recording. Higher liveness values represent an
     * increased probability that the track was performed live. A value above 0.8 provides strong
     * likelihood that the track is live.
     * @return Returns the Double
     */
    @JsonGetter("liveness")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getLiveness() {
        return liveness;
    }

    /**
     * Setter for Liveness.
     * Detects the presence of an audience in the recording. Higher liveness values represent an
     * increased probability that the track was performed live. A value above 0.8 provides strong
     * likelihood that the track is live.
     * @param liveness Value for Double
     */
    @JsonSetter("liveness")
    public void setLiveness(Double liveness) {
        this.liveness = liveness;
    }

    /**
     * Getter for Loudness.
     * The overall loudness of a track in decibels (dB). Loudness values are averaged across the
     * entire track and are useful for comparing relative loudness of tracks. Loudness is the
     * quality of a sound that is the primary psychological correlate of physical strength
     * (amplitude). Values typically range between -60 and 0 db.
     * @return Returns the Double
     */
    @JsonGetter("loudness")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getLoudness() {
        return loudness;
    }

    /**
     * Setter for Loudness.
     * The overall loudness of a track in decibels (dB). Loudness values are averaged across the
     * entire track and are useful for comparing relative loudness of tracks. Loudness is the
     * quality of a sound that is the primary psychological correlate of physical strength
     * (amplitude). Values typically range between -60 and 0 db.
     * @param loudness Value for Double
     */
    @JsonSetter("loudness")
    public void setLoudness(Double loudness) {
        this.loudness = loudness;
    }

    /**
     * Getter for Mode.
     * Mode indicates the modality (major or minor) of a track, the type of scale from which its
     * melodic content is derived. Major is represented by 1 and minor is 0.
     * @return Returns the Integer
     */
    @JsonGetter("mode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getMode() {
        return mode;
    }

    /**
     * Setter for Mode.
     * Mode indicates the modality (major or minor) of a track, the type of scale from which its
     * melodic content is derived. Major is represented by 1 and minor is 0.
     * @param mode Value for Integer
     */
    @JsonSetter("mode")
    public void setMode(Integer mode) {
        this.mode = mode;
    }

    /**
     * Getter for Speechiness.
     * Speechiness detects the presence of spoken words in a track. The more exclusively speech-like
     * the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value.
     * Values above 0.66 describe tracks that are probably made entirely of spoken words. Values
     * between 0.33 and 0.66 describe tracks that may contain both music and speech, either in
     * sections or layered, including such cases as rap music. Values below 0.33 most likely
     * represent music and other non-speech-like tracks.
     * @return Returns the Double
     */
    @JsonGetter("speechiness")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getSpeechiness() {
        return speechiness;
    }

    /**
     * Setter for Speechiness.
     * Speechiness detects the presence of spoken words in a track. The more exclusively speech-like
     * the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value.
     * Values above 0.66 describe tracks that are probably made entirely of spoken words. Values
     * between 0.33 and 0.66 describe tracks that may contain both music and speech, either in
     * sections or layered, including such cases as rap music. Values below 0.33 most likely
     * represent music and other non-speech-like tracks.
     * @param speechiness Value for Double
     */
    @JsonSetter("speechiness")
    public void setSpeechiness(Double speechiness) {
        this.speechiness = speechiness;
    }

    /**
     * Getter for Tempo.
     * The overall estimated tempo of a track in beats per minute (BPM). In musical terminology,
     * tempo is the speed or pace of a given piece and derives directly from the average beat
     * duration.
     * @return Returns the Double
     */
    @JsonGetter("tempo")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getTempo() {
        return tempo;
    }

    /**
     * Setter for Tempo.
     * The overall estimated tempo of a track in beats per minute (BPM). In musical terminology,
     * tempo is the speed or pace of a given piece and derives directly from the average beat
     * duration.
     * @param tempo Value for Double
     */
    @JsonSetter("tempo")
    public void setTempo(Double tempo) {
        this.tempo = tempo;
    }

    /**
     * Getter for TimeSignature.
     * An estimated time signature. The time signature (meter) is a notational convention to specify
     * how many beats are in each bar (or measure). The time signature ranges from 3 to 7 indicating
     * time signatures of "3/4", to "7/4".
     * @return Returns the Integer
     */
    @JsonGetter("time_signature")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getTimeSignature() {
        return timeSignature;
    }

    /**
     * Setter for TimeSignature.
     * An estimated time signature. The time signature (meter) is a notational convention to specify
     * how many beats are in each bar (or measure). The time signature ranges from 3 to 7 indicating
     * time signatures of "3/4", to "7/4".
     * @param timeSignature Value for Integer
     */
    @JsonSetter("time_signature")
    public void setTimeSignature(Integer timeSignature) {
        this.timeSignature = timeSignature;
    }

    /**
     * Getter for TrackHref.
     * A link to the Web API endpoint providing full details of the track.
     * @return Returns the String
     */
    @JsonGetter("track_href")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getTrackHref() {
        return trackHref;
    }

    /**
     * Setter for TrackHref.
     * A link to the Web API endpoint providing full details of the track.
     * @param trackHref Value for String
     */
    @JsonSetter("track_href")
    public void setTrackHref(String trackHref) {
        this.trackHref = trackHref;
    }

    /**
     * Getter for Type.
     * The object type.
     * @return Returns the Type6Enum
     */
    @JsonGetter("type")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Type6Enum getType() {
        return type;
    }

    /**
     * Setter for Type.
     * The object type.
     * @param type Value for Type6Enum
     */
    @JsonSetter("type")
    public void setType(Type6Enum type) {
        this.type = type;
    }

    /**
     * Getter for Uri.
     * The Spotify URI for the track.
     * @return Returns the String
     */
    @JsonGetter("uri")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getUri() {
        return uri;
    }

    /**
     * Setter for Uri.
     * The Spotify URI for the track.
     * @param uri Value for String
     */
    @JsonSetter("uri")
    public void setUri(String uri) {
        this.uri = uri;
    }

    /**
     * Getter for Valence.
     * A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks
     * with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low
     * valence sound more negative (e.g. sad, depressed, angry).
     * @return Returns the Double
     */
    @JsonGetter("valence")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getValence() {
        return valence;
    }

    /**
     * Setter for Valence.
     * A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks
     * with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low
     * valence sound more negative (e.g. sad, depressed, angry).
     * @param valence Value for Double
     */
    @JsonSetter("valence")
    public void setValence(Double valence) {
        this.valence = valence;
    }

    /**
     * Converts this AudioFeaturesObject into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "AudioFeaturesObject [" + "acousticness=" + acousticness + ", analysisUrl="
                + analysisUrl + ", danceability=" + danceability + ", durationMs=" + durationMs
                + ", energy=" + energy + ", id=" + id + ", instrumentalness=" + instrumentalness
                + ", key=" + key + ", liveness=" + liveness + ", loudness=" + loudness + ", mode="
                + mode + ", speechiness=" + speechiness + ", tempo=" + tempo + ", timeSignature="
                + timeSignature + ", trackHref=" + trackHref + ", type=" + type + ", uri=" + uri
                + ", valence=" + valence + "]";
    }

    /**
     * Builds a new {@link AudioFeaturesObject.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link AudioFeaturesObject.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .acousticness(getAcousticness())
                .analysisUrl(getAnalysisUrl())
                .danceability(getDanceability())
                .durationMs(getDurationMs())
                .energy(getEnergy())
                .id(getId())
                .instrumentalness(getInstrumentalness())
                .key(getKey())
                .liveness(getLiveness())
                .loudness(getLoudness())
                .mode(getMode())
                .speechiness(getSpeechiness())
                .tempo(getTempo())
                .timeSignature(getTimeSignature())
                .trackHref(getTrackHref())
                .type(getType())
                .uri(getUri())
                .valence(getValence());
        return builder;
    }

    /**
     * Class to build instances of {@link AudioFeaturesObject}.
     */
    public static class Builder {
        private Double acousticness;
        private String analysisUrl;
        private Double danceability;
        private Integer durationMs;
        private Double energy;
        private String id;
        private Double instrumentalness;
        private Integer key;
        private Double liveness;
        private Double loudness;
        private Integer mode;
        private Double speechiness;
        private Double tempo;
        private Integer timeSignature;
        private String trackHref;
        private Type6Enum type;
        private String uri;
        private Double valence;



        /**
         * Setter for acousticness.
         * @param  acousticness  Double value for acousticness.
         * @return Builder
         */
        public Builder acousticness(Double acousticness) {
            this.acousticness = acousticness;
            return this;
        }

        /**
         * Setter for analysisUrl.
         * @param  analysisUrl  String value for analysisUrl.
         * @return Builder
         */
        public Builder analysisUrl(String analysisUrl) {
            this.analysisUrl = analysisUrl;
            return this;
        }

        /**
         * Setter for danceability.
         * @param  danceability  Double value for danceability.
         * @return Builder
         */
        public Builder danceability(Double danceability) {
            this.danceability = danceability;
            return this;
        }

        /**
         * Setter for durationMs.
         * @param  durationMs  Integer value for durationMs.
         * @return Builder
         */
        public Builder durationMs(Integer durationMs) {
            this.durationMs = durationMs;
            return this;
        }

        /**
         * Setter for energy.
         * @param  energy  Double value for energy.
         * @return Builder
         */
        public Builder energy(Double energy) {
            this.energy = energy;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  String value for id.
         * @return Builder
         */
        public Builder id(String id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for instrumentalness.
         * @param  instrumentalness  Double value for instrumentalness.
         * @return Builder
         */
        public Builder instrumentalness(Double instrumentalness) {
            this.instrumentalness = instrumentalness;
            return this;
        }

        /**
         * Setter for key.
         * @param  key  Integer value for key.
         * @return Builder
         */
        public Builder key(Integer key) {
            this.key = key;
            return this;
        }

        /**
         * Setter for liveness.
         * @param  liveness  Double value for liveness.
         * @return Builder
         */
        public Builder liveness(Double liveness) {
            this.liveness = liveness;
            return this;
        }

        /**
         * Setter for loudness.
         * @param  loudness  Double value for loudness.
         * @return Builder
         */
        public Builder loudness(Double loudness) {
            this.loudness = loudness;
            return this;
        }

        /**
         * Setter for mode.
         * @param  mode  Integer value for mode.
         * @return Builder
         */
        public Builder mode(Integer mode) {
            this.mode = mode;
            return this;
        }

        /**
         * Setter for speechiness.
         * @param  speechiness  Double value for speechiness.
         * @return Builder
         */
        public Builder speechiness(Double speechiness) {
            this.speechiness = speechiness;
            return this;
        }

        /**
         * Setter for tempo.
         * @param  tempo  Double value for tempo.
         * @return Builder
         */
        public Builder tempo(Double tempo) {
            this.tempo = tempo;
            return this;
        }

        /**
         * Setter for timeSignature.
         * @param  timeSignature  Integer value for timeSignature.
         * @return Builder
         */
        public Builder timeSignature(Integer timeSignature) {
            this.timeSignature = timeSignature;
            return this;
        }

        /**
         * Setter for trackHref.
         * @param  trackHref  String value for trackHref.
         * @return Builder
         */
        public Builder trackHref(String trackHref) {
            this.trackHref = trackHref;
            return this;
        }

        /**
         * Setter for type.
         * @param  type  Type6Enum value for type.
         * @return Builder
         */
        public Builder type(Type6Enum type) {
            this.type = type;
            return this;
        }

        /**
         * Setter for uri.
         * @param  uri  String value for uri.
         * @return Builder
         */
        public Builder uri(String uri) {
            this.uri = uri;
            return this;
        }

        /**
         * Setter for valence.
         * @param  valence  Double value for valence.
         * @return Builder
         */
        public Builder valence(Double valence) {
            this.valence = valence;
            return this;
        }

        /**
         * Builds a new {@link AudioFeaturesObject} object using the set fields.
         * @return {@link AudioFeaturesObject}
         */
        public AudioFeaturesObject build() {
            return new AudioFeaturesObject(acousticness, analysisUrl, danceability, durationMs,
                    energy, id, instrumentalness, key, liveness, loudness, mode, speechiness, tempo,
                    timeSignature, trackHref, type, uri, valence);
        }
    }
}
