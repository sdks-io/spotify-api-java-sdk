/*
 * SpotifyWebAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.spotify.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import java.util.List;

/**
 * This is a model class for ChapterObject type.
 */
public class ChapterObject {
    private String audioPreviewUrl;
    private List<String> availableMarkets;
    private int chapterNumber;
    private String description;
    private String htmlDescription;
    private int durationMs;
    private boolean explicit;
    private ExternalUrlObject externalUrls;
    private String href;
    private String id;
    private List<ImageObject> images;
    private boolean isPlayable;
    private List<String> languages;
    private String name;
    private String releaseDate;
    private ReleaseDatePrecisionEnum releaseDatePrecision;
    private ResumePointObject resumePoint;
    private Type8Enum type;
    private String uri;
    private ChapterRestrictionObject restrictions;
    private AudiobookBase audiobook;

    /**
     * Default constructor.
     */
    public ChapterObject() {
    }

    /**
     * Initialization constructor.
     * @param  audioPreviewUrl  String value for audioPreviewUrl.
     * @param  chapterNumber  int value for chapterNumber.
     * @param  description  String value for description.
     * @param  htmlDescription  String value for htmlDescription.
     * @param  durationMs  int value for durationMs.
     * @param  explicit  boolean value for explicit.
     * @param  externalUrls  ExternalUrlObject value for externalUrls.
     * @param  href  String value for href.
     * @param  id  String value for id.
     * @param  images  List of ImageObject value for images.
     * @param  isPlayable  boolean value for isPlayable.
     * @param  languages  List of String value for languages.
     * @param  name  String value for name.
     * @param  releaseDate  String value for releaseDate.
     * @param  releaseDatePrecision  ReleaseDatePrecisionEnum value for releaseDatePrecision.
     * @param  type  Type8Enum value for type.
     * @param  uri  String value for uri.
     * @param  audiobook  AudiobookBase value for audiobook.
     * @param  availableMarkets  List of String value for availableMarkets.
     * @param  resumePoint  ResumePointObject value for resumePoint.
     * @param  restrictions  ChapterRestrictionObject value for restrictions.
     */
    public ChapterObject(
            String audioPreviewUrl,
            int chapterNumber,
            String description,
            String htmlDescription,
            int durationMs,
            boolean explicit,
            ExternalUrlObject externalUrls,
            String href,
            String id,
            List<ImageObject> images,
            boolean isPlayable,
            List<String> languages,
            String name,
            String releaseDate,
            ReleaseDatePrecisionEnum releaseDatePrecision,
            Type8Enum type,
            String uri,
            AudiobookBase audiobook,
            List<String> availableMarkets,
            ResumePointObject resumePoint,
            ChapterRestrictionObject restrictions) {
        this.audioPreviewUrl = audioPreviewUrl;
        this.availableMarkets = availableMarkets;
        this.chapterNumber = chapterNumber;
        this.description = description;
        this.htmlDescription = htmlDescription;
        this.durationMs = durationMs;
        this.explicit = explicit;
        this.externalUrls = externalUrls;
        this.href = href;
        this.id = id;
        this.images = images;
        this.isPlayable = isPlayable;
        this.languages = languages;
        this.name = name;
        this.releaseDate = releaseDate;
        this.releaseDatePrecision = releaseDatePrecision;
        this.resumePoint = resumePoint;
        this.type = type;
        this.uri = uri;
        this.restrictions = restrictions;
        this.audiobook = audiobook;
    }

    /**
     * Getter for AudioPreviewUrl.
     * A URL to a 30 second preview (MP3 format) of the chapter. `null` if not available.
     * @return Returns the String
     */
    @JsonGetter("audio_preview_url")
    public String getAudioPreviewUrl() {
        return audioPreviewUrl;
    }

    /**
     * Setter for AudioPreviewUrl.
     * A URL to a 30 second preview (MP3 format) of the chapter. `null` if not available.
     * @param audioPreviewUrl Value for String
     */
    @JsonSetter("audio_preview_url")
    public void setAudioPreviewUrl(String audioPreviewUrl) {
        this.audioPreviewUrl = audioPreviewUrl;
    }

    /**
     * Getter for AvailableMarkets.
     * A list of the countries in which the chapter can be played, identified by their [ISO 3166-1
     * alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.
     * @return Returns the List of String
     */
    @JsonGetter("available_markets")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<String> getAvailableMarkets() {
        return availableMarkets;
    }

    /**
     * Setter for AvailableMarkets.
     * A list of the countries in which the chapter can be played, identified by their [ISO 3166-1
     * alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.
     * @param availableMarkets Value for List of String
     */
    @JsonSetter("available_markets")
    public void setAvailableMarkets(List<String> availableMarkets) {
        this.availableMarkets = availableMarkets;
    }

    /**
     * Getter for ChapterNumber.
     * The number of the chapter
     * @return Returns the int
     */
    @JsonGetter("chapter_number")
    public int getChapterNumber() {
        return chapterNumber;
    }

    /**
     * Setter for ChapterNumber.
     * The number of the chapter
     * @param chapterNumber Value for int
     */
    @JsonSetter("chapter_number")
    public void setChapterNumber(int chapterNumber) {
        this.chapterNumber = chapterNumber;
    }

    /**
     * Getter for Description.
     * A description of the chapter. HTML tags are stripped away from this field, use
     * `html_description` field in case HTML tags are needed.
     * @return Returns the String
     */
    @JsonGetter("description")
    public String getDescription() {
        return description;
    }

    /**
     * Setter for Description.
     * A description of the chapter. HTML tags are stripped away from this field, use
     * `html_description` field in case HTML tags are needed.
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Getter for HtmlDescription.
     * A description of the chapter. This field may contain HTML tags.
     * @return Returns the String
     */
    @JsonGetter("html_description")
    public String getHtmlDescription() {
        return htmlDescription;
    }

    /**
     * Setter for HtmlDescription.
     * A description of the chapter. This field may contain HTML tags.
     * @param htmlDescription Value for String
     */
    @JsonSetter("html_description")
    public void setHtmlDescription(String htmlDescription) {
        this.htmlDescription = htmlDescription;
    }

    /**
     * Getter for DurationMs.
     * The chapter length in milliseconds.
     * @return Returns the int
     */
    @JsonGetter("duration_ms")
    public int getDurationMs() {
        return durationMs;
    }

    /**
     * Setter for DurationMs.
     * The chapter length in milliseconds.
     * @param durationMs Value for int
     */
    @JsonSetter("duration_ms")
    public void setDurationMs(int durationMs) {
        this.durationMs = durationMs;
    }

    /**
     * Getter for Explicit.
     * Whether or not the chapter has explicit content (true = yes it does; false = no it does not
     * OR unknown).
     * @return Returns the boolean
     */
    @JsonGetter("explicit")
    public boolean getExplicit() {
        return explicit;
    }

    /**
     * Setter for Explicit.
     * Whether or not the chapter has explicit content (true = yes it does; false = no it does not
     * OR unknown).
     * @param explicit Value for boolean
     */
    @JsonSetter("explicit")
    public void setExplicit(boolean explicit) {
        this.explicit = explicit;
    }

    /**
     * Getter for ExternalUrls.
     * External URLs for this chapter.
     * @return Returns the ExternalUrlObject
     */
    @JsonGetter("external_urls")
    public ExternalUrlObject getExternalUrls() {
        return externalUrls;
    }

    /**
     * Setter for ExternalUrls.
     * External URLs for this chapter.
     * @param externalUrls Value for ExternalUrlObject
     */
    @JsonSetter("external_urls")
    public void setExternalUrls(ExternalUrlObject externalUrls) {
        this.externalUrls = externalUrls;
    }

    /**
     * Getter for Href.
     * A link to the Web API endpoint providing full details of the chapter.
     * @return Returns the String
     */
    @JsonGetter("href")
    public String getHref() {
        return href;
    }

    /**
     * Setter for Href.
     * A link to the Web API endpoint providing full details of the chapter.
     * @param href Value for String
     */
    @JsonSetter("href")
    public void setHref(String href) {
        this.href = href;
    }

    /**
     * Getter for Id.
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the chapter.
     * @return Returns the String
     */
    @JsonGetter("id")
    public String getId() {
        return id;
    }

    /**
     * Setter for Id.
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the chapter.
     * @param id Value for String
     */
    @JsonSetter("id")
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Getter for Images.
     * The cover art for the chapter in various sizes, widest first.
     * @return Returns the List of ImageObject
     */
    @JsonGetter("images")
    public List<ImageObject> getImages() {
        return images;
    }

    /**
     * Setter for Images.
     * The cover art for the chapter in various sizes, widest first.
     * @param images Value for List of ImageObject
     */
    @JsonSetter("images")
    public void setImages(List<ImageObject> images) {
        this.images = images;
    }

    /**
     * Getter for IsPlayable.
     * True if the chapter is playable in the given market. Otherwise false.
     * @return Returns the boolean
     */
    @JsonGetter("is_playable")
    public boolean getIsPlayable() {
        return isPlayable;
    }

    /**
     * Setter for IsPlayable.
     * True if the chapter is playable in the given market. Otherwise false.
     * @param isPlayable Value for boolean
     */
    @JsonSetter("is_playable")
    public void setIsPlayable(boolean isPlayable) {
        this.isPlayable = isPlayable;
    }

    /**
     * Getter for Languages.
     * A list of the languages used in the chapter, identified by their [ISO
     * 639-1](https://en.wikipedia.org/wiki/ISO_639) code.
     * @return Returns the List of String
     */
    @JsonGetter("languages")
    public List<String> getLanguages() {
        return languages;
    }

    /**
     * Setter for Languages.
     * A list of the languages used in the chapter, identified by their [ISO
     * 639-1](https://en.wikipedia.org/wiki/ISO_639) code.
     * @param languages Value for List of String
     */
    @JsonSetter("languages")
    public void setLanguages(List<String> languages) {
        this.languages = languages;
    }

    /**
     * Getter for Name.
     * The name of the chapter.
     * @return Returns the String
     */
    @JsonGetter("name")
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * The name of the chapter.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for ReleaseDate.
     * The date the chapter was first released, for example `"1981-12-15"`. Depending on the
     * precision, it might be shown as `"1981"` or `"1981-12"`.
     * @return Returns the String
     */
    @JsonGetter("release_date")
    public String getReleaseDate() {
        return releaseDate;
    }

    /**
     * Setter for ReleaseDate.
     * The date the chapter was first released, for example `"1981-12-15"`. Depending on the
     * precision, it might be shown as `"1981"` or `"1981-12"`.
     * @param releaseDate Value for String
     */
    @JsonSetter("release_date")
    public void setReleaseDate(String releaseDate) {
        this.releaseDate = releaseDate;
    }

    /**
     * Getter for ReleaseDatePrecision.
     * The precision with which `release_date` value is known.
     * @return Returns the ReleaseDatePrecisionEnum
     */
    @JsonGetter("release_date_precision")
    public ReleaseDatePrecisionEnum getReleaseDatePrecision() {
        return releaseDatePrecision;
    }

    /**
     * Setter for ReleaseDatePrecision.
     * The precision with which `release_date` value is known.
     * @param releaseDatePrecision Value for ReleaseDatePrecisionEnum
     */
    @JsonSetter("release_date_precision")
    public void setReleaseDatePrecision(ReleaseDatePrecisionEnum releaseDatePrecision) {
        this.releaseDatePrecision = releaseDatePrecision;
    }

    /**
     * Getter for ResumePoint.
     * The user's most recent position in the chapter. Set if the supplied access token is a user
     * token and has the scope 'user-read-playback-position'.
     * @return Returns the ResumePointObject
     */
    @JsonGetter("resume_point")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ResumePointObject getResumePoint() {
        return resumePoint;
    }

    /**
     * Setter for ResumePoint.
     * The user's most recent position in the chapter. Set if the supplied access token is a user
     * token and has the scope 'user-read-playback-position'.
     * @param resumePoint Value for ResumePointObject
     */
    @JsonSetter("resume_point")
    public void setResumePoint(ResumePointObject resumePoint) {
        this.resumePoint = resumePoint;
    }

    /**
     * Getter for Type.
     * The object type.
     * @return Returns the Type8Enum
     */
    @JsonGetter("type")
    public Type8Enum getType() {
        return type;
    }

    /**
     * Setter for Type.
     * The object type.
     * @param type Value for Type8Enum
     */
    @JsonSetter("type")
    public void setType(Type8Enum type) {
        this.type = type;
    }

    /**
     * Getter for Uri.
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the chapter.
     * @return Returns the String
     */
    @JsonGetter("uri")
    public String getUri() {
        return uri;
    }

    /**
     * Setter for Uri.
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the chapter.
     * @param uri Value for String
     */
    @JsonSetter("uri")
    public void setUri(String uri) {
        this.uri = uri;
    }

    /**
     * Getter for Restrictions.
     * Included in the response when a content restriction is applied.
     * @return Returns the ChapterRestrictionObject
     */
    @JsonGetter("restrictions")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ChapterRestrictionObject getRestrictions() {
        return restrictions;
    }

    /**
     * Setter for Restrictions.
     * Included in the response when a content restriction is applied.
     * @param restrictions Value for ChapterRestrictionObject
     */
    @JsonSetter("restrictions")
    public void setRestrictions(ChapterRestrictionObject restrictions) {
        this.restrictions = restrictions;
    }

    /**
     * Getter for Audiobook.
     * The audiobook for which the chapter belongs.
     * @return Returns the AudiobookBase
     */
    @JsonGetter("audiobook")
    public AudiobookBase getAudiobook() {
        return audiobook;
    }

    /**
     * Setter for Audiobook.
     * The audiobook for which the chapter belongs.
     * @param audiobook Value for AudiobookBase
     */
    @JsonSetter("audiobook")
    public void setAudiobook(AudiobookBase audiobook) {
        this.audiobook = audiobook;
    }

    /**
     * Converts this ChapterObject into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "ChapterObject [" + "audioPreviewUrl=" + audioPreviewUrl + ", chapterNumber="
                + chapterNumber + ", description=" + description + ", htmlDescription="
                + htmlDescription + ", durationMs=" + durationMs + ", explicit=" + explicit
                + ", externalUrls=" + externalUrls + ", href=" + href + ", id=" + id + ", images="
                + images + ", isPlayable=" + isPlayable + ", languages=" + languages + ", name="
                + name + ", releaseDate=" + releaseDate + ", releaseDatePrecision="
                + releaseDatePrecision + ", type=" + type + ", uri=" + uri + ", audiobook="
                + audiobook + ", availableMarkets=" + availableMarkets + ", resumePoint="
                + resumePoint + ", restrictions=" + restrictions + "]";
    }

    /**
     * Builds a new {@link ChapterObject.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link ChapterObject.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(audioPreviewUrl, chapterNumber, description, htmlDescription,
                durationMs, explicit, externalUrls, href, id, images, isPlayable, languages, name,
                releaseDate, releaseDatePrecision, type, uri, audiobook)
                .availableMarkets(getAvailableMarkets())
                .resumePoint(getResumePoint())
                .restrictions(getRestrictions());
        return builder;
    }

    /**
     * Class to build instances of {@link ChapterObject}.
     */
    public static class Builder {
        private String audioPreviewUrl;
        private int chapterNumber;
        private String description;
        private String htmlDescription;
        private int durationMs;
        private boolean explicit;
        private ExternalUrlObject externalUrls;
        private String href;
        private String id;
        private List<ImageObject> images;
        private boolean isPlayable;
        private List<String> languages;
        private String name;
        private String releaseDate;
        private ReleaseDatePrecisionEnum releaseDatePrecision;
        private Type8Enum type;
        private String uri;
        private AudiobookBase audiobook;
        private List<String> availableMarkets;
        private ResumePointObject resumePoint;
        private ChapterRestrictionObject restrictions;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  audioPreviewUrl  String value for audioPreviewUrl.
         * @param  chapterNumber  int value for chapterNumber.
         * @param  description  String value for description.
         * @param  htmlDescription  String value for htmlDescription.
         * @param  durationMs  int value for durationMs.
         * @param  explicit  boolean value for explicit.
         * @param  externalUrls  ExternalUrlObject value for externalUrls.
         * @param  href  String value for href.
         * @param  id  String value for id.
         * @param  images  List of ImageObject value for images.
         * @param  isPlayable  boolean value for isPlayable.
         * @param  languages  List of String value for languages.
         * @param  name  String value for name.
         * @param  releaseDate  String value for releaseDate.
         * @param  releaseDatePrecision  ReleaseDatePrecisionEnum value for releaseDatePrecision.
         * @param  type  Type8Enum value for type.
         * @param  uri  String value for uri.
         * @param  audiobook  AudiobookBase value for audiobook.
         */
        public Builder(String audioPreviewUrl, int chapterNumber, String description,
                String htmlDescription, int durationMs, boolean explicit,
                ExternalUrlObject externalUrls, String href, String id, List<ImageObject> images,
                boolean isPlayable, List<String> languages, String name, String releaseDate,
                ReleaseDatePrecisionEnum releaseDatePrecision, Type8Enum type, String uri,
                AudiobookBase audiobook) {
            this.audioPreviewUrl = audioPreviewUrl;
            this.chapterNumber = chapterNumber;
            this.description = description;
            this.htmlDescription = htmlDescription;
            this.durationMs = durationMs;
            this.explicit = explicit;
            this.externalUrls = externalUrls;
            this.href = href;
            this.id = id;
            this.images = images;
            this.isPlayable = isPlayable;
            this.languages = languages;
            this.name = name;
            this.releaseDate = releaseDate;
            this.releaseDatePrecision = releaseDatePrecision;
            this.type = type;
            this.uri = uri;
            this.audiobook = audiobook;
        }

        /**
         * Setter for audioPreviewUrl.
         * @param  audioPreviewUrl  String value for audioPreviewUrl.
         * @return Builder
         */
        public Builder audioPreviewUrl(String audioPreviewUrl) {
            this.audioPreviewUrl = audioPreviewUrl;
            return this;
        }

        /**
         * Setter for chapterNumber.
         * @param  chapterNumber  int value for chapterNumber.
         * @return Builder
         */
        public Builder chapterNumber(int chapterNumber) {
            this.chapterNumber = chapterNumber;
            return this;
        }

        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = description;
            return this;
        }

        /**
         * Setter for htmlDescription.
         * @param  htmlDescription  String value for htmlDescription.
         * @return Builder
         */
        public Builder htmlDescription(String htmlDescription) {
            this.htmlDescription = htmlDescription;
            return this;
        }

        /**
         * Setter for durationMs.
         * @param  durationMs  int value for durationMs.
         * @return Builder
         */
        public Builder durationMs(int durationMs) {
            this.durationMs = durationMs;
            return this;
        }

        /**
         * Setter for explicit.
         * @param  explicit  boolean value for explicit.
         * @return Builder
         */
        public Builder explicit(boolean explicit) {
            this.explicit = explicit;
            return this;
        }

        /**
         * Setter for externalUrls.
         * @param  externalUrls  ExternalUrlObject value for externalUrls.
         * @return Builder
         */
        public Builder externalUrls(ExternalUrlObject externalUrls) {
            this.externalUrls = externalUrls;
            return this;
        }

        /**
         * Setter for href.
         * @param  href  String value for href.
         * @return Builder
         */
        public Builder href(String href) {
            this.href = href;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  String value for id.
         * @return Builder
         */
        public Builder id(String id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for images.
         * @param  images  List of ImageObject value for images.
         * @return Builder
         */
        public Builder images(List<ImageObject> images) {
            this.images = images;
            return this;
        }

        /**
         * Setter for isPlayable.
         * @param  isPlayable  boolean value for isPlayable.
         * @return Builder
         */
        public Builder isPlayable(boolean isPlayable) {
            this.isPlayable = isPlayable;
            return this;
        }

        /**
         * Setter for languages.
         * @param  languages  List of String value for languages.
         * @return Builder
         */
        public Builder languages(List<String> languages) {
            this.languages = languages;
            return this;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for releaseDate.
         * @param  releaseDate  String value for releaseDate.
         * @return Builder
         */
        public Builder releaseDate(String releaseDate) {
            this.releaseDate = releaseDate;
            return this;
        }

        /**
         * Setter for releaseDatePrecision.
         * @param  releaseDatePrecision  ReleaseDatePrecisionEnum value for releaseDatePrecision.
         * @return Builder
         */
        public Builder releaseDatePrecision(ReleaseDatePrecisionEnum releaseDatePrecision) {
            this.releaseDatePrecision = releaseDatePrecision;
            return this;
        }

        /**
         * Setter for type.
         * @param  type  Type8Enum value for type.
         * @return Builder
         */
        public Builder type(Type8Enum type) {
            this.type = type;
            return this;
        }

        /**
         * Setter for uri.
         * @param  uri  String value for uri.
         * @return Builder
         */
        public Builder uri(String uri) {
            this.uri = uri;
            return this;
        }

        /**
         * Setter for audiobook.
         * @param  audiobook  AudiobookBase value for audiobook.
         * @return Builder
         */
        public Builder audiobook(AudiobookBase audiobook) {
            this.audiobook = audiobook;
            return this;
        }

        /**
         * Setter for availableMarkets.
         * @param  availableMarkets  List of String value for availableMarkets.
         * @return Builder
         */
        public Builder availableMarkets(List<String> availableMarkets) {
            this.availableMarkets = availableMarkets;
            return this;
        }

        /**
         * Setter for resumePoint.
         * @param  resumePoint  ResumePointObject value for resumePoint.
         * @return Builder
         */
        public Builder resumePoint(ResumePointObject resumePoint) {
            this.resumePoint = resumePoint;
            return this;
        }

        /**
         * Setter for restrictions.
         * @param  restrictions  ChapterRestrictionObject value for restrictions.
         * @return Builder
         */
        public Builder restrictions(ChapterRestrictionObject restrictions) {
            this.restrictions = restrictions;
            return this;
        }

        /**
         * Builds a new {@link ChapterObject} object using the set fields.
         * @return {@link ChapterObject}
         */
        public ChapterObject build() {
            return new ChapterObject(audioPreviewUrl, chapterNumber, description, htmlDescription,
                    durationMs, explicit, externalUrls, href, id, images, isPlayable, languages,
                    name, releaseDate, releaseDatePrecision, type, uri, audiobook, availableMarkets,
                    resumePoint, restrictions);
        }
    }
}
