/*
 * SpotifyWebAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.spotify.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import java.util.List;

/**
 * This is a model class for AudiobookObject type.
 */
public class AudiobookObject {
    private List<AuthorObject> authors;
    private List<String> availableMarkets;
    private List<CopyrightObject> copyrights;
    private String description;
    private String htmlDescription;
    private String edition;
    private boolean explicit;
    private ExternalUrlObject externalUrls;
    private String href;
    private String id;
    private List<ImageObject> images;
    private List<String> languages;
    private String mediaType;
    private String name;
    private List<NarratorObject> narrators;
    private String publisher;
    private Type9Enum type;
    private String uri;
    private int totalChapters;
    private PagingSimplifiedChapterObject chapters;

    /**
     * Default constructor.
     */
    public AudiobookObject() {
    }

    /**
     * Initialization constructor.
     * @param  authors  List of AuthorObject value for authors.
     * @param  availableMarkets  List of String value for availableMarkets.
     * @param  copyrights  List of CopyrightObject value for copyrights.
     * @param  description  String value for description.
     * @param  htmlDescription  String value for htmlDescription.
     * @param  explicit  boolean value for explicit.
     * @param  externalUrls  ExternalUrlObject value for externalUrls.
     * @param  href  String value for href.
     * @param  id  String value for id.
     * @param  images  List of ImageObject value for images.
     * @param  languages  List of String value for languages.
     * @param  mediaType  String value for mediaType.
     * @param  name  String value for name.
     * @param  narrators  List of NarratorObject value for narrators.
     * @param  publisher  String value for publisher.
     * @param  type  Type9Enum value for type.
     * @param  uri  String value for uri.
     * @param  totalChapters  int value for totalChapters.
     * @param  chapters  PagingSimplifiedChapterObject value for chapters.
     * @param  edition  String value for edition.
     */
    public AudiobookObject(
            List<AuthorObject> authors,
            List<String> availableMarkets,
            List<CopyrightObject> copyrights,
            String description,
            String htmlDescription,
            boolean explicit,
            ExternalUrlObject externalUrls,
            String href,
            String id,
            List<ImageObject> images,
            List<String> languages,
            String mediaType,
            String name,
            List<NarratorObject> narrators,
            String publisher,
            Type9Enum type,
            String uri,
            int totalChapters,
            PagingSimplifiedChapterObject chapters,
            String edition) {
        this.authors = authors;
        this.availableMarkets = availableMarkets;
        this.copyrights = copyrights;
        this.description = description;
        this.htmlDescription = htmlDescription;
        this.edition = edition;
        this.explicit = explicit;
        this.externalUrls = externalUrls;
        this.href = href;
        this.id = id;
        this.images = images;
        this.languages = languages;
        this.mediaType = mediaType;
        this.name = name;
        this.narrators = narrators;
        this.publisher = publisher;
        this.type = type;
        this.uri = uri;
        this.totalChapters = totalChapters;
        this.chapters = chapters;
    }

    /**
     * Getter for Authors.
     * The author(s) for the audiobook.
     * @return Returns the List of AuthorObject
     */
    @JsonGetter("authors")
    public List<AuthorObject> getAuthors() {
        return authors;
    }

    /**
     * Setter for Authors.
     * The author(s) for the audiobook.
     * @param authors Value for List of AuthorObject
     */
    @JsonSetter("authors")
    public void setAuthors(List<AuthorObject> authors) {
        this.authors = authors;
    }

    /**
     * Getter for AvailableMarkets.
     * A list of the countries in which the audiobook can be played, identified by their [ISO 3166-1
     * alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.
     * @return Returns the List of String
     */
    @JsonGetter("available_markets")
    public List<String> getAvailableMarkets() {
        return availableMarkets;
    }

    /**
     * Setter for AvailableMarkets.
     * A list of the countries in which the audiobook can be played, identified by their [ISO 3166-1
     * alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.
     * @param availableMarkets Value for List of String
     */
    @JsonSetter("available_markets")
    public void setAvailableMarkets(List<String> availableMarkets) {
        this.availableMarkets = availableMarkets;
    }

    /**
     * Getter for Copyrights.
     * The copyright statements of the audiobook.
     * @return Returns the List of CopyrightObject
     */
    @JsonGetter("copyrights")
    public List<CopyrightObject> getCopyrights() {
        return copyrights;
    }

    /**
     * Setter for Copyrights.
     * The copyright statements of the audiobook.
     * @param copyrights Value for List of CopyrightObject
     */
    @JsonSetter("copyrights")
    public void setCopyrights(List<CopyrightObject> copyrights) {
        this.copyrights = copyrights;
    }

    /**
     * Getter for Description.
     * A description of the audiobook. HTML tags are stripped away from this field, use
     * `html_description` field in case HTML tags are needed.
     * @return Returns the String
     */
    @JsonGetter("description")
    public String getDescription() {
        return description;
    }

    /**
     * Setter for Description.
     * A description of the audiobook. HTML tags are stripped away from this field, use
     * `html_description` field in case HTML tags are needed.
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Getter for HtmlDescription.
     * A description of the audiobook. This field may contain HTML tags.
     * @return Returns the String
     */
    @JsonGetter("html_description")
    public String getHtmlDescription() {
        return htmlDescription;
    }

    /**
     * Setter for HtmlDescription.
     * A description of the audiobook. This field may contain HTML tags.
     * @param htmlDescription Value for String
     */
    @JsonSetter("html_description")
    public void setHtmlDescription(String htmlDescription) {
        this.htmlDescription = htmlDescription;
    }

    /**
     * Getter for Edition.
     * The edition of the audiobook.
     * @return Returns the String
     */
    @JsonGetter("edition")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getEdition() {
        return edition;
    }

    /**
     * Setter for Edition.
     * The edition of the audiobook.
     * @param edition Value for String
     */
    @JsonSetter("edition")
    public void setEdition(String edition) {
        this.edition = edition;
    }

    /**
     * Getter for Explicit.
     * Whether or not the audiobook has explicit content (true = yes it does; false = no it does not
     * OR unknown).
     * @return Returns the boolean
     */
    @JsonGetter("explicit")
    public boolean getExplicit() {
        return explicit;
    }

    /**
     * Setter for Explicit.
     * Whether or not the audiobook has explicit content (true = yes it does; false = no it does not
     * OR unknown).
     * @param explicit Value for boolean
     */
    @JsonSetter("explicit")
    public void setExplicit(boolean explicit) {
        this.explicit = explicit;
    }

    /**
     * Getter for ExternalUrls.
     * External URLs for this audiobook.
     * @return Returns the ExternalUrlObject
     */
    @JsonGetter("external_urls")
    public ExternalUrlObject getExternalUrls() {
        return externalUrls;
    }

    /**
     * Setter for ExternalUrls.
     * External URLs for this audiobook.
     * @param externalUrls Value for ExternalUrlObject
     */
    @JsonSetter("external_urls")
    public void setExternalUrls(ExternalUrlObject externalUrls) {
        this.externalUrls = externalUrls;
    }

    /**
     * Getter for Href.
     * A link to the Web API endpoint providing full details of the audiobook.
     * @return Returns the String
     */
    @JsonGetter("href")
    public String getHref() {
        return href;
    }

    /**
     * Setter for Href.
     * A link to the Web API endpoint providing full details of the audiobook.
     * @param href Value for String
     */
    @JsonSetter("href")
    public void setHref(String href) {
        this.href = href;
    }

    /**
     * Getter for Id.
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the audiobook.
     * @return Returns the String
     */
    @JsonGetter("id")
    public String getId() {
        return id;
    }

    /**
     * Setter for Id.
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the audiobook.
     * @param id Value for String
     */
    @JsonSetter("id")
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Getter for Images.
     * The cover art for the audiobook in various sizes, widest first.
     * @return Returns the List of ImageObject
     */
    @JsonGetter("images")
    public List<ImageObject> getImages() {
        return images;
    }

    /**
     * Setter for Images.
     * The cover art for the audiobook in various sizes, widest first.
     * @param images Value for List of ImageObject
     */
    @JsonSetter("images")
    public void setImages(List<ImageObject> images) {
        this.images = images;
    }

    /**
     * Getter for Languages.
     * A list of the languages used in the audiobook, identified by their [ISO
     * 639](https://en.wikipedia.org/wiki/ISO_639) code.
     * @return Returns the List of String
     */
    @JsonGetter("languages")
    public List<String> getLanguages() {
        return languages;
    }

    /**
     * Setter for Languages.
     * A list of the languages used in the audiobook, identified by their [ISO
     * 639](https://en.wikipedia.org/wiki/ISO_639) code.
     * @param languages Value for List of String
     */
    @JsonSetter("languages")
    public void setLanguages(List<String> languages) {
        this.languages = languages;
    }

    /**
     * Getter for MediaType.
     * The media type of the audiobook.
     * @return Returns the String
     */
    @JsonGetter("media_type")
    public String getMediaType() {
        return mediaType;
    }

    /**
     * Setter for MediaType.
     * The media type of the audiobook.
     * @param mediaType Value for String
     */
    @JsonSetter("media_type")
    public void setMediaType(String mediaType) {
        this.mediaType = mediaType;
    }

    /**
     * Getter for Name.
     * The name of the audiobook.
     * @return Returns the String
     */
    @JsonGetter("name")
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * The name of the audiobook.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for Narrators.
     * The narrator(s) for the audiobook.
     * @return Returns the List of NarratorObject
     */
    @JsonGetter("narrators")
    public List<NarratorObject> getNarrators() {
        return narrators;
    }

    /**
     * Setter for Narrators.
     * The narrator(s) for the audiobook.
     * @param narrators Value for List of NarratorObject
     */
    @JsonSetter("narrators")
    public void setNarrators(List<NarratorObject> narrators) {
        this.narrators = narrators;
    }

    /**
     * Getter for Publisher.
     * The publisher of the audiobook.
     * @return Returns the String
     */
    @JsonGetter("publisher")
    public String getPublisher() {
        return publisher;
    }

    /**
     * Setter for Publisher.
     * The publisher of the audiobook.
     * @param publisher Value for String
     */
    @JsonSetter("publisher")
    public void setPublisher(String publisher) {
        this.publisher = publisher;
    }

    /**
     * Getter for Type.
     * The object type.
     * @return Returns the Type9Enum
     */
    @JsonGetter("type")
    public Type9Enum getType() {
        return type;
    }

    /**
     * Setter for Type.
     * The object type.
     * @param type Value for Type9Enum
     */
    @JsonSetter("type")
    public void setType(Type9Enum type) {
        this.type = type;
    }

    /**
     * Getter for Uri.
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the audiobook.
     * @return Returns the String
     */
    @JsonGetter("uri")
    public String getUri() {
        return uri;
    }

    /**
     * Setter for Uri.
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the audiobook.
     * @param uri Value for String
     */
    @JsonSetter("uri")
    public void setUri(String uri) {
        this.uri = uri;
    }

    /**
     * Getter for TotalChapters.
     * The number of chapters in this audiobook.
     * @return Returns the int
     */
    @JsonGetter("total_chapters")
    public int getTotalChapters() {
        return totalChapters;
    }

    /**
     * Setter for TotalChapters.
     * The number of chapters in this audiobook.
     * @param totalChapters Value for int
     */
    @JsonSetter("total_chapters")
    public void setTotalChapters(int totalChapters) {
        this.totalChapters = totalChapters;
    }

    /**
     * Getter for Chapters.
     * The chapters of the audiobook.
     * @return Returns the PagingSimplifiedChapterObject
     */
    @JsonGetter("chapters")
    public PagingSimplifiedChapterObject getChapters() {
        return chapters;
    }

    /**
     * Setter for Chapters.
     * The chapters of the audiobook.
     * @param chapters Value for PagingSimplifiedChapterObject
     */
    @JsonSetter("chapters")
    public void setChapters(PagingSimplifiedChapterObject chapters) {
        this.chapters = chapters;
    }

    /**
     * Converts this AudiobookObject into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "AudiobookObject [" + "authors=" + authors + ", availableMarkets=" + availableMarkets
                + ", copyrights=" + copyrights + ", description=" + description
                + ", htmlDescription=" + htmlDescription + ", explicit=" + explicit
                + ", externalUrls=" + externalUrls + ", href=" + href + ", id=" + id + ", images="
                + images + ", languages=" + languages + ", mediaType=" + mediaType + ", name="
                + name + ", narrators=" + narrators + ", publisher=" + publisher + ", type=" + type
                + ", uri=" + uri + ", totalChapters=" + totalChapters + ", chapters=" + chapters
                + ", edition=" + edition + "]";
    }

    /**
     * Builds a new {@link AudiobookObject.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link AudiobookObject.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(authors, availableMarkets, copyrights, description,
                htmlDescription, explicit, externalUrls, href, id, images, languages, mediaType,
                name, narrators, publisher, type, uri, totalChapters, chapters)
                .edition(getEdition());
        return builder;
    }

    /**
     * Class to build instances of {@link AudiobookObject}.
     */
    public static class Builder {
        private List<AuthorObject> authors;
        private List<String> availableMarkets;
        private List<CopyrightObject> copyrights;
        private String description;
        private String htmlDescription;
        private boolean explicit;
        private ExternalUrlObject externalUrls;
        private String href;
        private String id;
        private List<ImageObject> images;
        private List<String> languages;
        private String mediaType;
        private String name;
        private List<NarratorObject> narrators;
        private String publisher;
        private Type9Enum type;
        private String uri;
        private int totalChapters;
        private PagingSimplifiedChapterObject chapters;
        private String edition;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  authors  List of AuthorObject value for authors.
         * @param  availableMarkets  List of String value for availableMarkets.
         * @param  copyrights  List of CopyrightObject value for copyrights.
         * @param  description  String value for description.
         * @param  htmlDescription  String value for htmlDescription.
         * @param  explicit  boolean value for explicit.
         * @param  externalUrls  ExternalUrlObject value for externalUrls.
         * @param  href  String value for href.
         * @param  id  String value for id.
         * @param  images  List of ImageObject value for images.
         * @param  languages  List of String value for languages.
         * @param  mediaType  String value for mediaType.
         * @param  name  String value for name.
         * @param  narrators  List of NarratorObject value for narrators.
         * @param  publisher  String value for publisher.
         * @param  type  Type9Enum value for type.
         * @param  uri  String value for uri.
         * @param  totalChapters  int value for totalChapters.
         * @param  chapters  PagingSimplifiedChapterObject value for chapters.
         */
        public Builder(List<AuthorObject> authors, List<String> availableMarkets,
                List<CopyrightObject> copyrights, String description, String htmlDescription,
                boolean explicit, ExternalUrlObject externalUrls, String href, String id,
                List<ImageObject> images, List<String> languages, String mediaType, String name,
                List<NarratorObject> narrators, String publisher, Type9Enum type, String uri,
                int totalChapters, PagingSimplifiedChapterObject chapters) {
            this.authors = authors;
            this.availableMarkets = availableMarkets;
            this.copyrights = copyrights;
            this.description = description;
            this.htmlDescription = htmlDescription;
            this.explicit = explicit;
            this.externalUrls = externalUrls;
            this.href = href;
            this.id = id;
            this.images = images;
            this.languages = languages;
            this.mediaType = mediaType;
            this.name = name;
            this.narrators = narrators;
            this.publisher = publisher;
            this.type = type;
            this.uri = uri;
            this.totalChapters = totalChapters;
            this.chapters = chapters;
        }

        /**
         * Setter for authors.
         * @param  authors  List of AuthorObject value for authors.
         * @return Builder
         */
        public Builder authors(List<AuthorObject> authors) {
            this.authors = authors;
            return this;
        }

        /**
         * Setter for availableMarkets.
         * @param  availableMarkets  List of String value for availableMarkets.
         * @return Builder
         */
        public Builder availableMarkets(List<String> availableMarkets) {
            this.availableMarkets = availableMarkets;
            return this;
        }

        /**
         * Setter for copyrights.
         * @param  copyrights  List of CopyrightObject value for copyrights.
         * @return Builder
         */
        public Builder copyrights(List<CopyrightObject> copyrights) {
            this.copyrights = copyrights;
            return this;
        }

        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = description;
            return this;
        }

        /**
         * Setter for htmlDescription.
         * @param  htmlDescription  String value for htmlDescription.
         * @return Builder
         */
        public Builder htmlDescription(String htmlDescription) {
            this.htmlDescription = htmlDescription;
            return this;
        }

        /**
         * Setter for explicit.
         * @param  explicit  boolean value for explicit.
         * @return Builder
         */
        public Builder explicit(boolean explicit) {
            this.explicit = explicit;
            return this;
        }

        /**
         * Setter for externalUrls.
         * @param  externalUrls  ExternalUrlObject value for externalUrls.
         * @return Builder
         */
        public Builder externalUrls(ExternalUrlObject externalUrls) {
            this.externalUrls = externalUrls;
            return this;
        }

        /**
         * Setter for href.
         * @param  href  String value for href.
         * @return Builder
         */
        public Builder href(String href) {
            this.href = href;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  String value for id.
         * @return Builder
         */
        public Builder id(String id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for images.
         * @param  images  List of ImageObject value for images.
         * @return Builder
         */
        public Builder images(List<ImageObject> images) {
            this.images = images;
            return this;
        }

        /**
         * Setter for languages.
         * @param  languages  List of String value for languages.
         * @return Builder
         */
        public Builder languages(List<String> languages) {
            this.languages = languages;
            return this;
        }

        /**
         * Setter for mediaType.
         * @param  mediaType  String value for mediaType.
         * @return Builder
         */
        public Builder mediaType(String mediaType) {
            this.mediaType = mediaType;
            return this;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for narrators.
         * @param  narrators  List of NarratorObject value for narrators.
         * @return Builder
         */
        public Builder narrators(List<NarratorObject> narrators) {
            this.narrators = narrators;
            return this;
        }

        /**
         * Setter for publisher.
         * @param  publisher  String value for publisher.
         * @return Builder
         */
        public Builder publisher(String publisher) {
            this.publisher = publisher;
            return this;
        }

        /**
         * Setter for type.
         * @param  type  Type9Enum value for type.
         * @return Builder
         */
        public Builder type(Type9Enum type) {
            this.type = type;
            return this;
        }

        /**
         * Setter for uri.
         * @param  uri  String value for uri.
         * @return Builder
         */
        public Builder uri(String uri) {
            this.uri = uri;
            return this;
        }

        /**
         * Setter for totalChapters.
         * @param  totalChapters  int value for totalChapters.
         * @return Builder
         */
        public Builder totalChapters(int totalChapters) {
            this.totalChapters = totalChapters;
            return this;
        }

        /**
         * Setter for chapters.
         * @param  chapters  PagingSimplifiedChapterObject value for chapters.
         * @return Builder
         */
        public Builder chapters(PagingSimplifiedChapterObject chapters) {
            this.chapters = chapters;
            return this;
        }

        /**
         * Setter for edition.
         * @param  edition  String value for edition.
         * @return Builder
         */
        public Builder edition(String edition) {
            this.edition = edition;
            return this;
        }

        /**
         * Builds a new {@link AudiobookObject} object using the set fields.
         * @return {@link AudiobookObject}
         */
        public AudiobookObject build() {
            return new AudiobookObject(authors, availableMarkets, copyrights, description,
                    htmlDescription, explicit, externalUrls, href, id, images, languages, mediaType,
                    name, narrators, publisher, type, uri, totalChapters, chapters, edition);
        }
    }
}
