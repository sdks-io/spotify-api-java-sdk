/*
 * SpotifyWebAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.spotify.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonSetter;
import java.util.List;

/**
 * This is a model class for ShowBase type.
 */
public class ShowBase {
    private List<String> availableMarkets;
    private List<CopyrightObject> copyrights;
    private String description;
    private String htmlDescription;
    private boolean explicit;
    private ExternalUrlObject externalUrls;
    private String href;
    private String id;
    private List<ImageObject> images;
    private boolean isExternallyHosted;
    private List<String> languages;
    private String mediaType;
    private String name;
    private String publisher;
    private Type7Enum type;
    private String uri;
    private int totalEpisodes;

    /**
     * Default constructor.
     */
    public ShowBase() {
    }

    /**
     * Initialization constructor.
     * @param  availableMarkets  List of String value for availableMarkets.
     * @param  copyrights  List of CopyrightObject value for copyrights.
     * @param  description  String value for description.
     * @param  htmlDescription  String value for htmlDescription.
     * @param  explicit  boolean value for explicit.
     * @param  externalUrls  ExternalUrlObject value for externalUrls.
     * @param  href  String value for href.
     * @param  id  String value for id.
     * @param  images  List of ImageObject value for images.
     * @param  isExternallyHosted  boolean value for isExternallyHosted.
     * @param  languages  List of String value for languages.
     * @param  mediaType  String value for mediaType.
     * @param  name  String value for name.
     * @param  publisher  String value for publisher.
     * @param  type  Type7Enum value for type.
     * @param  uri  String value for uri.
     * @param  totalEpisodes  int value for totalEpisodes.
     */
    public ShowBase(
            List<String> availableMarkets,
            List<CopyrightObject> copyrights,
            String description,
            String htmlDescription,
            boolean explicit,
            ExternalUrlObject externalUrls,
            String href,
            String id,
            List<ImageObject> images,
            boolean isExternallyHosted,
            List<String> languages,
            String mediaType,
            String name,
            String publisher,
            Type7Enum type,
            String uri,
            int totalEpisodes) {
        this.availableMarkets = availableMarkets;
        this.copyrights = copyrights;
        this.description = description;
        this.htmlDescription = htmlDescription;
        this.explicit = explicit;
        this.externalUrls = externalUrls;
        this.href = href;
        this.id = id;
        this.images = images;
        this.isExternallyHosted = isExternallyHosted;
        this.languages = languages;
        this.mediaType = mediaType;
        this.name = name;
        this.publisher = publisher;
        this.type = type;
        this.uri = uri;
        this.totalEpisodes = totalEpisodes;
    }

    /**
     * Getter for AvailableMarkets.
     * A list of the countries in which the show can be played, identified by their [ISO 3166-1
     * alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.
     * @return Returns the List of String
     */
    @JsonGetter("available_markets")
    public List<String> getAvailableMarkets() {
        return availableMarkets;
    }

    /**
     * Setter for AvailableMarkets.
     * A list of the countries in which the show can be played, identified by their [ISO 3166-1
     * alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.
     * @param availableMarkets Value for List of String
     */
    @JsonSetter("available_markets")
    public void setAvailableMarkets(List<String> availableMarkets) {
        this.availableMarkets = availableMarkets;
    }

    /**
     * Getter for Copyrights.
     * The copyright statements of the show.
     * @return Returns the List of CopyrightObject
     */
    @JsonGetter("copyrights")
    public List<CopyrightObject> getCopyrights() {
        return copyrights;
    }

    /**
     * Setter for Copyrights.
     * The copyright statements of the show.
     * @param copyrights Value for List of CopyrightObject
     */
    @JsonSetter("copyrights")
    public void setCopyrights(List<CopyrightObject> copyrights) {
        this.copyrights = copyrights;
    }

    /**
     * Getter for Description.
     * A description of the show. HTML tags are stripped away from this field, use
     * `html_description` field in case HTML tags are needed.
     * @return Returns the String
     */
    @JsonGetter("description")
    public String getDescription() {
        return description;
    }

    /**
     * Setter for Description.
     * A description of the show. HTML tags are stripped away from this field, use
     * `html_description` field in case HTML tags are needed.
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Getter for HtmlDescription.
     * A description of the show. This field may contain HTML tags.
     * @return Returns the String
     */
    @JsonGetter("html_description")
    public String getHtmlDescription() {
        return htmlDescription;
    }

    /**
     * Setter for HtmlDescription.
     * A description of the show. This field may contain HTML tags.
     * @param htmlDescription Value for String
     */
    @JsonSetter("html_description")
    public void setHtmlDescription(String htmlDescription) {
        this.htmlDescription = htmlDescription;
    }

    /**
     * Getter for Explicit.
     * Whether or not the show has explicit content (true = yes it does; false = no it does not OR
     * unknown).
     * @return Returns the boolean
     */
    @JsonGetter("explicit")
    public boolean getExplicit() {
        return explicit;
    }

    /**
     * Setter for Explicit.
     * Whether or not the show has explicit content (true = yes it does; false = no it does not OR
     * unknown).
     * @param explicit Value for boolean
     */
    @JsonSetter("explicit")
    public void setExplicit(boolean explicit) {
        this.explicit = explicit;
    }

    /**
     * Getter for ExternalUrls.
     * External URLs for this show.
     * @return Returns the ExternalUrlObject
     */
    @JsonGetter("external_urls")
    public ExternalUrlObject getExternalUrls() {
        return externalUrls;
    }

    /**
     * Setter for ExternalUrls.
     * External URLs for this show.
     * @param externalUrls Value for ExternalUrlObject
     */
    @JsonSetter("external_urls")
    public void setExternalUrls(ExternalUrlObject externalUrls) {
        this.externalUrls = externalUrls;
    }

    /**
     * Getter for Href.
     * A link to the Web API endpoint providing full details of the show.
     * @return Returns the String
     */
    @JsonGetter("href")
    public String getHref() {
        return href;
    }

    /**
     * Setter for Href.
     * A link to the Web API endpoint providing full details of the show.
     * @param href Value for String
     */
    @JsonSetter("href")
    public void setHref(String href) {
        this.href = href;
    }

    /**
     * Getter for Id.
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the show.
     * @return Returns the String
     */
    @JsonGetter("id")
    public String getId() {
        return id;
    }

    /**
     * Setter for Id.
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the show.
     * @param id Value for String
     */
    @JsonSetter("id")
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Getter for Images.
     * The cover art for the show in various sizes, widest first.
     * @return Returns the List of ImageObject
     */
    @JsonGetter("images")
    public List<ImageObject> getImages() {
        return images;
    }

    /**
     * Setter for Images.
     * The cover art for the show in various sizes, widest first.
     * @param images Value for List of ImageObject
     */
    @JsonSetter("images")
    public void setImages(List<ImageObject> images) {
        this.images = images;
    }

    /**
     * Getter for IsExternallyHosted.
     * True if all of the shows episodes are hosted outside of Spotify's CDN. This field might be
     * `null` in some cases.
     * @return Returns the boolean
     */
    @JsonGetter("is_externally_hosted")
    public boolean getIsExternallyHosted() {
        return isExternallyHosted;
    }

    /**
     * Setter for IsExternallyHosted.
     * True if all of the shows episodes are hosted outside of Spotify's CDN. This field might be
     * `null` in some cases.
     * @param isExternallyHosted Value for boolean
     */
    @JsonSetter("is_externally_hosted")
    public void setIsExternallyHosted(boolean isExternallyHosted) {
        this.isExternallyHosted = isExternallyHosted;
    }

    /**
     * Getter for Languages.
     * A list of the languages used in the show, identified by their [ISO
     * 639](https://en.wikipedia.org/wiki/ISO_639) code.
     * @return Returns the List of String
     */
    @JsonGetter("languages")
    public List<String> getLanguages() {
        return languages;
    }

    /**
     * Setter for Languages.
     * A list of the languages used in the show, identified by their [ISO
     * 639](https://en.wikipedia.org/wiki/ISO_639) code.
     * @param languages Value for List of String
     */
    @JsonSetter("languages")
    public void setLanguages(List<String> languages) {
        this.languages = languages;
    }

    /**
     * Getter for MediaType.
     * The media type of the show.
     * @return Returns the String
     */
    @JsonGetter("media_type")
    public String getMediaType() {
        return mediaType;
    }

    /**
     * Setter for MediaType.
     * The media type of the show.
     * @param mediaType Value for String
     */
    @JsonSetter("media_type")
    public void setMediaType(String mediaType) {
        this.mediaType = mediaType;
    }

    /**
     * Getter for Name.
     * The name of the episode.
     * @return Returns the String
     */
    @JsonGetter("name")
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * The name of the episode.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for Publisher.
     * The publisher of the show.
     * @return Returns the String
     */
    @JsonGetter("publisher")
    public String getPublisher() {
        return publisher;
    }

    /**
     * Setter for Publisher.
     * The publisher of the show.
     * @param publisher Value for String
     */
    @JsonSetter("publisher")
    public void setPublisher(String publisher) {
        this.publisher = publisher;
    }

    /**
     * Getter for Type.
     * The object type.
     * @return Returns the Type7Enum
     */
    @JsonGetter("type")
    public Type7Enum getType() {
        return type;
    }

    /**
     * Setter for Type.
     * The object type.
     * @param type Value for Type7Enum
     */
    @JsonSetter("type")
    public void setType(Type7Enum type) {
        this.type = type;
    }

    /**
     * Getter for Uri.
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the show.
     * @return Returns the String
     */
    @JsonGetter("uri")
    public String getUri() {
        return uri;
    }

    /**
     * Setter for Uri.
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the show.
     * @param uri Value for String
     */
    @JsonSetter("uri")
    public void setUri(String uri) {
        this.uri = uri;
    }

    /**
     * Getter for TotalEpisodes.
     * The total number of episodes in the show.
     * @return Returns the int
     */
    @JsonGetter("total_episodes")
    public int getTotalEpisodes() {
        return totalEpisodes;
    }

    /**
     * Setter for TotalEpisodes.
     * The total number of episodes in the show.
     * @param totalEpisodes Value for int
     */
    @JsonSetter("total_episodes")
    public void setTotalEpisodes(int totalEpisodes) {
        this.totalEpisodes = totalEpisodes;
    }

    /**
     * Converts this ShowBase into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "ShowBase [" + "availableMarkets=" + availableMarkets + ", copyrights=" + copyrights
                + ", description=" + description + ", htmlDescription=" + htmlDescription
                + ", explicit=" + explicit + ", externalUrls=" + externalUrls + ", href=" + href
                + ", id=" + id + ", images=" + images + ", isExternallyHosted=" + isExternallyHosted
                + ", languages=" + languages + ", mediaType=" + mediaType + ", name=" + name
                + ", publisher=" + publisher + ", type=" + type + ", uri=" + uri
                + ", totalEpisodes=" + totalEpisodes + "]";
    }

    /**
     * Builds a new {@link ShowBase.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link ShowBase.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(availableMarkets, copyrights, description, htmlDescription,
                explicit, externalUrls, href, id, images, isExternallyHosted, languages, mediaType,
                name, publisher, type, uri, totalEpisodes);
        return builder;
    }

    /**
     * Class to build instances of {@link ShowBase}.
     */
    public static class Builder {
        private List<String> availableMarkets;
        private List<CopyrightObject> copyrights;
        private String description;
        private String htmlDescription;
        private boolean explicit;
        private ExternalUrlObject externalUrls;
        private String href;
        private String id;
        private List<ImageObject> images;
        private boolean isExternallyHosted;
        private List<String> languages;
        private String mediaType;
        private String name;
        private String publisher;
        private Type7Enum type;
        private String uri;
        private int totalEpisodes;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  availableMarkets  List of String value for availableMarkets.
         * @param  copyrights  List of CopyrightObject value for copyrights.
         * @param  description  String value for description.
         * @param  htmlDescription  String value for htmlDescription.
         * @param  explicit  boolean value for explicit.
         * @param  externalUrls  ExternalUrlObject value for externalUrls.
         * @param  href  String value for href.
         * @param  id  String value for id.
         * @param  images  List of ImageObject value for images.
         * @param  isExternallyHosted  boolean value for isExternallyHosted.
         * @param  languages  List of String value for languages.
         * @param  mediaType  String value for mediaType.
         * @param  name  String value for name.
         * @param  publisher  String value for publisher.
         * @param  type  Type7Enum value for type.
         * @param  uri  String value for uri.
         * @param  totalEpisodes  int value for totalEpisodes.
         */
        public Builder(List<String> availableMarkets, List<CopyrightObject> copyrights,
                String description, String htmlDescription, boolean explicit,
                ExternalUrlObject externalUrls, String href, String id, List<ImageObject> images,
                boolean isExternallyHosted, List<String> languages, String mediaType, String name,
                String publisher, Type7Enum type, String uri, int totalEpisodes) {
            this.availableMarkets = availableMarkets;
            this.copyrights = copyrights;
            this.description = description;
            this.htmlDescription = htmlDescription;
            this.explicit = explicit;
            this.externalUrls = externalUrls;
            this.href = href;
            this.id = id;
            this.images = images;
            this.isExternallyHosted = isExternallyHosted;
            this.languages = languages;
            this.mediaType = mediaType;
            this.name = name;
            this.publisher = publisher;
            this.type = type;
            this.uri = uri;
            this.totalEpisodes = totalEpisodes;
        }

        /**
         * Setter for availableMarkets.
         * @param  availableMarkets  List of String value for availableMarkets.
         * @return Builder
         */
        public Builder availableMarkets(List<String> availableMarkets) {
            this.availableMarkets = availableMarkets;
            return this;
        }

        /**
         * Setter for copyrights.
         * @param  copyrights  List of CopyrightObject value for copyrights.
         * @return Builder
         */
        public Builder copyrights(List<CopyrightObject> copyrights) {
            this.copyrights = copyrights;
            return this;
        }

        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = description;
            return this;
        }

        /**
         * Setter for htmlDescription.
         * @param  htmlDescription  String value for htmlDescription.
         * @return Builder
         */
        public Builder htmlDescription(String htmlDescription) {
            this.htmlDescription = htmlDescription;
            return this;
        }

        /**
         * Setter for explicit.
         * @param  explicit  boolean value for explicit.
         * @return Builder
         */
        public Builder explicit(boolean explicit) {
            this.explicit = explicit;
            return this;
        }

        /**
         * Setter for externalUrls.
         * @param  externalUrls  ExternalUrlObject value for externalUrls.
         * @return Builder
         */
        public Builder externalUrls(ExternalUrlObject externalUrls) {
            this.externalUrls = externalUrls;
            return this;
        }

        /**
         * Setter for href.
         * @param  href  String value for href.
         * @return Builder
         */
        public Builder href(String href) {
            this.href = href;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  String value for id.
         * @return Builder
         */
        public Builder id(String id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for images.
         * @param  images  List of ImageObject value for images.
         * @return Builder
         */
        public Builder images(List<ImageObject> images) {
            this.images = images;
            return this;
        }

        /**
         * Setter for isExternallyHosted.
         * @param  isExternallyHosted  boolean value for isExternallyHosted.
         * @return Builder
         */
        public Builder isExternallyHosted(boolean isExternallyHosted) {
            this.isExternallyHosted = isExternallyHosted;
            return this;
        }

        /**
         * Setter for languages.
         * @param  languages  List of String value for languages.
         * @return Builder
         */
        public Builder languages(List<String> languages) {
            this.languages = languages;
            return this;
        }

        /**
         * Setter for mediaType.
         * @param  mediaType  String value for mediaType.
         * @return Builder
         */
        public Builder mediaType(String mediaType) {
            this.mediaType = mediaType;
            return this;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for publisher.
         * @param  publisher  String value for publisher.
         * @return Builder
         */
        public Builder publisher(String publisher) {
            this.publisher = publisher;
            return this;
        }

        /**
         * Setter for type.
         * @param  type  Type7Enum value for type.
         * @return Builder
         */
        public Builder type(Type7Enum type) {
            this.type = type;
            return this;
        }

        /**
         * Setter for uri.
         * @param  uri  String value for uri.
         * @return Builder
         */
        public Builder uri(String uri) {
            this.uri = uri;
            return this;
        }

        /**
         * Setter for totalEpisodes.
         * @param  totalEpisodes  int value for totalEpisodes.
         * @return Builder
         */
        public Builder totalEpisodes(int totalEpisodes) {
            this.totalEpisodes = totalEpisodes;
            return this;
        }

        /**
         * Builds a new {@link ShowBase} object using the set fields.
         * @return {@link ShowBase}
         */
        public ShowBase build() {
            return new ShowBase(availableMarkets, copyrights, description, htmlDescription,
                    explicit, externalUrls, href, id, images, isExternallyHosted, languages,
                    mediaType, name, publisher, type, uri, totalEpisodes);
        }
    }
}
