/*
 * SpotifyWebAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.spotify.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;

/**
 * This is a model class for SectionObject type.
 */
public class SectionObject {
    private Double start;
    private Double duration;
    private Double confidence;
    private Double loudness;
    private Double tempo;
    private Double tempoConfidence;
    private Integer key;
    private Double keyConfidence;
    private ModeEnum mode;
    private Double modeConfidence;
    private Integer timeSignature;
    private Double timeSignatureConfidence;

    /**
     * Default constructor.
     */
    public SectionObject() {
    }

    /**
     * Initialization constructor.
     * @param  start  Double value for start.
     * @param  duration  Double value for duration.
     * @param  confidence  Double value for confidence.
     * @param  loudness  Double value for loudness.
     * @param  tempo  Double value for tempo.
     * @param  tempoConfidence  Double value for tempoConfidence.
     * @param  key  Integer value for key.
     * @param  keyConfidence  Double value for keyConfidence.
     * @param  mode  ModeEnum value for mode.
     * @param  modeConfidence  Double value for modeConfidence.
     * @param  timeSignature  Integer value for timeSignature.
     * @param  timeSignatureConfidence  Double value for timeSignatureConfidence.
     */
    public SectionObject(
            Double start,
            Double duration,
            Double confidence,
            Double loudness,
            Double tempo,
            Double tempoConfidence,
            Integer key,
            Double keyConfidence,
            ModeEnum mode,
            Double modeConfidence,
            Integer timeSignature,
            Double timeSignatureConfidence) {
        this.start = start;
        this.duration = duration;
        this.confidence = confidence;
        this.loudness = loudness;
        this.tempo = tempo;
        this.tempoConfidence = tempoConfidence;
        this.key = key;
        this.keyConfidence = keyConfidence;
        this.mode = mode;
        this.modeConfidence = modeConfidence;
        this.timeSignature = timeSignature;
        this.timeSignatureConfidence = timeSignatureConfidence;
    }

    /**
     * Getter for Start.
     * The starting point (in seconds) of the section.
     * @return Returns the Double
     */
    @JsonGetter("start")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getStart() {
        return start;
    }

    /**
     * Setter for Start.
     * The starting point (in seconds) of the section.
     * @param start Value for Double
     */
    @JsonSetter("start")
    public void setStart(Double start) {
        this.start = start;
    }

    /**
     * Getter for Duration.
     * The duration (in seconds) of the section.
     * @return Returns the Double
     */
    @JsonGetter("duration")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getDuration() {
        return duration;
    }

    /**
     * Setter for Duration.
     * The duration (in seconds) of the section.
     * @param duration Value for Double
     */
    @JsonSetter("duration")
    public void setDuration(Double duration) {
        this.duration = duration;
    }

    /**
     * Getter for Confidence.
     * The confidence, from 0.0 to 1.0, of the reliability of the section's "designation".
     * @return Returns the Double
     */
    @JsonGetter("confidence")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getConfidence() {
        return confidence;
    }

    /**
     * Setter for Confidence.
     * The confidence, from 0.0 to 1.0, of the reliability of the section's "designation".
     * @param confidence Value for Double
     */
    @JsonSetter("confidence")
    public void setConfidence(Double confidence) {
        this.confidence = confidence;
    }

    /**
     * Getter for Loudness.
     * The overall loudness of the section in decibels (dB). Loudness values are useful for
     * comparing relative loudness of sections within tracks.
     * @return Returns the Double
     */
    @JsonGetter("loudness")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getLoudness() {
        return loudness;
    }

    /**
     * Setter for Loudness.
     * The overall loudness of the section in decibels (dB). Loudness values are useful for
     * comparing relative loudness of sections within tracks.
     * @param loudness Value for Double
     */
    @JsonSetter("loudness")
    public void setLoudness(Double loudness) {
        this.loudness = loudness;
    }

    /**
     * Getter for Tempo.
     * The overall estimated tempo of the section in beats per minute (BPM). In musical terminology,
     * tempo is the speed or pace of a given piece and derives directly from the average beat
     * duration.
     * @return Returns the Double
     */
    @JsonGetter("tempo")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getTempo() {
        return tempo;
    }

    /**
     * Setter for Tempo.
     * The overall estimated tempo of the section in beats per minute (BPM). In musical terminology,
     * tempo is the speed or pace of a given piece and derives directly from the average beat
     * duration.
     * @param tempo Value for Double
     */
    @JsonSetter("tempo")
    public void setTempo(Double tempo) {
        this.tempo = tempo;
    }

    /**
     * Getter for TempoConfidence.
     * The confidence, from 0.0 to 1.0, of the reliability of the tempo. Some tracks contain tempo
     * changes or sounds which don't contain tempo (like pure speech) which would correspond to a
     * low value in this field.
     * @return Returns the Double
     */
    @JsonGetter("tempo_confidence")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getTempoConfidence() {
        return tempoConfidence;
    }

    /**
     * Setter for TempoConfidence.
     * The confidence, from 0.0 to 1.0, of the reliability of the tempo. Some tracks contain tempo
     * changes or sounds which don't contain tempo (like pure speech) which would correspond to a
     * low value in this field.
     * @param tempoConfidence Value for Double
     */
    @JsonSetter("tempo_confidence")
    public void setTempoConfidence(Double tempoConfidence) {
        this.tempoConfidence = tempoConfidence;
    }

    /**
     * Getter for Key.
     * The estimated overall key of the section. The values in this field ranging from 0 to 11
     * mapping to pitches using standard Pitch Class notation (E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so
     * on). If no key was detected, the value is -1.
     * @return Returns the Integer
     */
    @JsonGetter("key")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getKey() {
        return key;
    }

    /**
     * Setter for Key.
     * The estimated overall key of the section. The values in this field ranging from 0 to 11
     * mapping to pitches using standard Pitch Class notation (E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so
     * on). If no key was detected, the value is -1.
     * @param key Value for Integer
     */
    @JsonSetter("key")
    public void setKey(Integer key) {
        this.key = key;
    }

    /**
     * Getter for KeyConfidence.
     * The confidence, from 0.0 to 1.0, of the reliability of the key. Songs with many key changes
     * may correspond to low values in this field.
     * @return Returns the Double
     */
    @JsonGetter("key_confidence")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getKeyConfidence() {
        return keyConfidence;
    }

    /**
     * Setter for KeyConfidence.
     * The confidence, from 0.0 to 1.0, of the reliability of the key. Songs with many key changes
     * may correspond to low values in this field.
     * @param keyConfidence Value for Double
     */
    @JsonSetter("key_confidence")
    public void setKeyConfidence(Double keyConfidence) {
        this.keyConfidence = keyConfidence;
    }

    /**
     * Getter for Mode.
     * Indicates the modality (major or minor) of a section, the type of scale from which its
     * melodic content is derived. This field will contain a 0 for "minor", a 1 for "major", or a -1
     * for no result. Note that the major key (e.g. C major) could more likely be confused with the
     * minor key at 3 semitones lower (e.g. A minor) as both keys carry the same pitches.
     * @return Returns the ModeEnum
     */
    @JsonGetter("mode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ModeEnum getMode() {
        return mode;
    }

    /**
     * Setter for Mode.
     * Indicates the modality (major or minor) of a section, the type of scale from which its
     * melodic content is derived. This field will contain a 0 for "minor", a 1 for "major", or a -1
     * for no result. Note that the major key (e.g. C major) could more likely be confused with the
     * minor key at 3 semitones lower (e.g. A minor) as both keys carry the same pitches.
     * @param mode Value for ModeEnum
     */
    @JsonSetter("mode")
    public void setMode(ModeEnum mode) {
        this.mode = mode;
    }

    /**
     * Getter for ModeConfidence.
     * The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
     * @return Returns the Double
     */
    @JsonGetter("mode_confidence")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getModeConfidence() {
        return modeConfidence;
    }

    /**
     * Setter for ModeConfidence.
     * The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
     * @param modeConfidence Value for Double
     */
    @JsonSetter("mode_confidence")
    public void setModeConfidence(Double modeConfidence) {
        this.modeConfidence = modeConfidence;
    }

    /**
     * Getter for TimeSignature.
     * An estimated time signature. The time signature (meter) is a notational convention to specify
     * how many beats are in each bar (or measure). The time signature ranges from 3 to 7 indicating
     * time signatures of "3/4", to "7/4".
     * @return Returns the Integer
     */
    @JsonGetter("time_signature")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getTimeSignature() {
        return timeSignature;
    }

    /**
     * Setter for TimeSignature.
     * An estimated time signature. The time signature (meter) is a notational convention to specify
     * how many beats are in each bar (or measure). The time signature ranges from 3 to 7 indicating
     * time signatures of "3/4", to "7/4".
     * @param timeSignature Value for Integer
     */
    @JsonSetter("time_signature")
    public void setTimeSignature(Integer timeSignature) {
        this.timeSignature = timeSignature;
    }

    /**
     * Getter for TimeSignatureConfidence.
     * The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`. Sections with
     * time signature changes may correspond to low values in this field.
     * @return Returns the Double
     */
    @JsonGetter("time_signature_confidence")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getTimeSignatureConfidence() {
        return timeSignatureConfidence;
    }

    /**
     * Setter for TimeSignatureConfidence.
     * The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`. Sections with
     * time signature changes may correspond to low values in this field.
     * @param timeSignatureConfidence Value for Double
     */
    @JsonSetter("time_signature_confidence")
    public void setTimeSignatureConfidence(Double timeSignatureConfidence) {
        this.timeSignatureConfidence = timeSignatureConfidence;
    }

    /**
     * Converts this SectionObject into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "SectionObject [" + "start=" + start + ", duration=" + duration + ", confidence="
                + confidence + ", loudness=" + loudness + ", tempo=" + tempo + ", tempoConfidence="
                + tempoConfidence + ", key=" + key + ", keyConfidence=" + keyConfidence + ", mode="
                + mode + ", modeConfidence=" + modeConfidence + ", timeSignature=" + timeSignature
                + ", timeSignatureConfidence=" + timeSignatureConfidence + "]";
    }

    /**
     * Builds a new {@link SectionObject.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link SectionObject.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .start(getStart())
                .duration(getDuration())
                .confidence(getConfidence())
                .loudness(getLoudness())
                .tempo(getTempo())
                .tempoConfidence(getTempoConfidence())
                .key(getKey())
                .keyConfidence(getKeyConfidence())
                .mode(getMode())
                .modeConfidence(getModeConfidence())
                .timeSignature(getTimeSignature())
                .timeSignatureConfidence(getTimeSignatureConfidence());
        return builder;
    }

    /**
     * Class to build instances of {@link SectionObject}.
     */
    public static class Builder {
        private Double start;
        private Double duration;
        private Double confidence;
        private Double loudness;
        private Double tempo;
        private Double tempoConfidence;
        private Integer key;
        private Double keyConfidence;
        private ModeEnum mode;
        private Double modeConfidence;
        private Integer timeSignature;
        private Double timeSignatureConfidence;



        /**
         * Setter for start.
         * @param  start  Double value for start.
         * @return Builder
         */
        public Builder start(Double start) {
            this.start = start;
            return this;
        }

        /**
         * Setter for duration.
         * @param  duration  Double value for duration.
         * @return Builder
         */
        public Builder duration(Double duration) {
            this.duration = duration;
            return this;
        }

        /**
         * Setter for confidence.
         * @param  confidence  Double value for confidence.
         * @return Builder
         */
        public Builder confidence(Double confidence) {
            this.confidence = confidence;
            return this;
        }

        /**
         * Setter for loudness.
         * @param  loudness  Double value for loudness.
         * @return Builder
         */
        public Builder loudness(Double loudness) {
            this.loudness = loudness;
            return this;
        }

        /**
         * Setter for tempo.
         * @param  tempo  Double value for tempo.
         * @return Builder
         */
        public Builder tempo(Double tempo) {
            this.tempo = tempo;
            return this;
        }

        /**
         * Setter for tempoConfidence.
         * @param  tempoConfidence  Double value for tempoConfidence.
         * @return Builder
         */
        public Builder tempoConfidence(Double tempoConfidence) {
            this.tempoConfidence = tempoConfidence;
            return this;
        }

        /**
         * Setter for key.
         * @param  key  Integer value for key.
         * @return Builder
         */
        public Builder key(Integer key) {
            this.key = key;
            return this;
        }

        /**
         * Setter for keyConfidence.
         * @param  keyConfidence  Double value for keyConfidence.
         * @return Builder
         */
        public Builder keyConfidence(Double keyConfidence) {
            this.keyConfidence = keyConfidence;
            return this;
        }

        /**
         * Setter for mode.
         * @param  mode  ModeEnum value for mode.
         * @return Builder
         */
        public Builder mode(ModeEnum mode) {
            this.mode = mode;
            return this;
        }

        /**
         * Setter for modeConfidence.
         * @param  modeConfidence  Double value for modeConfidence.
         * @return Builder
         */
        public Builder modeConfidence(Double modeConfidence) {
            this.modeConfidence = modeConfidence;
            return this;
        }

        /**
         * Setter for timeSignature.
         * @param  timeSignature  Integer value for timeSignature.
         * @return Builder
         */
        public Builder timeSignature(Integer timeSignature) {
            this.timeSignature = timeSignature;
            return this;
        }

        /**
         * Setter for timeSignatureConfidence.
         * @param  timeSignatureConfidence  Double value for timeSignatureConfidence.
         * @return Builder
         */
        public Builder timeSignatureConfidence(Double timeSignatureConfidence) {
            this.timeSignatureConfidence = timeSignatureConfidence;
            return this;
        }

        /**
         * Builds a new {@link SectionObject} object using the set fields.
         * @return {@link SectionObject}
         */
        public SectionObject build() {
            return new SectionObject(start, duration, confidence, loudness, tempo, tempoConfidence,
                    key, keyConfidence, mode, modeConfidence, timeSignature,
                    timeSignatureConfidence);
        }
    }
}
