/*
 * SpotifyWebAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.spotify.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import java.util.List;

/**
 * This is a model class for AlbumObject type.
 */
public class AlbumObject {
    private AlbumTypeEnum albumType;
    private int totalTracks;
    private List<String> availableMarkets;
    private ExternalUrlObject externalUrls;
    private String href;
    private String id;
    private List<ImageObject> images;
    private String name;
    private String releaseDate;
    private ReleaseDatePrecisionEnum releaseDatePrecision;
    private AlbumRestrictionObject restrictions;
    private Type2Enum type;
    private String uri;
    private List<SimplifiedArtistObject> artists;
    private PagingSimplifiedTrackObject tracks;
    private List<CopyrightObject> copyrights;
    private ExternalIdObject externalIds;
    private List<String> genres;
    private String label;
    private int popularity;

    /**
     * Default constructor.
     */
    public AlbumObject() {
    }

    /**
     * Initialization constructor.
     * @param  albumType  AlbumTypeEnum value for albumType.
     * @param  totalTracks  int value for totalTracks.
     * @param  availableMarkets  List of String value for availableMarkets.
     * @param  externalUrls  ExternalUrlObject value for externalUrls.
     * @param  href  String value for href.
     * @param  id  String value for id.
     * @param  images  List of ImageObject value for images.
     * @param  name  String value for name.
     * @param  releaseDate  String value for releaseDate.
     * @param  releaseDatePrecision  ReleaseDatePrecisionEnum value for releaseDatePrecision.
     * @param  type  Type2Enum value for type.
     * @param  uri  String value for uri.
     * @param  artists  List of SimplifiedArtistObject value for artists.
     * @param  tracks  PagingSimplifiedTrackObject value for tracks.
     * @param  copyrights  List of CopyrightObject value for copyrights.
     * @param  externalIds  ExternalIdObject value for externalIds.
     * @param  genres  List of String value for genres.
     * @param  label  String value for label.
     * @param  popularity  int value for popularity.
     * @param  restrictions  AlbumRestrictionObject value for restrictions.
     */
    public AlbumObject(
            AlbumTypeEnum albumType,
            int totalTracks,
            List<String> availableMarkets,
            ExternalUrlObject externalUrls,
            String href,
            String id,
            List<ImageObject> images,
            String name,
            String releaseDate,
            ReleaseDatePrecisionEnum releaseDatePrecision,
            Type2Enum type,
            String uri,
            List<SimplifiedArtistObject> artists,
            PagingSimplifiedTrackObject tracks,
            List<CopyrightObject> copyrights,
            ExternalIdObject externalIds,
            List<String> genres,
            String label,
            int popularity,
            AlbumRestrictionObject restrictions) {
        this.albumType = albumType;
        this.totalTracks = totalTracks;
        this.availableMarkets = availableMarkets;
        this.externalUrls = externalUrls;
        this.href = href;
        this.id = id;
        this.images = images;
        this.name = name;
        this.releaseDate = releaseDate;
        this.releaseDatePrecision = releaseDatePrecision;
        this.restrictions = restrictions;
        this.type = type;
        this.uri = uri;
        this.artists = artists;
        this.tracks = tracks;
        this.copyrights = copyrights;
        this.externalIds = externalIds;
        this.genres = genres;
        this.label = label;
        this.popularity = popularity;
    }

    /**
     * Getter for AlbumType.
     * The type of the album.
     * @return Returns the AlbumTypeEnum
     */
    @JsonGetter("album_type")
    public AlbumTypeEnum getAlbumType() {
        return albumType;
    }

    /**
     * Setter for AlbumType.
     * The type of the album.
     * @param albumType Value for AlbumTypeEnum
     */
    @JsonSetter("album_type")
    public void setAlbumType(AlbumTypeEnum albumType) {
        this.albumType = albumType;
    }

    /**
     * Getter for TotalTracks.
     * The number of tracks in the album.
     * @return Returns the int
     */
    @JsonGetter("total_tracks")
    public int getTotalTracks() {
        return totalTracks;
    }

    /**
     * Setter for TotalTracks.
     * The number of tracks in the album.
     * @param totalTracks Value for int
     */
    @JsonSetter("total_tracks")
    public void setTotalTracks(int totalTracks) {
        this.totalTracks = totalTracks;
    }

    /**
     * Getter for AvailableMarkets.
     * The markets in which the album is available: [ISO 3166-1 alpha-2 country
     * codes](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _**NOTE**: an album is considered
     * available in a market when at least 1 of its tracks is available in that market._
     * @return Returns the List of String
     */
    @JsonGetter("available_markets")
    public List<String> getAvailableMarkets() {
        return availableMarkets;
    }

    /**
     * Setter for AvailableMarkets.
     * The markets in which the album is available: [ISO 3166-1 alpha-2 country
     * codes](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _**NOTE**: an album is considered
     * available in a market when at least 1 of its tracks is available in that market._
     * @param availableMarkets Value for List of String
     */
    @JsonSetter("available_markets")
    public void setAvailableMarkets(List<String> availableMarkets) {
        this.availableMarkets = availableMarkets;
    }

    /**
     * Getter for ExternalUrls.
     * Known external URLs for this album.
     * @return Returns the ExternalUrlObject
     */
    @JsonGetter("external_urls")
    public ExternalUrlObject getExternalUrls() {
        return externalUrls;
    }

    /**
     * Setter for ExternalUrls.
     * Known external URLs for this album.
     * @param externalUrls Value for ExternalUrlObject
     */
    @JsonSetter("external_urls")
    public void setExternalUrls(ExternalUrlObject externalUrls) {
        this.externalUrls = externalUrls;
    }

    /**
     * Getter for Href.
     * A link to the Web API endpoint providing full details of the album.
     * @return Returns the String
     */
    @JsonGetter("href")
    public String getHref() {
        return href;
    }

    /**
     * Setter for Href.
     * A link to the Web API endpoint providing full details of the album.
     * @param href Value for String
     */
    @JsonSetter("href")
    public void setHref(String href) {
        this.href = href;
    }

    /**
     * Getter for Id.
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the album.
     * @return Returns the String
     */
    @JsonGetter("id")
    public String getId() {
        return id;
    }

    /**
     * Setter for Id.
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the album.
     * @param id Value for String
     */
    @JsonSetter("id")
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Getter for Images.
     * The cover art for the album in various sizes, widest first.
     * @return Returns the List of ImageObject
     */
    @JsonGetter("images")
    public List<ImageObject> getImages() {
        return images;
    }

    /**
     * Setter for Images.
     * The cover art for the album in various sizes, widest first.
     * @param images Value for List of ImageObject
     */
    @JsonSetter("images")
    public void setImages(List<ImageObject> images) {
        this.images = images;
    }

    /**
     * Getter for Name.
     * The name of the album. In case of an album takedown, the value may be an empty string.
     * @return Returns the String
     */
    @JsonGetter("name")
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * The name of the album. In case of an album takedown, the value may be an empty string.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for ReleaseDate.
     * The date the album was first released.
     * @return Returns the String
     */
    @JsonGetter("release_date")
    public String getReleaseDate() {
        return releaseDate;
    }

    /**
     * Setter for ReleaseDate.
     * The date the album was first released.
     * @param releaseDate Value for String
     */
    @JsonSetter("release_date")
    public void setReleaseDate(String releaseDate) {
        this.releaseDate = releaseDate;
    }

    /**
     * Getter for ReleaseDatePrecision.
     * The precision with which `release_date` value is known.
     * @return Returns the ReleaseDatePrecisionEnum
     */
    @JsonGetter("release_date_precision")
    public ReleaseDatePrecisionEnum getReleaseDatePrecision() {
        return releaseDatePrecision;
    }

    /**
     * Setter for ReleaseDatePrecision.
     * The precision with which `release_date` value is known.
     * @param releaseDatePrecision Value for ReleaseDatePrecisionEnum
     */
    @JsonSetter("release_date_precision")
    public void setReleaseDatePrecision(ReleaseDatePrecisionEnum releaseDatePrecision) {
        this.releaseDatePrecision = releaseDatePrecision;
    }

    /**
     * Getter for Restrictions.
     * Included in the response when a content restriction is applied.
     * @return Returns the AlbumRestrictionObject
     */
    @JsonGetter("restrictions")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public AlbumRestrictionObject getRestrictions() {
        return restrictions;
    }

    /**
     * Setter for Restrictions.
     * Included in the response when a content restriction is applied.
     * @param restrictions Value for AlbumRestrictionObject
     */
    @JsonSetter("restrictions")
    public void setRestrictions(AlbumRestrictionObject restrictions) {
        this.restrictions = restrictions;
    }

    /**
     * Getter for Type.
     * The object type.
     * @return Returns the Type2Enum
     */
    @JsonGetter("type")
    public Type2Enum getType() {
        return type;
    }

    /**
     * Setter for Type.
     * The object type.
     * @param type Value for Type2Enum
     */
    @JsonSetter("type")
    public void setType(Type2Enum type) {
        this.type = type;
    }

    /**
     * Getter for Uri.
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the album.
     * @return Returns the String
     */
    @JsonGetter("uri")
    public String getUri() {
        return uri;
    }

    /**
     * Setter for Uri.
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the album.
     * @param uri Value for String
     */
    @JsonSetter("uri")
    public void setUri(String uri) {
        this.uri = uri;
    }

    /**
     * Getter for Artists.
     * The artists of the album. Each artist object includes a link in `href` to more detailed
     * information about the artist.
     * @return Returns the List of SimplifiedArtistObject
     */
    @JsonGetter("artists")
    public List<SimplifiedArtistObject> getArtists() {
        return artists;
    }

    /**
     * Setter for Artists.
     * The artists of the album. Each artist object includes a link in `href` to more detailed
     * information about the artist.
     * @param artists Value for List of SimplifiedArtistObject
     */
    @JsonSetter("artists")
    public void setArtists(List<SimplifiedArtistObject> artists) {
        this.artists = artists;
    }

    /**
     * Getter for Tracks.
     * The tracks of the album.
     * @return Returns the PagingSimplifiedTrackObject
     */
    @JsonGetter("tracks")
    public PagingSimplifiedTrackObject getTracks() {
        return tracks;
    }

    /**
     * Setter for Tracks.
     * The tracks of the album.
     * @param tracks Value for PagingSimplifiedTrackObject
     */
    @JsonSetter("tracks")
    public void setTracks(PagingSimplifiedTrackObject tracks) {
        this.tracks = tracks;
    }

    /**
     * Getter for Copyrights.
     * The copyright statements of the album.
     * @return Returns the List of CopyrightObject
     */
    @JsonGetter("copyrights")
    public List<CopyrightObject> getCopyrights() {
        return copyrights;
    }

    /**
     * Setter for Copyrights.
     * The copyright statements of the album.
     * @param copyrights Value for List of CopyrightObject
     */
    @JsonSetter("copyrights")
    public void setCopyrights(List<CopyrightObject> copyrights) {
        this.copyrights = copyrights;
    }

    /**
     * Getter for ExternalIds.
     * Known external IDs for the album.
     * @return Returns the ExternalIdObject
     */
    @JsonGetter("external_ids")
    public ExternalIdObject getExternalIds() {
        return externalIds;
    }

    /**
     * Setter for ExternalIds.
     * Known external IDs for the album.
     * @param externalIds Value for ExternalIdObject
     */
    @JsonSetter("external_ids")
    public void setExternalIds(ExternalIdObject externalIds) {
        this.externalIds = externalIds;
    }

    /**
     * Getter for Genres.
     * A list of the genres the album is associated with. If not yet classified, the array is empty.
     * @return Returns the List of String
     */
    @JsonGetter("genres")
    public List<String> getGenres() {
        return genres;
    }

    /**
     * Setter for Genres.
     * A list of the genres the album is associated with. If not yet classified, the array is empty.
     * @param genres Value for List of String
     */
    @JsonSetter("genres")
    public void setGenres(List<String> genres) {
        this.genres = genres;
    }

    /**
     * Getter for Label.
     * The label associated with the album.
     * @return Returns the String
     */
    @JsonGetter("label")
    public String getLabel() {
        return label;
    }

    /**
     * Setter for Label.
     * The label associated with the album.
     * @param label Value for String
     */
    @JsonSetter("label")
    public void setLabel(String label) {
        this.label = label;
    }

    /**
     * Getter for Popularity.
     * The popularity of the album. The value will be between 0 and 100, with 100 being the most
     * popular.
     * @return Returns the int
     */
    @JsonGetter("popularity")
    public int getPopularity() {
        return popularity;
    }

    /**
     * Setter for Popularity.
     * The popularity of the album. The value will be between 0 and 100, with 100 being the most
     * popular.
     * @param popularity Value for int
     */
    @JsonSetter("popularity")
    public void setPopularity(int popularity) {
        this.popularity = popularity;
    }

    /**
     * Converts this AlbumObject into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "AlbumObject [" + "albumType=" + albumType + ", totalTracks=" + totalTracks
                + ", availableMarkets=" + availableMarkets + ", externalUrls=" + externalUrls
                + ", href=" + href + ", id=" + id + ", images=" + images + ", name=" + name
                + ", releaseDate=" + releaseDate + ", releaseDatePrecision=" + releaseDatePrecision
                + ", type=" + type + ", uri=" + uri + ", artists=" + artists + ", tracks=" + tracks
                + ", copyrights=" + copyrights + ", externalIds=" + externalIds + ", genres="
                + genres + ", label=" + label + ", popularity=" + popularity + ", restrictions="
                + restrictions + "]";
    }

    /**
     * Builds a new {@link AlbumObject.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link AlbumObject.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(albumType, totalTracks, availableMarkets, externalUrls, href,
                id, images, name, releaseDate, releaseDatePrecision, type, uri, artists, tracks,
                copyrights, externalIds, genres, label, popularity)
                .restrictions(getRestrictions());
        return builder;
    }

    /**
     * Class to build instances of {@link AlbumObject}.
     */
    public static class Builder {
        private AlbumTypeEnum albumType;
        private int totalTracks;
        private List<String> availableMarkets;
        private ExternalUrlObject externalUrls;
        private String href;
        private String id;
        private List<ImageObject> images;
        private String name;
        private String releaseDate;
        private ReleaseDatePrecisionEnum releaseDatePrecision;
        private Type2Enum type;
        private String uri;
        private List<SimplifiedArtistObject> artists;
        private PagingSimplifiedTrackObject tracks;
        private List<CopyrightObject> copyrights;
        private ExternalIdObject externalIds;
        private List<String> genres;
        private String label;
        private int popularity;
        private AlbumRestrictionObject restrictions;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  albumType  AlbumTypeEnum value for albumType.
         * @param  totalTracks  int value for totalTracks.
         * @param  availableMarkets  List of String value for availableMarkets.
         * @param  externalUrls  ExternalUrlObject value for externalUrls.
         * @param  href  String value for href.
         * @param  id  String value for id.
         * @param  images  List of ImageObject value for images.
         * @param  name  String value for name.
         * @param  releaseDate  String value for releaseDate.
         * @param  releaseDatePrecision  ReleaseDatePrecisionEnum value for releaseDatePrecision.
         * @param  type  Type2Enum value for type.
         * @param  uri  String value for uri.
         * @param  artists  List of SimplifiedArtistObject value for artists.
         * @param  tracks  PagingSimplifiedTrackObject value for tracks.
         * @param  copyrights  List of CopyrightObject value for copyrights.
         * @param  externalIds  ExternalIdObject value for externalIds.
         * @param  genres  List of String value for genres.
         * @param  label  String value for label.
         * @param  popularity  int value for popularity.
         */
        public Builder(AlbumTypeEnum albumType, int totalTracks, List<String> availableMarkets,
                ExternalUrlObject externalUrls, String href, String id, List<ImageObject> images,
                String name, String releaseDate, ReleaseDatePrecisionEnum releaseDatePrecision,
                Type2Enum type, String uri, List<SimplifiedArtistObject> artists,
                PagingSimplifiedTrackObject tracks, List<CopyrightObject> copyrights,
                ExternalIdObject externalIds, List<String> genres, String label, int popularity) {
            this.albumType = albumType;
            this.totalTracks = totalTracks;
            this.availableMarkets = availableMarkets;
            this.externalUrls = externalUrls;
            this.href = href;
            this.id = id;
            this.images = images;
            this.name = name;
            this.releaseDate = releaseDate;
            this.releaseDatePrecision = releaseDatePrecision;
            this.type = type;
            this.uri = uri;
            this.artists = artists;
            this.tracks = tracks;
            this.copyrights = copyrights;
            this.externalIds = externalIds;
            this.genres = genres;
            this.label = label;
            this.popularity = popularity;
        }

        /**
         * Setter for albumType.
         * @param  albumType  AlbumTypeEnum value for albumType.
         * @return Builder
         */
        public Builder albumType(AlbumTypeEnum albumType) {
            this.albumType = albumType;
            return this;
        }

        /**
         * Setter for totalTracks.
         * @param  totalTracks  int value for totalTracks.
         * @return Builder
         */
        public Builder totalTracks(int totalTracks) {
            this.totalTracks = totalTracks;
            return this;
        }

        /**
         * Setter for availableMarkets.
         * @param  availableMarkets  List of String value for availableMarkets.
         * @return Builder
         */
        public Builder availableMarkets(List<String> availableMarkets) {
            this.availableMarkets = availableMarkets;
            return this;
        }

        /**
         * Setter for externalUrls.
         * @param  externalUrls  ExternalUrlObject value for externalUrls.
         * @return Builder
         */
        public Builder externalUrls(ExternalUrlObject externalUrls) {
            this.externalUrls = externalUrls;
            return this;
        }

        /**
         * Setter for href.
         * @param  href  String value for href.
         * @return Builder
         */
        public Builder href(String href) {
            this.href = href;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  String value for id.
         * @return Builder
         */
        public Builder id(String id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for images.
         * @param  images  List of ImageObject value for images.
         * @return Builder
         */
        public Builder images(List<ImageObject> images) {
            this.images = images;
            return this;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for releaseDate.
         * @param  releaseDate  String value for releaseDate.
         * @return Builder
         */
        public Builder releaseDate(String releaseDate) {
            this.releaseDate = releaseDate;
            return this;
        }

        /**
         * Setter for releaseDatePrecision.
         * @param  releaseDatePrecision  ReleaseDatePrecisionEnum value for releaseDatePrecision.
         * @return Builder
         */
        public Builder releaseDatePrecision(ReleaseDatePrecisionEnum releaseDatePrecision) {
            this.releaseDatePrecision = releaseDatePrecision;
            return this;
        }

        /**
         * Setter for type.
         * @param  type  Type2Enum value for type.
         * @return Builder
         */
        public Builder type(Type2Enum type) {
            this.type = type;
            return this;
        }

        /**
         * Setter for uri.
         * @param  uri  String value for uri.
         * @return Builder
         */
        public Builder uri(String uri) {
            this.uri = uri;
            return this;
        }

        /**
         * Setter for artists.
         * @param  artists  List of SimplifiedArtistObject value for artists.
         * @return Builder
         */
        public Builder artists(List<SimplifiedArtistObject> artists) {
            this.artists = artists;
            return this;
        }

        /**
         * Setter for tracks.
         * @param  tracks  PagingSimplifiedTrackObject value for tracks.
         * @return Builder
         */
        public Builder tracks(PagingSimplifiedTrackObject tracks) {
            this.tracks = tracks;
            return this;
        }

        /**
         * Setter for copyrights.
         * @param  copyrights  List of CopyrightObject value for copyrights.
         * @return Builder
         */
        public Builder copyrights(List<CopyrightObject> copyrights) {
            this.copyrights = copyrights;
            return this;
        }

        /**
         * Setter for externalIds.
         * @param  externalIds  ExternalIdObject value for externalIds.
         * @return Builder
         */
        public Builder externalIds(ExternalIdObject externalIds) {
            this.externalIds = externalIds;
            return this;
        }

        /**
         * Setter for genres.
         * @param  genres  List of String value for genres.
         * @return Builder
         */
        public Builder genres(List<String> genres) {
            this.genres = genres;
            return this;
        }

        /**
         * Setter for label.
         * @param  label  String value for label.
         * @return Builder
         */
        public Builder label(String label) {
            this.label = label;
            return this;
        }

        /**
         * Setter for popularity.
         * @param  popularity  int value for popularity.
         * @return Builder
         */
        public Builder popularity(int popularity) {
            this.popularity = popularity;
            return this;
        }

        /**
         * Setter for restrictions.
         * @param  restrictions  AlbumRestrictionObject value for restrictions.
         * @return Builder
         */
        public Builder restrictions(AlbumRestrictionObject restrictions) {
            this.restrictions = restrictions;
            return this;
        }

        /**
         * Builds a new {@link AlbumObject} object using the set fields.
         * @return {@link AlbumObject}
         */
        public AlbumObject build() {
            return new AlbumObject(albumType, totalTracks, availableMarkets, externalUrls, href, id,
                    images, name, releaseDate, releaseDatePrecision, type, uri, artists, tracks,
                    copyrights, externalIds, genres, label, popularity, restrictions);
        }
    }
}
