/*
 * SpotifyWebAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.spotify.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;

/**
 * This is a model class for Meta type.
 */
public class Meta {
    private String analyzerVersion;
    private String platform;
    private String detailedStatus;
    private Integer statusCode;
    private Long timestamp;
    private Double analysisTime;
    private String inputProcess;

    /**
     * Default constructor.
     */
    public Meta() {
    }

    /**
     * Initialization constructor.
     * @param  analyzerVersion  String value for analyzerVersion.
     * @param  platform  String value for platform.
     * @param  detailedStatus  String value for detailedStatus.
     * @param  statusCode  Integer value for statusCode.
     * @param  timestamp  Long value for timestamp.
     * @param  analysisTime  Double value for analysisTime.
     * @param  inputProcess  String value for inputProcess.
     */
    public Meta(
            String analyzerVersion,
            String platform,
            String detailedStatus,
            Integer statusCode,
            Long timestamp,
            Double analysisTime,
            String inputProcess) {
        this.analyzerVersion = analyzerVersion;
        this.platform = platform;
        this.detailedStatus = detailedStatus;
        this.statusCode = statusCode;
        this.timestamp = timestamp;
        this.analysisTime = analysisTime;
        this.inputProcess = inputProcess;
    }

    /**
     * Getter for AnalyzerVersion.
     * The version of the Analyzer used to analyze this track.
     * @return Returns the String
     */
    @JsonGetter("analyzer_version")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getAnalyzerVersion() {
        return analyzerVersion;
    }

    /**
     * Setter for AnalyzerVersion.
     * The version of the Analyzer used to analyze this track.
     * @param analyzerVersion Value for String
     */
    @JsonSetter("analyzer_version")
    public void setAnalyzerVersion(String analyzerVersion) {
        this.analyzerVersion = analyzerVersion;
    }

    /**
     * Getter for Platform.
     * The platform used to read the track's audio data.
     * @return Returns the String
     */
    @JsonGetter("platform")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getPlatform() {
        return platform;
    }

    /**
     * Setter for Platform.
     * The platform used to read the track's audio data.
     * @param platform Value for String
     */
    @JsonSetter("platform")
    public void setPlatform(String platform) {
        this.platform = platform;
    }

    /**
     * Getter for DetailedStatus.
     * A detailed status code for this track. If analysis data is missing, this code may explain
     * why.
     * @return Returns the String
     */
    @JsonGetter("detailed_status")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getDetailedStatus() {
        return detailedStatus;
    }

    /**
     * Setter for DetailedStatus.
     * A detailed status code for this track. If analysis data is missing, this code may explain
     * why.
     * @param detailedStatus Value for String
     */
    @JsonSetter("detailed_status")
    public void setDetailedStatus(String detailedStatus) {
        this.detailedStatus = detailedStatus;
    }

    /**
     * Getter for StatusCode.
     * The return code of the analyzer process. 0 if successful, 1 if any errors occurred.
     * @return Returns the Integer
     */
    @JsonGetter("status_code")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getStatusCode() {
        return statusCode;
    }

    /**
     * Setter for StatusCode.
     * The return code of the analyzer process. 0 if successful, 1 if any errors occurred.
     * @param statusCode Value for Integer
     */
    @JsonSetter("status_code")
    public void setStatusCode(Integer statusCode) {
        this.statusCode = statusCode;
    }

    /**
     * Getter for Timestamp.
     * The Unix timestamp (in seconds) at which this track was analyzed.
     * @return Returns the Long
     */
    @JsonGetter("timestamp")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Long getTimestamp() {
        return timestamp;
    }

    /**
     * Setter for Timestamp.
     * The Unix timestamp (in seconds) at which this track was analyzed.
     * @param timestamp Value for Long
     */
    @JsonSetter("timestamp")
    public void setTimestamp(Long timestamp) {
        this.timestamp = timestamp;
    }

    /**
     * Getter for AnalysisTime.
     * The amount of time taken to analyze this track.
     * @return Returns the Double
     */
    @JsonGetter("analysis_time")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getAnalysisTime() {
        return analysisTime;
    }

    /**
     * Setter for AnalysisTime.
     * The amount of time taken to analyze this track.
     * @param analysisTime Value for Double
     */
    @JsonSetter("analysis_time")
    public void setAnalysisTime(Double analysisTime) {
        this.analysisTime = analysisTime;
    }

    /**
     * Getter for InputProcess.
     * The method used to read the track's audio data.
     * @return Returns the String
     */
    @JsonGetter("input_process")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getInputProcess() {
        return inputProcess;
    }

    /**
     * Setter for InputProcess.
     * The method used to read the track's audio data.
     * @param inputProcess Value for String
     */
    @JsonSetter("input_process")
    public void setInputProcess(String inputProcess) {
        this.inputProcess = inputProcess;
    }

    /**
     * Converts this Meta into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Meta [" + "analyzerVersion=" + analyzerVersion + ", platform=" + platform
                + ", detailedStatus=" + detailedStatus + ", statusCode=" + statusCode
                + ", timestamp=" + timestamp + ", analysisTime=" + analysisTime + ", inputProcess="
                + inputProcess + "]";
    }

    /**
     * Builds a new {@link Meta.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Meta.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .analyzerVersion(getAnalyzerVersion())
                .platform(getPlatform())
                .detailedStatus(getDetailedStatus())
                .statusCode(getStatusCode())
                .timestamp(getTimestamp())
                .analysisTime(getAnalysisTime())
                .inputProcess(getInputProcess());
        return builder;
    }

    /**
     * Class to build instances of {@link Meta}.
     */
    public static class Builder {
        private String analyzerVersion;
        private String platform;
        private String detailedStatus;
        private Integer statusCode;
        private Long timestamp;
        private Double analysisTime;
        private String inputProcess;



        /**
         * Setter for analyzerVersion.
         * @param  analyzerVersion  String value for analyzerVersion.
         * @return Builder
         */
        public Builder analyzerVersion(String analyzerVersion) {
            this.analyzerVersion = analyzerVersion;
            return this;
        }

        /**
         * Setter for platform.
         * @param  platform  String value for platform.
         * @return Builder
         */
        public Builder platform(String platform) {
            this.platform = platform;
            return this;
        }

        /**
         * Setter for detailedStatus.
         * @param  detailedStatus  String value for detailedStatus.
         * @return Builder
         */
        public Builder detailedStatus(String detailedStatus) {
            this.detailedStatus = detailedStatus;
            return this;
        }

        /**
         * Setter for statusCode.
         * @param  statusCode  Integer value for statusCode.
         * @return Builder
         */
        public Builder statusCode(Integer statusCode) {
            this.statusCode = statusCode;
            return this;
        }

        /**
         * Setter for timestamp.
         * @param  timestamp  Long value for timestamp.
         * @return Builder
         */
        public Builder timestamp(Long timestamp) {
            this.timestamp = timestamp;
            return this;
        }

        /**
         * Setter for analysisTime.
         * @param  analysisTime  Double value for analysisTime.
         * @return Builder
         */
        public Builder analysisTime(Double analysisTime) {
            this.analysisTime = analysisTime;
            return this;
        }

        /**
         * Setter for inputProcess.
         * @param  inputProcess  String value for inputProcess.
         * @return Builder
         */
        public Builder inputProcess(String inputProcess) {
            this.inputProcess = inputProcess;
            return this;
        }

        /**
         * Builds a new {@link Meta} object using the set fields.
         * @return {@link Meta}
         */
        public Meta build() {
            return new Meta(analyzerVersion, platform, detailedStatus, statusCode, timestamp,
                    analysisTime, inputProcess);
        }
    }
}
