/*
 * SpotifyWebAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.spotify.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import java.util.List;

/**
 * This is a model class for PrivateUserObject type.
 */
public class PrivateUserObject {
    private String country;
    private String displayName;
    private String email;
    private ExplicitContentSettingsObject explicitContent;
    private ExternalUrlObject externalUrls;
    private FollowersObject followers;
    private String href;
    private String id;
    private List<ImageObject> images;
    private String product;
    private String type;
    private String uri;

    /**
     * Default constructor.
     */
    public PrivateUserObject() {
    }

    /**
     * Initialization constructor.
     * @param  country  String value for country.
     * @param  displayName  String value for displayName.
     * @param  email  String value for email.
     * @param  explicitContent  ExplicitContentSettingsObject value for explicitContent.
     * @param  externalUrls  ExternalUrlObject value for externalUrls.
     * @param  followers  FollowersObject value for followers.
     * @param  href  String value for href.
     * @param  id  String value for id.
     * @param  images  List of ImageObject value for images.
     * @param  product  String value for product.
     * @param  type  String value for type.
     * @param  uri  String value for uri.
     */
    public PrivateUserObject(
            String country,
            String displayName,
            String email,
            ExplicitContentSettingsObject explicitContent,
            ExternalUrlObject externalUrls,
            FollowersObject followers,
            String href,
            String id,
            List<ImageObject> images,
            String product,
            String type,
            String uri) {
        this.country = country;
        this.displayName = displayName;
        this.email = email;
        this.explicitContent = explicitContent;
        this.externalUrls = externalUrls;
        this.followers = followers;
        this.href = href;
        this.id = id;
        this.images = images;
        this.product = product;
        this.type = type;
        this.uri = uri;
    }

    /**
     * Getter for Country.
     * The country of the user, as set in the user's account profile. An [ISO 3166-1 alpha-2 country
     * code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _This field is only available when
     * the current user has granted access to the
     * [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._
     * @return Returns the String
     */
    @JsonGetter("country")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getCountry() {
        return country;
    }

    /**
     * Setter for Country.
     * The country of the user, as set in the user's account profile. An [ISO 3166-1 alpha-2 country
     * code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _This field is only available when
     * the current user has granted access to the
     * [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._
     * @param country Value for String
     */
    @JsonSetter("country")
    public void setCountry(String country) {
        this.country = country;
    }

    /**
     * Getter for DisplayName.
     * The name displayed on the user's profile. `null` if not available.
     * @return Returns the String
     */
    @JsonGetter("display_name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getDisplayName() {
        return displayName;
    }

    /**
     * Setter for DisplayName.
     * The name displayed on the user's profile. `null` if not available.
     * @param displayName Value for String
     */
    @JsonSetter("display_name")
    public void setDisplayName(String displayName) {
        this.displayName = displayName;
    }

    /**
     * Getter for Email.
     * The user's email address, as entered by the user when creating their account. _**Important!**
     * This email address is unverified; there is no proof that it actually belongs to the user._
     * _This field is only available when the current user has granted access to the
     * [user-read-email](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._
     * @return Returns the String
     */
    @JsonGetter("email")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getEmail() {
        return email;
    }

    /**
     * Setter for Email.
     * The user's email address, as entered by the user when creating their account. _**Important!**
     * This email address is unverified; there is no proof that it actually belongs to the user._
     * _This field is only available when the current user has granted access to the
     * [user-read-email](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._
     * @param email Value for String
     */
    @JsonSetter("email")
    public void setEmail(String email) {
        this.email = email;
    }

    /**
     * Getter for ExplicitContent.
     * The user's explicit content settings. _This field is only available when the current user has
     * granted access to the
     * [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._
     * @return Returns the ExplicitContentSettingsObject
     */
    @JsonGetter("explicit_content")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ExplicitContentSettingsObject getExplicitContent() {
        return explicitContent;
    }

    /**
     * Setter for ExplicitContent.
     * The user's explicit content settings. _This field is only available when the current user has
     * granted access to the
     * [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._
     * @param explicitContent Value for ExplicitContentSettingsObject
     */
    @JsonSetter("explicit_content")
    public void setExplicitContent(ExplicitContentSettingsObject explicitContent) {
        this.explicitContent = explicitContent;
    }

    /**
     * Getter for ExternalUrls.
     * Known external URLs for this user.
     * @return Returns the ExternalUrlObject
     */
    @JsonGetter("external_urls")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ExternalUrlObject getExternalUrls() {
        return externalUrls;
    }

    /**
     * Setter for ExternalUrls.
     * Known external URLs for this user.
     * @param externalUrls Value for ExternalUrlObject
     */
    @JsonSetter("external_urls")
    public void setExternalUrls(ExternalUrlObject externalUrls) {
        this.externalUrls = externalUrls;
    }

    /**
     * Getter for Followers.
     * Information about the followers of the user.
     * @return Returns the FollowersObject
     */
    @JsonGetter("followers")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public FollowersObject getFollowers() {
        return followers;
    }

    /**
     * Setter for Followers.
     * Information about the followers of the user.
     * @param followers Value for FollowersObject
     */
    @JsonSetter("followers")
    public void setFollowers(FollowersObject followers) {
        this.followers = followers;
    }

    /**
     * Getter for Href.
     * A link to the Web API endpoint for this user.
     * @return Returns the String
     */
    @JsonGetter("href")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getHref() {
        return href;
    }

    /**
     * Setter for Href.
     * A link to the Web API endpoint for this user.
     * @param href Value for String
     */
    @JsonSetter("href")
    public void setHref(String href) {
        this.href = href;
    }

    /**
     * Getter for Id.
     * The [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids) for the user.
     * @return Returns the String
     */
    @JsonGetter("id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getId() {
        return id;
    }

    /**
     * Setter for Id.
     * The [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids) for the user.
     * @param id Value for String
     */
    @JsonSetter("id")
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Getter for Images.
     * The user's profile image.
     * @return Returns the List of ImageObject
     */
    @JsonGetter("images")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<ImageObject> getImages() {
        return images;
    }

    /**
     * Setter for Images.
     * The user's profile image.
     * @param images Value for List of ImageObject
     */
    @JsonSetter("images")
    public void setImages(List<ImageObject> images) {
        this.images = images;
    }

    /**
     * Getter for Product.
     * The user's Spotify subscription level: "premium", "free", etc. (The subscription level "open"
     * can be considered the same as "free".) _This field is only available when the current user
     * has granted access to the
     * [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._
     * @return Returns the String
     */
    @JsonGetter("product")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getProduct() {
        return product;
    }

    /**
     * Setter for Product.
     * The user's Spotify subscription level: "premium", "free", etc. (The subscription level "open"
     * can be considered the same as "free".) _This field is only available when the current user
     * has granted access to the
     * [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._
     * @param product Value for String
     */
    @JsonSetter("product")
    public void setProduct(String product) {
        this.product = product;
    }

    /**
     * Getter for Type.
     * The object type: "user"
     * @return Returns the String
     */
    @JsonGetter("type")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getType() {
        return type;
    }

    /**
     * Setter for Type.
     * The object type: "user"
     * @param type Value for String
     */
    @JsonSetter("type")
    public void setType(String type) {
        this.type = type;
    }

    /**
     * Getter for Uri.
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the user.
     * @return Returns the String
     */
    @JsonGetter("uri")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getUri() {
        return uri;
    }

    /**
     * Setter for Uri.
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the user.
     * @param uri Value for String
     */
    @JsonSetter("uri")
    public void setUri(String uri) {
        this.uri = uri;
    }

    /**
     * Converts this PrivateUserObject into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "PrivateUserObject [" + "country=" + country + ", displayName=" + displayName
                + ", email=" + email + ", explicitContent=" + explicitContent + ", externalUrls="
                + externalUrls + ", followers=" + followers + ", href=" + href + ", id=" + id
                + ", images=" + images + ", product=" + product + ", type=" + type + ", uri=" + uri
                + "]";
    }

    /**
     * Builds a new {@link PrivateUserObject.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link PrivateUserObject.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .country(getCountry())
                .displayName(getDisplayName())
                .email(getEmail())
                .explicitContent(getExplicitContent())
                .externalUrls(getExternalUrls())
                .followers(getFollowers())
                .href(getHref())
                .id(getId())
                .images(getImages())
                .product(getProduct())
                .type(getType())
                .uri(getUri());
        return builder;
    }

    /**
     * Class to build instances of {@link PrivateUserObject}.
     */
    public static class Builder {
        private String country;
        private String displayName;
        private String email;
        private ExplicitContentSettingsObject explicitContent;
        private ExternalUrlObject externalUrls;
        private FollowersObject followers;
        private String href;
        private String id;
        private List<ImageObject> images;
        private String product;
        private String type;
        private String uri;



        /**
         * Setter for country.
         * @param  country  String value for country.
         * @return Builder
         */
        public Builder country(String country) {
            this.country = country;
            return this;
        }

        /**
         * Setter for displayName.
         * @param  displayName  String value for displayName.
         * @return Builder
         */
        public Builder displayName(String displayName) {
            this.displayName = displayName;
            return this;
        }

        /**
         * Setter for email.
         * @param  email  String value for email.
         * @return Builder
         */
        public Builder email(String email) {
            this.email = email;
            return this;
        }

        /**
         * Setter for explicitContent.
         * @param  explicitContent  ExplicitContentSettingsObject value for explicitContent.
         * @return Builder
         */
        public Builder explicitContent(ExplicitContentSettingsObject explicitContent) {
            this.explicitContent = explicitContent;
            return this;
        }

        /**
         * Setter for externalUrls.
         * @param  externalUrls  ExternalUrlObject value for externalUrls.
         * @return Builder
         */
        public Builder externalUrls(ExternalUrlObject externalUrls) {
            this.externalUrls = externalUrls;
            return this;
        }

        /**
         * Setter for followers.
         * @param  followers  FollowersObject value for followers.
         * @return Builder
         */
        public Builder followers(FollowersObject followers) {
            this.followers = followers;
            return this;
        }

        /**
         * Setter for href.
         * @param  href  String value for href.
         * @return Builder
         */
        public Builder href(String href) {
            this.href = href;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  String value for id.
         * @return Builder
         */
        public Builder id(String id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for images.
         * @param  images  List of ImageObject value for images.
         * @return Builder
         */
        public Builder images(List<ImageObject> images) {
            this.images = images;
            return this;
        }

        /**
         * Setter for product.
         * @param  product  String value for product.
         * @return Builder
         */
        public Builder product(String product) {
            this.product = product;
            return this;
        }

        /**
         * Setter for type.
         * @param  type  String value for type.
         * @return Builder
         */
        public Builder type(String type) {
            this.type = type;
            return this;
        }

        /**
         * Setter for uri.
         * @param  uri  String value for uri.
         * @return Builder
         */
        public Builder uri(String uri) {
            this.uri = uri;
            return this;
        }

        /**
         * Builds a new {@link PrivateUserObject} object using the set fields.
         * @return {@link PrivateUserObject}
         */
        public PrivateUserObject build() {
            return new PrivateUserObject(country, displayName, email, explicitContent, externalUrls,
                    followers, href, id, images, product, type, uri);
        }
    }
}
