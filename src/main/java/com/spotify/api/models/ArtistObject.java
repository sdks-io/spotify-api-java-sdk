/*
 * SpotifyWebAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.spotify.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import java.util.List;

/**
 * This is a model class for ArtistObject type.
 */
public class ArtistObject {
    private ExternalUrlObject externalUrls;
    private FollowersObject followers;
    private List<String> genres;
    private String href;
    private String id;
    private List<ImageObject> images;
    private String name;
    private Integer popularity;
    private TypeEnum type;
    private String uri;

    /**
     * Default constructor.
     */
    public ArtistObject() {
    }

    /**
     * Initialization constructor.
     * @param  externalUrls  ExternalUrlObject value for externalUrls.
     * @param  followers  FollowersObject value for followers.
     * @param  genres  List of String value for genres.
     * @param  href  String value for href.
     * @param  id  String value for id.
     * @param  images  List of ImageObject value for images.
     * @param  name  String value for name.
     * @param  popularity  Integer value for popularity.
     * @param  type  TypeEnum value for type.
     * @param  uri  String value for uri.
     */
    public ArtistObject(
            ExternalUrlObject externalUrls,
            FollowersObject followers,
            List<String> genres,
            String href,
            String id,
            List<ImageObject> images,
            String name,
            Integer popularity,
            TypeEnum type,
            String uri) {
        this.externalUrls = externalUrls;
        this.followers = followers;
        this.genres = genres;
        this.href = href;
        this.id = id;
        this.images = images;
        this.name = name;
        this.popularity = popularity;
        this.type = type;
        this.uri = uri;
    }

    /**
     * Getter for ExternalUrls.
     * Known external URLs for this artist.
     * @return Returns the ExternalUrlObject
     */
    @JsonGetter("external_urls")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ExternalUrlObject getExternalUrls() {
        return externalUrls;
    }

    /**
     * Setter for ExternalUrls.
     * Known external URLs for this artist.
     * @param externalUrls Value for ExternalUrlObject
     */
    @JsonSetter("external_urls")
    public void setExternalUrls(ExternalUrlObject externalUrls) {
        this.externalUrls = externalUrls;
    }

    /**
     * Getter for Followers.
     * Information about the followers of the artist.
     * @return Returns the FollowersObject
     */
    @JsonGetter("followers")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public FollowersObject getFollowers() {
        return followers;
    }

    /**
     * Setter for Followers.
     * Information about the followers of the artist.
     * @param followers Value for FollowersObject
     */
    @JsonSetter("followers")
    public void setFollowers(FollowersObject followers) {
        this.followers = followers;
    }

    /**
     * Getter for Genres.
     * A list of the genres the artist is associated with. If not yet classified, the array is
     * empty.
     * @return Returns the List of String
     */
    @JsonGetter("genres")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<String> getGenres() {
        return genres;
    }

    /**
     * Setter for Genres.
     * A list of the genres the artist is associated with. If not yet classified, the array is
     * empty.
     * @param genres Value for List of String
     */
    @JsonSetter("genres")
    public void setGenres(List<String> genres) {
        this.genres = genres;
    }

    /**
     * Getter for Href.
     * A link to the Web API endpoint providing full details of the artist.
     * @return Returns the String
     */
    @JsonGetter("href")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getHref() {
        return href;
    }

    /**
     * Setter for Href.
     * A link to the Web API endpoint providing full details of the artist.
     * @param href Value for String
     */
    @JsonSetter("href")
    public void setHref(String href) {
        this.href = href;
    }

    /**
     * Getter for Id.
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the artist.
     * @return Returns the String
     */
    @JsonGetter("id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getId() {
        return id;
    }

    /**
     * Setter for Id.
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the artist.
     * @param id Value for String
     */
    @JsonSetter("id")
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Getter for Images.
     * Images of the artist in various sizes, widest first.
     * @return Returns the List of ImageObject
     */
    @JsonGetter("images")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<ImageObject> getImages() {
        return images;
    }

    /**
     * Setter for Images.
     * Images of the artist in various sizes, widest first.
     * @param images Value for List of ImageObject
     */
    @JsonSetter("images")
    public void setImages(List<ImageObject> images) {
        this.images = images;
    }

    /**
     * Getter for Name.
     * The name of the artist.
     * @return Returns the String
     */
    @JsonGetter("name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * The name of the artist.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for Popularity.
     * The popularity of the artist. The value will be between 0 and 100, with 100 being the most
     * popular. The artist's popularity is calculated from the popularity of all the artist's
     * tracks.
     * @return Returns the Integer
     */
    @JsonGetter("popularity")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getPopularity() {
        return popularity;
    }

    /**
     * Setter for Popularity.
     * The popularity of the artist. The value will be between 0 and 100, with 100 being the most
     * popular. The artist's popularity is calculated from the popularity of all the artist's
     * tracks.
     * @param popularity Value for Integer
     */
    @JsonSetter("popularity")
    public void setPopularity(Integer popularity) {
        this.popularity = popularity;
    }

    /**
     * Getter for Type.
     * The object type.
     * @return Returns the TypeEnum
     */
    @JsonGetter("type")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public TypeEnum getType() {
        return type;
    }

    /**
     * Setter for Type.
     * The object type.
     * @param type Value for TypeEnum
     */
    @JsonSetter("type")
    public void setType(TypeEnum type) {
        this.type = type;
    }

    /**
     * Getter for Uri.
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the artist.
     * @return Returns the String
     */
    @JsonGetter("uri")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getUri() {
        return uri;
    }

    /**
     * Setter for Uri.
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the artist.
     * @param uri Value for String
     */
    @JsonSetter("uri")
    public void setUri(String uri) {
        this.uri = uri;
    }

    /**
     * Converts this ArtistObject into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "ArtistObject [" + "externalUrls=" + externalUrls + ", followers=" + followers
                + ", genres=" + genres + ", href=" + href + ", id=" + id + ", images=" + images
                + ", name=" + name + ", popularity=" + popularity + ", type=" + type + ", uri="
                + uri + "]";
    }

    /**
     * Builds a new {@link ArtistObject.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link ArtistObject.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .externalUrls(getExternalUrls())
                .followers(getFollowers())
                .genres(getGenres())
                .href(getHref())
                .id(getId())
                .images(getImages())
                .name(getName())
                .popularity(getPopularity())
                .type(getType())
                .uri(getUri());
        return builder;
    }

    /**
     * Class to build instances of {@link ArtistObject}.
     */
    public static class Builder {
        private ExternalUrlObject externalUrls;
        private FollowersObject followers;
        private List<String> genres;
        private String href;
        private String id;
        private List<ImageObject> images;
        private String name;
        private Integer popularity;
        private TypeEnum type;
        private String uri;



        /**
         * Setter for externalUrls.
         * @param  externalUrls  ExternalUrlObject value for externalUrls.
         * @return Builder
         */
        public Builder externalUrls(ExternalUrlObject externalUrls) {
            this.externalUrls = externalUrls;
            return this;
        }

        /**
         * Setter for followers.
         * @param  followers  FollowersObject value for followers.
         * @return Builder
         */
        public Builder followers(FollowersObject followers) {
            this.followers = followers;
            return this;
        }

        /**
         * Setter for genres.
         * @param  genres  List of String value for genres.
         * @return Builder
         */
        public Builder genres(List<String> genres) {
            this.genres = genres;
            return this;
        }

        /**
         * Setter for href.
         * @param  href  String value for href.
         * @return Builder
         */
        public Builder href(String href) {
            this.href = href;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  String value for id.
         * @return Builder
         */
        public Builder id(String id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for images.
         * @param  images  List of ImageObject value for images.
         * @return Builder
         */
        public Builder images(List<ImageObject> images) {
            this.images = images;
            return this;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for popularity.
         * @param  popularity  Integer value for popularity.
         * @return Builder
         */
        public Builder popularity(Integer popularity) {
            this.popularity = popularity;
            return this;
        }

        /**
         * Setter for type.
         * @param  type  TypeEnum value for type.
         * @return Builder
         */
        public Builder type(TypeEnum type) {
            this.type = type;
            return this;
        }

        /**
         * Setter for uri.
         * @param  uri  String value for uri.
         * @return Builder
         */
        public Builder uri(String uri) {
            this.uri = uri;
            return this;
        }

        /**
         * Builds a new {@link ArtistObject} object using the set fields.
         * @return {@link ArtistObject}
         */
        public ArtistObject build() {
            return new ArtistObject(externalUrls, followers, genres, href, id, images, name,
                    popularity, type, uri);
        }
    }
}
