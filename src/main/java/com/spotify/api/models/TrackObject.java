/*
 * SpotifyWebAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.spotify.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;
import java.util.List;

/**
 * This is a model class for TrackObject type.
 */
public class TrackObject {
    private SimplifiedAlbumObject album;
    private List<ArtistObject> artists;
    private List<String> availableMarkets;
    private Integer discNumber;
    private Integer durationMs;
    private Boolean explicit;
    private ExternalIdObject externalIds;
    private ExternalUrlObject externalUrls;
    private String href;
    private String id;
    private Boolean isPlayable;
    private LinkedTrackObject linkedFrom;
    private TrackRestrictionObject restrictions;
    private String name;
    private Integer popularity;
    private OptionalNullable<String> previewUrl;
    private Integer trackNumber;
    private Type3Enum type;
    private String uri;
    private Boolean isLocal;

    /**
     * Default constructor.
     */
    public TrackObject() {
    }

    /**
     * Initialization constructor.
     * @param  album  SimplifiedAlbumObject value for album.
     * @param  artists  List of ArtistObject value for artists.
     * @param  availableMarkets  List of String value for availableMarkets.
     * @param  discNumber  Integer value for discNumber.
     * @param  durationMs  Integer value for durationMs.
     * @param  explicit  Boolean value for explicit.
     * @param  externalIds  ExternalIdObject value for externalIds.
     * @param  externalUrls  ExternalUrlObject value for externalUrls.
     * @param  href  String value for href.
     * @param  id  String value for id.
     * @param  isPlayable  Boolean value for isPlayable.
     * @param  linkedFrom  LinkedTrackObject value for linkedFrom.
     * @param  restrictions  TrackRestrictionObject value for restrictions.
     * @param  name  String value for name.
     * @param  popularity  Integer value for popularity.
     * @param  previewUrl  String value for previewUrl.
     * @param  trackNumber  Integer value for trackNumber.
     * @param  type  Type3Enum value for type.
     * @param  uri  String value for uri.
     * @param  isLocal  Boolean value for isLocal.
     */
    public TrackObject(
            SimplifiedAlbumObject album,
            List<ArtistObject> artists,
            List<String> availableMarkets,
            Integer discNumber,
            Integer durationMs,
            Boolean explicit,
            ExternalIdObject externalIds,
            ExternalUrlObject externalUrls,
            String href,
            String id,
            Boolean isPlayable,
            LinkedTrackObject linkedFrom,
            TrackRestrictionObject restrictions,
            String name,
            Integer popularity,
            String previewUrl,
            Integer trackNumber,
            Type3Enum type,
            String uri,
            Boolean isLocal) {
        this.album = album;
        this.artists = artists;
        this.availableMarkets = availableMarkets;
        this.discNumber = discNumber;
        this.durationMs = durationMs;
        this.explicit = explicit;
        this.externalIds = externalIds;
        this.externalUrls = externalUrls;
        this.href = href;
        this.id = id;
        this.isPlayable = isPlayable;
        this.linkedFrom = linkedFrom;
        this.restrictions = restrictions;
        this.name = name;
        this.popularity = popularity;
        this.previewUrl = OptionalNullable.of(previewUrl);
        this.trackNumber = trackNumber;
        this.type = type;
        this.uri = uri;
        this.isLocal = isLocal;
    }

    /**
     * Initialization constructor.
     * @param  album  SimplifiedAlbumObject value for album.
     * @param  artists  List of ArtistObject value for artists.
     * @param  availableMarkets  List of String value for availableMarkets.
     * @param  discNumber  Integer value for discNumber.
     * @param  durationMs  Integer value for durationMs.
     * @param  explicit  Boolean value for explicit.
     * @param  externalIds  ExternalIdObject value for externalIds.
     * @param  externalUrls  ExternalUrlObject value for externalUrls.
     * @param  href  String value for href.
     * @param  id  String value for id.
     * @param  isPlayable  Boolean value for isPlayable.
     * @param  linkedFrom  LinkedTrackObject value for linkedFrom.
     * @param  restrictions  TrackRestrictionObject value for restrictions.
     * @param  name  String value for name.
     * @param  popularity  Integer value for popularity.
     * @param  previewUrl  String value for previewUrl.
     * @param  trackNumber  Integer value for trackNumber.
     * @param  type  Type3Enum value for type.
     * @param  uri  String value for uri.
     * @param  isLocal  Boolean value for isLocal.
     */

    protected TrackObject(SimplifiedAlbumObject album, List<ArtistObject> artists,
            List<String> availableMarkets, Integer discNumber, Integer durationMs, Boolean explicit,
            ExternalIdObject externalIds, ExternalUrlObject externalUrls, String href, String id,
            Boolean isPlayable, LinkedTrackObject linkedFrom, TrackRestrictionObject restrictions,
            String name, Integer popularity, OptionalNullable<String> previewUrl,
            Integer trackNumber, Type3Enum type, String uri, Boolean isLocal) {
        this.album = album;
        this.artists = artists;
        this.availableMarkets = availableMarkets;
        this.discNumber = discNumber;
        this.durationMs = durationMs;
        this.explicit = explicit;
        this.externalIds = externalIds;
        this.externalUrls = externalUrls;
        this.href = href;
        this.id = id;
        this.isPlayable = isPlayable;
        this.linkedFrom = linkedFrom;
        this.restrictions = restrictions;
        this.name = name;
        this.popularity = popularity;
        this.previewUrl = previewUrl;
        this.trackNumber = trackNumber;
        this.type = type;
        this.uri = uri;
        this.isLocal = isLocal;
    }

    /**
     * Getter for Album.
     * The album on which the track appears. The album object includes a link in `href` to full
     * information about the album.
     * @return Returns the SimplifiedAlbumObject
     */
    @JsonGetter("album")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public SimplifiedAlbumObject getAlbum() {
        return album;
    }

    /**
     * Setter for Album.
     * The album on which the track appears. The album object includes a link in `href` to full
     * information about the album.
     * @param album Value for SimplifiedAlbumObject
     */
    @JsonSetter("album")
    public void setAlbum(SimplifiedAlbumObject album) {
        this.album = album;
    }

    /**
     * Getter for Artists.
     * The artists who performed the track. Each artist object includes a link in `href` to more
     * detailed information about the artist.
     * @return Returns the List of ArtistObject
     */
    @JsonGetter("artists")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<ArtistObject> getArtists() {
        return artists;
    }

    /**
     * Setter for Artists.
     * The artists who performed the track. Each artist object includes a link in `href` to more
     * detailed information about the artist.
     * @param artists Value for List of ArtistObject
     */
    @JsonSetter("artists")
    public void setArtists(List<ArtistObject> artists) {
        this.artists = artists;
    }

    /**
     * Getter for AvailableMarkets.
     * A list of the countries in which the track can be played, identified by their [ISO 3166-1
     * alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.
     * @return Returns the List of String
     */
    @JsonGetter("available_markets")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<String> getAvailableMarkets() {
        return availableMarkets;
    }

    /**
     * Setter for AvailableMarkets.
     * A list of the countries in which the track can be played, identified by their [ISO 3166-1
     * alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.
     * @param availableMarkets Value for List of String
     */
    @JsonSetter("available_markets")
    public void setAvailableMarkets(List<String> availableMarkets) {
        this.availableMarkets = availableMarkets;
    }

    /**
     * Getter for DiscNumber.
     * The disc number (usually `1` unless the album consists of more than one disc).
     * @return Returns the Integer
     */
    @JsonGetter("disc_number")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getDiscNumber() {
        return discNumber;
    }

    /**
     * Setter for DiscNumber.
     * The disc number (usually `1` unless the album consists of more than one disc).
     * @param discNumber Value for Integer
     */
    @JsonSetter("disc_number")
    public void setDiscNumber(Integer discNumber) {
        this.discNumber = discNumber;
    }

    /**
     * Getter for DurationMs.
     * The track length in milliseconds.
     * @return Returns the Integer
     */
    @JsonGetter("duration_ms")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getDurationMs() {
        return durationMs;
    }

    /**
     * Setter for DurationMs.
     * The track length in milliseconds.
     * @param durationMs Value for Integer
     */
    @JsonSetter("duration_ms")
    public void setDurationMs(Integer durationMs) {
        this.durationMs = durationMs;
    }

    /**
     * Getter for Explicit.
     * Whether or not the track has explicit lyrics ( `true` = yes it does; `false` = no it does not
     * OR unknown).
     * @return Returns the Boolean
     */
    @JsonGetter("explicit")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getExplicit() {
        return explicit;
    }

    /**
     * Setter for Explicit.
     * Whether or not the track has explicit lyrics ( `true` = yes it does; `false` = no it does not
     * OR unknown).
     * @param explicit Value for Boolean
     */
    @JsonSetter("explicit")
    public void setExplicit(Boolean explicit) {
        this.explicit = explicit;
    }

    /**
     * Getter for ExternalIds.
     * Known external IDs for the track.
     * @return Returns the ExternalIdObject
     */
    @JsonGetter("external_ids")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ExternalIdObject getExternalIds() {
        return externalIds;
    }

    /**
     * Setter for ExternalIds.
     * Known external IDs for the track.
     * @param externalIds Value for ExternalIdObject
     */
    @JsonSetter("external_ids")
    public void setExternalIds(ExternalIdObject externalIds) {
        this.externalIds = externalIds;
    }

    /**
     * Getter for ExternalUrls.
     * Known external URLs for this track.
     * @return Returns the ExternalUrlObject
     */
    @JsonGetter("external_urls")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ExternalUrlObject getExternalUrls() {
        return externalUrls;
    }

    /**
     * Setter for ExternalUrls.
     * Known external URLs for this track.
     * @param externalUrls Value for ExternalUrlObject
     */
    @JsonSetter("external_urls")
    public void setExternalUrls(ExternalUrlObject externalUrls) {
        this.externalUrls = externalUrls;
    }

    /**
     * Getter for Href.
     * A link to the Web API endpoint providing full details of the track.
     * @return Returns the String
     */
    @JsonGetter("href")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getHref() {
        return href;
    }

    /**
     * Setter for Href.
     * A link to the Web API endpoint providing full details of the track.
     * @param href Value for String
     */
    @JsonSetter("href")
    public void setHref(String href) {
        this.href = href;
    }

    /**
     * Getter for Id.
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the track.
     * @return Returns the String
     */
    @JsonGetter("id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getId() {
        return id;
    }

    /**
     * Setter for Id.
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the track.
     * @param id Value for String
     */
    @JsonSetter("id")
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Getter for IsPlayable.
     * Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking)
     * is applied. If `true`, the track is playable in the given market. Otherwise `false`.
     * @return Returns the Boolean
     */
    @JsonGetter("is_playable")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getIsPlayable() {
        return isPlayable;
    }

    /**
     * Setter for IsPlayable.
     * Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking)
     * is applied. If `true`, the track is playable in the given market. Otherwise `false`.
     * @param isPlayable Value for Boolean
     */
    @JsonSetter("is_playable")
    public void setIsPlayable(Boolean isPlayable) {
        this.isPlayable = isPlayable;
    }

    /**
     * Getter for LinkedFrom.
     * Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking)
     * is applied, and the requested track has been replaced with different track. The track in the
     * `linked_from` object contains information about the originally requested track.
     * @return Returns the LinkedTrackObject
     */
    @JsonGetter("linked_from")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public LinkedTrackObject getLinkedFrom() {
        return linkedFrom;
    }

    /**
     * Setter for LinkedFrom.
     * Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking)
     * is applied, and the requested track has been replaced with different track. The track in the
     * `linked_from` object contains information about the originally requested track.
     * @param linkedFrom Value for LinkedTrackObject
     */
    @JsonSetter("linked_from")
    public void setLinkedFrom(LinkedTrackObject linkedFrom) {
        this.linkedFrom = linkedFrom;
    }

    /**
     * Getter for Restrictions.
     * Included in the response when a content restriction is applied.
     * @return Returns the TrackRestrictionObject
     */
    @JsonGetter("restrictions")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public TrackRestrictionObject getRestrictions() {
        return restrictions;
    }

    /**
     * Setter for Restrictions.
     * Included in the response when a content restriction is applied.
     * @param restrictions Value for TrackRestrictionObject
     */
    @JsonSetter("restrictions")
    public void setRestrictions(TrackRestrictionObject restrictions) {
        this.restrictions = restrictions;
    }

    /**
     * Getter for Name.
     * The name of the track.
     * @return Returns the String
     */
    @JsonGetter("name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * The name of the track.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for Popularity.
     * The popularity of the track. The value will be between 0 and 100, with 100 being the most
     * popular.&lt;br/&gt;The popularity of a track is a value between 0 and 100, with 100 being the most
     * popular. The popularity is calculated by algorithm and is based, in the most part, on the
     * total number of plays the track has had and how recent those plays are.&lt;br/&gt;Generally
     * speaking, songs that are being played a lot now will have a higher popularity than songs that
     * were played a lot in the past. Duplicate tracks (e.g. the same track from a single and an
     * album) are rated independently. Artist and album popularity is derived mathematically from
     * track popularity. _**Note**: the popularity value may lag actual popularity by a few days:
     * the value is not updated in real time._
     * @return Returns the Integer
     */
    @JsonGetter("popularity")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getPopularity() {
        return popularity;
    }

    /**
     * Setter for Popularity.
     * The popularity of the track. The value will be between 0 and 100, with 100 being the most
     * popular.&lt;br/&gt;The popularity of a track is a value between 0 and 100, with 100 being the most
     * popular. The popularity is calculated by algorithm and is based, in the most part, on the
     * total number of plays the track has had and how recent those plays are.&lt;br/&gt;Generally
     * speaking, songs that are being played a lot now will have a higher popularity than songs that
     * were played a lot in the past. Duplicate tracks (e.g. the same track from a single and an
     * album) are rated independently. Artist and album popularity is derived mathematically from
     * track popularity. _**Note**: the popularity value may lag actual popularity by a few days:
     * the value is not updated in real time._
     * @param popularity Value for Integer
     */
    @JsonSetter("popularity")
    public void setPopularity(Integer popularity) {
        this.popularity = popularity;
    }

    /**
     * Internal Getter for PreviewUrl.
     * A link to a 30 second preview (MP3 format) of the track. Can be `null`
     * @return Returns the Internal String
     */
    @JsonGetter("preview_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPreviewUrl() {
        return this.previewUrl;
    }

    /**
     * Getter for PreviewUrl.
     * A link to a 30 second preview (MP3 format) of the track. Can be `null`
     * @return Returns the String
     */
    public String getPreviewUrl() {
        return OptionalNullable.getFrom(previewUrl);
    }

    /**
     * Setter for PreviewUrl.
     * A link to a 30 second preview (MP3 format) of the track. Can be `null`
     * @param previewUrl Value for String
     */
    @JsonSetter("preview_url")
    public void setPreviewUrl(String previewUrl) {
        this.previewUrl = OptionalNullable.of(previewUrl);
    }

    /**
     * UnSetter for PreviewUrl.
     * A link to a 30 second preview (MP3 format) of the track. Can be `null`
     */
    public void unsetPreviewUrl() {
        previewUrl = null;
    }

    /**
     * Getter for TrackNumber.
     * The number of the track. If an album has several discs, the track number is the number on the
     * specified disc.
     * @return Returns the Integer
     */
    @JsonGetter("track_number")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getTrackNumber() {
        return trackNumber;
    }

    /**
     * Setter for TrackNumber.
     * The number of the track. If an album has several discs, the track number is the number on the
     * specified disc.
     * @param trackNumber Value for Integer
     */
    @JsonSetter("track_number")
    public void setTrackNumber(Integer trackNumber) {
        this.trackNumber = trackNumber;
    }

    /**
     * Getter for Type.
     * The object type: "track".
     * @return Returns the Type3Enum
     */
    @JsonGetter("type")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Type3Enum getType() {
        return type;
    }

    /**
     * Setter for Type.
     * The object type: "track".
     * @param type Value for Type3Enum
     */
    @JsonSetter("type")
    public void setType(Type3Enum type) {
        this.type = type;
    }

    /**
     * Getter for Uri.
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the track.
     * @return Returns the String
     */
    @JsonGetter("uri")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getUri() {
        return uri;
    }

    /**
     * Setter for Uri.
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the track.
     * @param uri Value for String
     */
    @JsonSetter("uri")
    public void setUri(String uri) {
        this.uri = uri;
    }

    /**
     * Getter for IsLocal.
     * Whether or not the track is from a local file.
     * @return Returns the Boolean
     */
    @JsonGetter("is_local")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getIsLocal() {
        return isLocal;
    }

    /**
     * Setter for IsLocal.
     * Whether or not the track is from a local file.
     * @param isLocal Value for Boolean
     */
    @JsonSetter("is_local")
    public void setIsLocal(Boolean isLocal) {
        this.isLocal = isLocal;
    }

    /**
     * Converts this TrackObject into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "TrackObject [" + "album=" + album + ", artists=" + artists + ", availableMarkets="
                + availableMarkets + ", discNumber=" + discNumber + ", durationMs=" + durationMs
                + ", explicit=" + explicit + ", externalIds=" + externalIds + ", externalUrls="
                + externalUrls + ", href=" + href + ", id=" + id + ", isPlayable=" + isPlayable
                + ", linkedFrom=" + linkedFrom + ", restrictions=" + restrictions + ", name=" + name
                + ", popularity=" + popularity + ", previewUrl=" + previewUrl + ", trackNumber="
                + trackNumber + ", type=" + type + ", uri=" + uri + ", isLocal=" + isLocal + "]";
    }

    /**
     * Builds a new {@link TrackObject.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link TrackObject.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .album(getAlbum())
                .artists(getArtists())
                .availableMarkets(getAvailableMarkets())
                .discNumber(getDiscNumber())
                .durationMs(getDurationMs())
                .explicit(getExplicit())
                .externalIds(getExternalIds())
                .externalUrls(getExternalUrls())
                .href(getHref())
                .id(getId())
                .isPlayable(getIsPlayable())
                .linkedFrom(getLinkedFrom())
                .restrictions(getRestrictions())
                .name(getName())
                .popularity(getPopularity())
                .trackNumber(getTrackNumber())
                .type(getType())
                .uri(getUri())
                .isLocal(getIsLocal());
        builder.previewUrl = internalGetPreviewUrl();
        return builder;
    }

    /**
     * Class to build instances of {@link TrackObject}.
     */
    public static class Builder {
        private SimplifiedAlbumObject album;
        private List<ArtistObject> artists;
        private List<String> availableMarkets;
        private Integer discNumber;
        private Integer durationMs;
        private Boolean explicit;
        private ExternalIdObject externalIds;
        private ExternalUrlObject externalUrls;
        private String href;
        private String id;
        private Boolean isPlayable;
        private LinkedTrackObject linkedFrom;
        private TrackRestrictionObject restrictions;
        private String name;
        private Integer popularity;
        private OptionalNullable<String> previewUrl;
        private Integer trackNumber;
        private Type3Enum type;
        private String uri;
        private Boolean isLocal;



        /**
         * Setter for album.
         * @param  album  SimplifiedAlbumObject value for album.
         * @return Builder
         */
        public Builder album(SimplifiedAlbumObject album) {
            this.album = album;
            return this;
        }

        /**
         * Setter for artists.
         * @param  artists  List of ArtistObject value for artists.
         * @return Builder
         */
        public Builder artists(List<ArtistObject> artists) {
            this.artists = artists;
            return this;
        }

        /**
         * Setter for availableMarkets.
         * @param  availableMarkets  List of String value for availableMarkets.
         * @return Builder
         */
        public Builder availableMarkets(List<String> availableMarkets) {
            this.availableMarkets = availableMarkets;
            return this;
        }

        /**
         * Setter for discNumber.
         * @param  discNumber  Integer value for discNumber.
         * @return Builder
         */
        public Builder discNumber(Integer discNumber) {
            this.discNumber = discNumber;
            return this;
        }

        /**
         * Setter for durationMs.
         * @param  durationMs  Integer value for durationMs.
         * @return Builder
         */
        public Builder durationMs(Integer durationMs) {
            this.durationMs = durationMs;
            return this;
        }

        /**
         * Setter for explicit.
         * @param  explicit  Boolean value for explicit.
         * @return Builder
         */
        public Builder explicit(Boolean explicit) {
            this.explicit = explicit;
            return this;
        }

        /**
         * Setter for externalIds.
         * @param  externalIds  ExternalIdObject value for externalIds.
         * @return Builder
         */
        public Builder externalIds(ExternalIdObject externalIds) {
            this.externalIds = externalIds;
            return this;
        }

        /**
         * Setter for externalUrls.
         * @param  externalUrls  ExternalUrlObject value for externalUrls.
         * @return Builder
         */
        public Builder externalUrls(ExternalUrlObject externalUrls) {
            this.externalUrls = externalUrls;
            return this;
        }

        /**
         * Setter for href.
         * @param  href  String value for href.
         * @return Builder
         */
        public Builder href(String href) {
            this.href = href;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  String value for id.
         * @return Builder
         */
        public Builder id(String id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for isPlayable.
         * @param  isPlayable  Boolean value for isPlayable.
         * @return Builder
         */
        public Builder isPlayable(Boolean isPlayable) {
            this.isPlayable = isPlayable;
            return this;
        }

        /**
         * Setter for linkedFrom.
         * @param  linkedFrom  LinkedTrackObject value for linkedFrom.
         * @return Builder
         */
        public Builder linkedFrom(LinkedTrackObject linkedFrom) {
            this.linkedFrom = linkedFrom;
            return this;
        }

        /**
         * Setter for restrictions.
         * @param  restrictions  TrackRestrictionObject value for restrictions.
         * @return Builder
         */
        public Builder restrictions(TrackRestrictionObject restrictions) {
            this.restrictions = restrictions;
            return this;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for popularity.
         * @param  popularity  Integer value for popularity.
         * @return Builder
         */
        public Builder popularity(Integer popularity) {
            this.popularity = popularity;
            return this;
        }

        /**
         * Setter for previewUrl.
         * @param  previewUrl  String value for previewUrl.
         * @return Builder
         */
        public Builder previewUrl(String previewUrl) {
            this.previewUrl = OptionalNullable.of(previewUrl);
            return this;
        }

        /**
         * UnSetter for previewUrl.
         * @return Builder
         */
        public Builder unsetPreviewUrl() {
            previewUrl = null;
            return this;
        }

        /**
         * Setter for trackNumber.
         * @param  trackNumber  Integer value for trackNumber.
         * @return Builder
         */
        public Builder trackNumber(Integer trackNumber) {
            this.trackNumber = trackNumber;
            return this;
        }

        /**
         * Setter for type.
         * @param  type  Type3Enum value for type.
         * @return Builder
         */
        public Builder type(Type3Enum type) {
            this.type = type;
            return this;
        }

        /**
         * Setter for uri.
         * @param  uri  String value for uri.
         * @return Builder
         */
        public Builder uri(String uri) {
            this.uri = uri;
            return this;
        }

        /**
         * Setter for isLocal.
         * @param  isLocal  Boolean value for isLocal.
         * @return Builder
         */
        public Builder isLocal(Boolean isLocal) {
            this.isLocal = isLocal;
            return this;
        }

        /**
         * Builds a new {@link TrackObject} object using the set fields.
         * @return {@link TrackObject}
         */
        public TrackObject build() {
            return new TrackObject(album, artists, availableMarkets, discNumber, durationMs,
                    explicit, externalIds, externalUrls, href, id, isPlayable, linkedFrom,
                    restrictions, name, popularity, previewUrl, trackNumber, type, uri, isLocal);
        }
    }
}
