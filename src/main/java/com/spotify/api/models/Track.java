/*
 * SpotifyWebAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.spotify.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;

/**
 * This is a model class for Track type.
 */
public class Track {
    private Integer numSamples;
    private Double duration;
    private String sampleMd5;
    private Integer offsetSeconds;
    private Integer windowSeconds;
    private Integer analysisSampleRate;
    private Integer analysisChannels;
    private Double endOfFadeIn;
    private Double startOfFadeOut;
    private Double loudness;
    private Double tempo;
    private Double tempoConfidence;
    private Integer timeSignature;
    private Double timeSignatureConfidence;
    private Integer key;
    private Double keyConfidence;
    private Integer mode;
    private Double modeConfidence;
    private String codestring;
    private Double codeVersion;
    private String echoprintstring;
    private Double echoprintVersion;
    private String synchstring;
    private Double synchVersion;
    private String rhythmstring;
    private Double rhythmVersion;

    /**
     * Default constructor.
     */
    public Track() {
    }

    /**
     * Initialization constructor.
     * @param  numSamples  Integer value for numSamples.
     * @param  duration  Double value for duration.
     * @param  sampleMd5  String value for sampleMd5.
     * @param  offsetSeconds  Integer value for offsetSeconds.
     * @param  windowSeconds  Integer value for windowSeconds.
     * @param  analysisSampleRate  Integer value for analysisSampleRate.
     * @param  analysisChannels  Integer value for analysisChannels.
     * @param  endOfFadeIn  Double value for endOfFadeIn.
     * @param  startOfFadeOut  Double value for startOfFadeOut.
     * @param  loudness  Double value for loudness.
     * @param  tempo  Double value for tempo.
     * @param  tempoConfidence  Double value for tempoConfidence.
     * @param  timeSignature  Integer value for timeSignature.
     * @param  timeSignatureConfidence  Double value for timeSignatureConfidence.
     * @param  key  Integer value for key.
     * @param  keyConfidence  Double value for keyConfidence.
     * @param  mode  Integer value for mode.
     * @param  modeConfidence  Double value for modeConfidence.
     * @param  codestring  String value for codestring.
     * @param  codeVersion  Double value for codeVersion.
     * @param  echoprintstring  String value for echoprintstring.
     * @param  echoprintVersion  Double value for echoprintVersion.
     * @param  synchstring  String value for synchstring.
     * @param  synchVersion  Double value for synchVersion.
     * @param  rhythmstring  String value for rhythmstring.
     * @param  rhythmVersion  Double value for rhythmVersion.
     */
    public Track(
            Integer numSamples,
            Double duration,
            String sampleMd5,
            Integer offsetSeconds,
            Integer windowSeconds,
            Integer analysisSampleRate,
            Integer analysisChannels,
            Double endOfFadeIn,
            Double startOfFadeOut,
            Double loudness,
            Double tempo,
            Double tempoConfidence,
            Integer timeSignature,
            Double timeSignatureConfidence,
            Integer key,
            Double keyConfidence,
            Integer mode,
            Double modeConfidence,
            String codestring,
            Double codeVersion,
            String echoprintstring,
            Double echoprintVersion,
            String synchstring,
            Double synchVersion,
            String rhythmstring,
            Double rhythmVersion) {
        this.numSamples = numSamples;
        this.duration = duration;
        this.sampleMd5 = sampleMd5;
        this.offsetSeconds = offsetSeconds;
        this.windowSeconds = windowSeconds;
        this.analysisSampleRate = analysisSampleRate;
        this.analysisChannels = analysisChannels;
        this.endOfFadeIn = endOfFadeIn;
        this.startOfFadeOut = startOfFadeOut;
        this.loudness = loudness;
        this.tempo = tempo;
        this.tempoConfidence = tempoConfidence;
        this.timeSignature = timeSignature;
        this.timeSignatureConfidence = timeSignatureConfidence;
        this.key = key;
        this.keyConfidence = keyConfidence;
        this.mode = mode;
        this.modeConfidence = modeConfidence;
        this.codestring = codestring;
        this.codeVersion = codeVersion;
        this.echoprintstring = echoprintstring;
        this.echoprintVersion = echoprintVersion;
        this.synchstring = synchstring;
        this.synchVersion = synchVersion;
        this.rhythmstring = rhythmstring;
        this.rhythmVersion = rhythmVersion;
    }

    /**
     * Getter for NumSamples.
     * The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
     * @return Returns the Integer
     */
    @JsonGetter("num_samples")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getNumSamples() {
        return numSamples;
    }

    /**
     * Setter for NumSamples.
     * The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
     * @param numSamples Value for Integer
     */
    @JsonSetter("num_samples")
    public void setNumSamples(Integer numSamples) {
        this.numSamples = numSamples;
    }

    /**
     * Getter for Duration.
     * Length of the track in seconds.
     * @return Returns the Double
     */
    @JsonGetter("duration")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getDuration() {
        return duration;
    }

    /**
     * Setter for Duration.
     * Length of the track in seconds.
     * @param duration Value for Double
     */
    @JsonSetter("duration")
    public void setDuration(Double duration) {
        this.duration = duration;
    }

    /**
     * Getter for SampleMd5.
     * This field will always contain the empty string.
     * @return Returns the String
     */
    @JsonGetter("sample_md5")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getSampleMd5() {
        return sampleMd5;
    }

    /**
     * Setter for SampleMd5.
     * This field will always contain the empty string.
     * @param sampleMd5 Value for String
     */
    @JsonSetter("sample_md5")
    public void setSampleMd5(String sampleMd5) {
        this.sampleMd5 = sampleMd5;
    }

    /**
     * Getter for OffsetSeconds.
     * An offset to the start of the region of the track that was analyzed. (As the entire track is
     * analyzed, this should always be 0.)
     * @return Returns the Integer
     */
    @JsonGetter("offset_seconds")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getOffsetSeconds() {
        return offsetSeconds;
    }

    /**
     * Setter for OffsetSeconds.
     * An offset to the start of the region of the track that was analyzed. (As the entire track is
     * analyzed, this should always be 0.)
     * @param offsetSeconds Value for Integer
     */
    @JsonSetter("offset_seconds")
    public void setOffsetSeconds(Integer offsetSeconds) {
        this.offsetSeconds = offsetSeconds;
    }

    /**
     * Getter for WindowSeconds.
     * The length of the region of the track was analyzed, if a subset of the track was analyzed.
     * (As the entire track is analyzed, this should always be 0.)
     * @return Returns the Integer
     */
    @JsonGetter("window_seconds")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getWindowSeconds() {
        return windowSeconds;
    }

    /**
     * Setter for WindowSeconds.
     * The length of the region of the track was analyzed, if a subset of the track was analyzed.
     * (As the entire track is analyzed, this should always be 0.)
     * @param windowSeconds Value for Integer
     */
    @JsonSetter("window_seconds")
    public void setWindowSeconds(Integer windowSeconds) {
        this.windowSeconds = windowSeconds;
    }

    /**
     * Getter for AnalysisSampleRate.
     * The sample rate used to decode and analyze this track. May differ from the actual sample rate
     * of this track available on Spotify.
     * @return Returns the Integer
     */
    @JsonGetter("analysis_sample_rate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getAnalysisSampleRate() {
        return analysisSampleRate;
    }

    /**
     * Setter for AnalysisSampleRate.
     * The sample rate used to decode and analyze this track. May differ from the actual sample rate
     * of this track available on Spotify.
     * @param analysisSampleRate Value for Integer
     */
    @JsonSetter("analysis_sample_rate")
    public void setAnalysisSampleRate(Integer analysisSampleRate) {
        this.analysisSampleRate = analysisSampleRate;
    }

    /**
     * Getter for AnalysisChannels.
     * The number of channels used for analysis. If 1, all channels are summed together to mono
     * before analysis.
     * @return Returns the Integer
     */
    @JsonGetter("analysis_channels")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getAnalysisChannels() {
        return analysisChannels;
    }

    /**
     * Setter for AnalysisChannels.
     * The number of channels used for analysis. If 1, all channels are summed together to mono
     * before analysis.
     * @param analysisChannels Value for Integer
     */
    @JsonSetter("analysis_channels")
    public void setAnalysisChannels(Integer analysisChannels) {
        this.analysisChannels = analysisChannels;
    }

    /**
     * Getter for EndOfFadeIn.
     * The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in,
     * this will be 0.0.
     * @return Returns the Double
     */
    @JsonGetter("end_of_fade_in")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getEndOfFadeIn() {
        return endOfFadeIn;
    }

    /**
     * Setter for EndOfFadeIn.
     * The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in,
     * this will be 0.0.
     * @param endOfFadeIn Value for Double
     */
    @JsonSetter("end_of_fade_in")
    public void setEndOfFadeIn(Double endOfFadeIn) {
        this.endOfFadeIn = endOfFadeIn;
    }

    /**
     * Getter for StartOfFadeOut.
     * The time, in seconds, at which the track's fade-out period starts. If the track has no
     * fade-out, this should match the track's length.
     * @return Returns the Double
     */
    @JsonGetter("start_of_fade_out")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getStartOfFadeOut() {
        return startOfFadeOut;
    }

    /**
     * Setter for StartOfFadeOut.
     * The time, in seconds, at which the track's fade-out period starts. If the track has no
     * fade-out, this should match the track's length.
     * @param startOfFadeOut Value for Double
     */
    @JsonSetter("start_of_fade_out")
    public void setStartOfFadeOut(Double startOfFadeOut) {
        this.startOfFadeOut = startOfFadeOut;
    }

    /**
     * Getter for Loudness.
     * The overall loudness of a track in decibels (dB). Loudness values are averaged across the
     * entire track and are useful for comparing relative loudness of tracks. Loudness is the
     * quality of a sound that is the primary psychological correlate of physical strength
     * (amplitude). Values typically range between -60 and 0 db.
     * @return Returns the Double
     */
    @JsonGetter("loudness")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getLoudness() {
        return loudness;
    }

    /**
     * Setter for Loudness.
     * The overall loudness of a track in decibels (dB). Loudness values are averaged across the
     * entire track and are useful for comparing relative loudness of tracks. Loudness is the
     * quality of a sound that is the primary psychological correlate of physical strength
     * (amplitude). Values typically range between -60 and 0 db.
     * @param loudness Value for Double
     */
    @JsonSetter("loudness")
    public void setLoudness(Double loudness) {
        this.loudness = loudness;
    }

    /**
     * Getter for Tempo.
     * The overall estimated tempo of a track in beats per minute (BPM). In musical terminology,
     * tempo is the speed or pace of a given piece and derives directly from the average beat
     * duration.
     * @return Returns the Double
     */
    @JsonGetter("tempo")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getTempo() {
        return tempo;
    }

    /**
     * Setter for Tempo.
     * The overall estimated tempo of a track in beats per minute (BPM). In musical terminology,
     * tempo is the speed or pace of a given piece and derives directly from the average beat
     * duration.
     * @param tempo Value for Double
     */
    @JsonSetter("tempo")
    public void setTempo(Double tempo) {
        this.tempo = tempo;
    }

    /**
     * Getter for TempoConfidence.
     * The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
     * @return Returns the Double
     */
    @JsonGetter("tempo_confidence")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getTempoConfidence() {
        return tempoConfidence;
    }

    /**
     * Setter for TempoConfidence.
     * The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
     * @param tempoConfidence Value for Double
     */
    @JsonSetter("tempo_confidence")
    public void setTempoConfidence(Double tempoConfidence) {
        this.tempoConfidence = tempoConfidence;
    }

    /**
     * Getter for TimeSignature.
     * An estimated time signature. The time signature (meter) is a notational convention to specify
     * how many beats are in each bar (or measure). The time signature ranges from 3 to 7 indicating
     * time signatures of "3/4", to "7/4".
     * @return Returns the Integer
     */
    @JsonGetter("time_signature")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getTimeSignature() {
        return timeSignature;
    }

    /**
     * Setter for TimeSignature.
     * An estimated time signature. The time signature (meter) is a notational convention to specify
     * how many beats are in each bar (or measure). The time signature ranges from 3 to 7 indicating
     * time signatures of "3/4", to "7/4".
     * @param timeSignature Value for Integer
     */
    @JsonSetter("time_signature")
    public void setTimeSignature(Integer timeSignature) {
        this.timeSignature = timeSignature;
    }

    /**
     * Getter for TimeSignatureConfidence.
     * The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
     * @return Returns the Double
     */
    @JsonGetter("time_signature_confidence")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getTimeSignatureConfidence() {
        return timeSignatureConfidence;
    }

    /**
     * Setter for TimeSignatureConfidence.
     * The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
     * @param timeSignatureConfidence Value for Double
     */
    @JsonSetter("time_signature_confidence")
    public void setTimeSignatureConfidence(Double timeSignatureConfidence) {
        this.timeSignatureConfidence = timeSignatureConfidence;
    }

    /**
     * Getter for Key.
     * The key the track is in. Integers map to pitches using standard [Pitch Class
     * notation](https://en.wikipedia.org/wiki/Pitch_class). E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so
     * on. If no key was detected, the value is -1.
     * @return Returns the Integer
     */
    @JsonGetter("key")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getKey() {
        return key;
    }

    /**
     * Setter for Key.
     * The key the track is in. Integers map to pitches using standard [Pitch Class
     * notation](https://en.wikipedia.org/wiki/Pitch_class). E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so
     * on. If no key was detected, the value is -1.
     * @param key Value for Integer
     */
    @JsonSetter("key")
    public void setKey(Integer key) {
        this.key = key;
    }

    /**
     * Getter for KeyConfidence.
     * The confidence, from 0.0 to 1.0, of the reliability of the `key`.
     * @return Returns the Double
     */
    @JsonGetter("key_confidence")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getKeyConfidence() {
        return keyConfidence;
    }

    /**
     * Setter for KeyConfidence.
     * The confidence, from 0.0 to 1.0, of the reliability of the `key`.
     * @param keyConfidence Value for Double
     */
    @JsonSetter("key_confidence")
    public void setKeyConfidence(Double keyConfidence) {
        this.keyConfidence = keyConfidence;
    }

    /**
     * Getter for Mode.
     * Mode indicates the modality (major or minor) of a track, the type of scale from which its
     * melodic content is derived. Major is represented by 1 and minor is 0.
     * @return Returns the Integer
     */
    @JsonGetter("mode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getMode() {
        return mode;
    }

    /**
     * Setter for Mode.
     * Mode indicates the modality (major or minor) of a track, the type of scale from which its
     * melodic content is derived. Major is represented by 1 and minor is 0.
     * @param mode Value for Integer
     */
    @JsonSetter("mode")
    public void setMode(Integer mode) {
        this.mode = mode;
    }

    /**
     * Getter for ModeConfidence.
     * The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
     * @return Returns the Double
     */
    @JsonGetter("mode_confidence")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getModeConfidence() {
        return modeConfidence;
    }

    /**
     * Setter for ModeConfidence.
     * The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
     * @param modeConfidence Value for Double
     */
    @JsonSetter("mode_confidence")
    public void setModeConfidence(Double modeConfidence) {
        this.modeConfidence = modeConfidence;
    }

    /**
     * Getter for Codestring.
     * An [Echo Nest Musical Fingerprint
     * (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this
     * track.
     * @return Returns the String
     */
    @JsonGetter("codestring")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getCodestring() {
        return codestring;
    }

    /**
     * Setter for Codestring.
     * An [Echo Nest Musical Fingerprint
     * (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this
     * track.
     * @param codestring Value for String
     */
    @JsonSetter("codestring")
    public void setCodestring(String codestring) {
        this.codestring = codestring;
    }

    /**
     * Getter for CodeVersion.
     * A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
     * @return Returns the Double
     */
    @JsonGetter("code_version")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getCodeVersion() {
        return codeVersion;
    }

    /**
     * Setter for CodeVersion.
     * A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
     * @param codeVersion Value for Double
     */
    @JsonSetter("code_version")
    public void setCodeVersion(Double codeVersion) {
        this.codeVersion = codeVersion;
    }

    /**
     * Getter for Echoprintstring.
     * An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
     * @return Returns the String
     */
    @JsonGetter("echoprintstring")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getEchoprintstring() {
        return echoprintstring;
    }

    /**
     * Setter for Echoprintstring.
     * An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
     * @param echoprintstring Value for String
     */
    @JsonSetter("echoprintstring")
    public void setEchoprintstring(String echoprintstring) {
        this.echoprintstring = echoprintstring;
    }

    /**
     * Getter for EchoprintVersion.
     * A version number for the EchoPrint format used in the echoprintstring field.
     * @return Returns the Double
     */
    @JsonGetter("echoprint_version")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getEchoprintVersion() {
        return echoprintVersion;
    }

    /**
     * Setter for EchoprintVersion.
     * A version number for the EchoPrint format used in the echoprintstring field.
     * @param echoprintVersion Value for Double
     */
    @JsonSetter("echoprint_version")
    public void setEchoprintVersion(Double echoprintVersion) {
        this.echoprintVersion = echoprintVersion;
    }

    /**
     * Getter for Synchstring.
     * A [Synchstring](https://github.com/echonest/synchdata) for this track.
     * @return Returns the String
     */
    @JsonGetter("synchstring")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getSynchstring() {
        return synchstring;
    }

    /**
     * Setter for Synchstring.
     * A [Synchstring](https://github.com/echonest/synchdata) for this track.
     * @param synchstring Value for String
     */
    @JsonSetter("synchstring")
    public void setSynchstring(String synchstring) {
        this.synchstring = synchstring;
    }

    /**
     * Getter for SynchVersion.
     * A version number for the Synchstring used in the synchstring field.
     * @return Returns the Double
     */
    @JsonGetter("synch_version")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getSynchVersion() {
        return synchVersion;
    }

    /**
     * Setter for SynchVersion.
     * A version number for the Synchstring used in the synchstring field.
     * @param synchVersion Value for Double
     */
    @JsonSetter("synch_version")
    public void setSynchVersion(Double synchVersion) {
        this.synchVersion = synchVersion;
    }

    /**
     * Getter for Rhythmstring.
     * A Rhythmstring for this track. The format of this string is similar to the Synchstring.
     * @return Returns the String
     */
    @JsonGetter("rhythmstring")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getRhythmstring() {
        return rhythmstring;
    }

    /**
     * Setter for Rhythmstring.
     * A Rhythmstring for this track. The format of this string is similar to the Synchstring.
     * @param rhythmstring Value for String
     */
    @JsonSetter("rhythmstring")
    public void setRhythmstring(String rhythmstring) {
        this.rhythmstring = rhythmstring;
    }

    /**
     * Getter for RhythmVersion.
     * A version number for the Rhythmstring used in the rhythmstring field.
     * @return Returns the Double
     */
    @JsonGetter("rhythm_version")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getRhythmVersion() {
        return rhythmVersion;
    }

    /**
     * Setter for RhythmVersion.
     * A version number for the Rhythmstring used in the rhythmstring field.
     * @param rhythmVersion Value for Double
     */
    @JsonSetter("rhythm_version")
    public void setRhythmVersion(Double rhythmVersion) {
        this.rhythmVersion = rhythmVersion;
    }

    /**
     * Converts this Track into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Track [" + "numSamples=" + numSamples + ", duration=" + duration + ", sampleMd5="
                + sampleMd5 + ", offsetSeconds=" + offsetSeconds + ", windowSeconds="
                + windowSeconds + ", analysisSampleRate=" + analysisSampleRate
                + ", analysisChannels=" + analysisChannels + ", endOfFadeIn=" + endOfFadeIn
                + ", startOfFadeOut=" + startOfFadeOut + ", loudness=" + loudness + ", tempo="
                + tempo + ", tempoConfidence=" + tempoConfidence + ", timeSignature="
                + timeSignature + ", timeSignatureConfidence=" + timeSignatureConfidence + ", key="
                + key + ", keyConfidence=" + keyConfidence + ", mode=" + mode + ", modeConfidence="
                + modeConfidence + ", codestring=" + codestring + ", codeVersion=" + codeVersion
                + ", echoprintstring=" + echoprintstring + ", echoprintVersion=" + echoprintVersion
                + ", synchstring=" + synchstring + ", synchVersion=" + synchVersion
                + ", rhythmstring=" + rhythmstring + ", rhythmVersion=" + rhythmVersion + "]";
    }

    /**
     * Builds a new {@link Track.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Track.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .numSamples(getNumSamples())
                .duration(getDuration())
                .sampleMd5(getSampleMd5())
                .offsetSeconds(getOffsetSeconds())
                .windowSeconds(getWindowSeconds())
                .analysisSampleRate(getAnalysisSampleRate())
                .analysisChannels(getAnalysisChannels())
                .endOfFadeIn(getEndOfFadeIn())
                .startOfFadeOut(getStartOfFadeOut())
                .loudness(getLoudness())
                .tempo(getTempo())
                .tempoConfidence(getTempoConfidence())
                .timeSignature(getTimeSignature())
                .timeSignatureConfidence(getTimeSignatureConfidence())
                .key(getKey())
                .keyConfidence(getKeyConfidence())
                .mode(getMode())
                .modeConfidence(getModeConfidence())
                .codestring(getCodestring())
                .codeVersion(getCodeVersion())
                .echoprintstring(getEchoprintstring())
                .echoprintVersion(getEchoprintVersion())
                .synchstring(getSynchstring())
                .synchVersion(getSynchVersion())
                .rhythmstring(getRhythmstring())
                .rhythmVersion(getRhythmVersion());
        return builder;
    }

    /**
     * Class to build instances of {@link Track}.
     */
    public static class Builder {
        private Integer numSamples;
        private Double duration;
        private String sampleMd5;
        private Integer offsetSeconds;
        private Integer windowSeconds;
        private Integer analysisSampleRate;
        private Integer analysisChannels;
        private Double endOfFadeIn;
        private Double startOfFadeOut;
        private Double loudness;
        private Double tempo;
        private Double tempoConfidence;
        private Integer timeSignature;
        private Double timeSignatureConfidence;
        private Integer key;
        private Double keyConfidence;
        private Integer mode;
        private Double modeConfidence;
        private String codestring;
        private Double codeVersion;
        private String echoprintstring;
        private Double echoprintVersion;
        private String synchstring;
        private Double synchVersion;
        private String rhythmstring;
        private Double rhythmVersion;



        /**
         * Setter for numSamples.
         * @param  numSamples  Integer value for numSamples.
         * @return Builder
         */
        public Builder numSamples(Integer numSamples) {
            this.numSamples = numSamples;
            return this;
        }

        /**
         * Setter for duration.
         * @param  duration  Double value for duration.
         * @return Builder
         */
        public Builder duration(Double duration) {
            this.duration = duration;
            return this;
        }

        /**
         * Setter for sampleMd5.
         * @param  sampleMd5  String value for sampleMd5.
         * @return Builder
         */
        public Builder sampleMd5(String sampleMd5) {
            this.sampleMd5 = sampleMd5;
            return this;
        }

        /**
         * Setter for offsetSeconds.
         * @param  offsetSeconds  Integer value for offsetSeconds.
         * @return Builder
         */
        public Builder offsetSeconds(Integer offsetSeconds) {
            this.offsetSeconds = offsetSeconds;
            return this;
        }

        /**
         * Setter for windowSeconds.
         * @param  windowSeconds  Integer value for windowSeconds.
         * @return Builder
         */
        public Builder windowSeconds(Integer windowSeconds) {
            this.windowSeconds = windowSeconds;
            return this;
        }

        /**
         * Setter for analysisSampleRate.
         * @param  analysisSampleRate  Integer value for analysisSampleRate.
         * @return Builder
         */
        public Builder analysisSampleRate(Integer analysisSampleRate) {
            this.analysisSampleRate = analysisSampleRate;
            return this;
        }

        /**
         * Setter for analysisChannels.
         * @param  analysisChannels  Integer value for analysisChannels.
         * @return Builder
         */
        public Builder analysisChannels(Integer analysisChannels) {
            this.analysisChannels = analysisChannels;
            return this;
        }

        /**
         * Setter for endOfFadeIn.
         * @param  endOfFadeIn  Double value for endOfFadeIn.
         * @return Builder
         */
        public Builder endOfFadeIn(Double endOfFadeIn) {
            this.endOfFadeIn = endOfFadeIn;
            return this;
        }

        /**
         * Setter for startOfFadeOut.
         * @param  startOfFadeOut  Double value for startOfFadeOut.
         * @return Builder
         */
        public Builder startOfFadeOut(Double startOfFadeOut) {
            this.startOfFadeOut = startOfFadeOut;
            return this;
        }

        /**
         * Setter for loudness.
         * @param  loudness  Double value for loudness.
         * @return Builder
         */
        public Builder loudness(Double loudness) {
            this.loudness = loudness;
            return this;
        }

        /**
         * Setter for tempo.
         * @param  tempo  Double value for tempo.
         * @return Builder
         */
        public Builder tempo(Double tempo) {
            this.tempo = tempo;
            return this;
        }

        /**
         * Setter for tempoConfidence.
         * @param  tempoConfidence  Double value for tempoConfidence.
         * @return Builder
         */
        public Builder tempoConfidence(Double tempoConfidence) {
            this.tempoConfidence = tempoConfidence;
            return this;
        }

        /**
         * Setter for timeSignature.
         * @param  timeSignature  Integer value for timeSignature.
         * @return Builder
         */
        public Builder timeSignature(Integer timeSignature) {
            this.timeSignature = timeSignature;
            return this;
        }

        /**
         * Setter for timeSignatureConfidence.
         * @param  timeSignatureConfidence  Double value for timeSignatureConfidence.
         * @return Builder
         */
        public Builder timeSignatureConfidence(Double timeSignatureConfidence) {
            this.timeSignatureConfidence = timeSignatureConfidence;
            return this;
        }

        /**
         * Setter for key.
         * @param  key  Integer value for key.
         * @return Builder
         */
        public Builder key(Integer key) {
            this.key = key;
            return this;
        }

        /**
         * Setter for keyConfidence.
         * @param  keyConfidence  Double value for keyConfidence.
         * @return Builder
         */
        public Builder keyConfidence(Double keyConfidence) {
            this.keyConfidence = keyConfidence;
            return this;
        }

        /**
         * Setter for mode.
         * @param  mode  Integer value for mode.
         * @return Builder
         */
        public Builder mode(Integer mode) {
            this.mode = mode;
            return this;
        }

        /**
         * Setter for modeConfidence.
         * @param  modeConfidence  Double value for modeConfidence.
         * @return Builder
         */
        public Builder modeConfidence(Double modeConfidence) {
            this.modeConfidence = modeConfidence;
            return this;
        }

        /**
         * Setter for codestring.
         * @param  codestring  String value for codestring.
         * @return Builder
         */
        public Builder codestring(String codestring) {
            this.codestring = codestring;
            return this;
        }

        /**
         * Setter for codeVersion.
         * @param  codeVersion  Double value for codeVersion.
         * @return Builder
         */
        public Builder codeVersion(Double codeVersion) {
            this.codeVersion = codeVersion;
            return this;
        }

        /**
         * Setter for echoprintstring.
         * @param  echoprintstring  String value for echoprintstring.
         * @return Builder
         */
        public Builder echoprintstring(String echoprintstring) {
            this.echoprintstring = echoprintstring;
            return this;
        }

        /**
         * Setter for echoprintVersion.
         * @param  echoprintVersion  Double value for echoprintVersion.
         * @return Builder
         */
        public Builder echoprintVersion(Double echoprintVersion) {
            this.echoprintVersion = echoprintVersion;
            return this;
        }

        /**
         * Setter for synchstring.
         * @param  synchstring  String value for synchstring.
         * @return Builder
         */
        public Builder synchstring(String synchstring) {
            this.synchstring = synchstring;
            return this;
        }

        /**
         * Setter for synchVersion.
         * @param  synchVersion  Double value for synchVersion.
         * @return Builder
         */
        public Builder synchVersion(Double synchVersion) {
            this.synchVersion = synchVersion;
            return this;
        }

        /**
         * Setter for rhythmstring.
         * @param  rhythmstring  String value for rhythmstring.
         * @return Builder
         */
        public Builder rhythmstring(String rhythmstring) {
            this.rhythmstring = rhythmstring;
            return this;
        }

        /**
         * Setter for rhythmVersion.
         * @param  rhythmVersion  Double value for rhythmVersion.
         * @return Builder
         */
        public Builder rhythmVersion(Double rhythmVersion) {
            this.rhythmVersion = rhythmVersion;
            return this;
        }

        /**
         * Builds a new {@link Track} object using the set fields.
         * @return {@link Track}
         */
        public Track build() {
            return new Track(numSamples, duration, sampleMd5, offsetSeconds, windowSeconds,
                    analysisSampleRate, analysisChannels, endOfFadeIn, startOfFadeOut, loudness,
                    tempo, tempoConfidence, timeSignature, timeSignatureConfidence, key,
                    keyConfidence, mode, modeConfidence, codestring, codeVersion, echoprintstring,
                    echoprintVersion, synchstring, synchVersion, rhythmstring, rhythmVersion);
        }
    }
}
