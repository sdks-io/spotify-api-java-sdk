/*
 * SpotifyWebAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.spotify.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import java.util.List;

/**
 * This is a model class for PlaylistsTracksRequest2 type.
 */
public class PlaylistsTracksRequest2 {
    private List<Track1> tracks;
    private String snapshotId;

    /**
     * Default constructor.
     */
    public PlaylistsTracksRequest2() {
    }

    /**
     * Initialization constructor.
     * @param  tracks  List of Track1 value for tracks.
     * @param  snapshotId  String value for snapshotId.
     */
    public PlaylistsTracksRequest2(
            List<Track1> tracks,
            String snapshotId) {
        this.tracks = tracks;
        this.snapshotId = snapshotId;
    }

    /**
     * Getter for Tracks.
     * An array of objects containing [Spotify
     * URIs](/documentation/web-api/concepts/spotify-uris-ids) of the tracks or episodes to remove.
     * For example: `{ "tracks": [{ "uri": "spotify:track:4iV5W9uYEdYUVa79Axb7Rh" },{ "uri":
     * "spotify:track:1301WleyT98MSxVHPZCA6M" }] }`. A maximum of 100 objects can be sent at once.
     * @return Returns the List of Track1
     */
    @JsonGetter("tracks")
    public List<Track1> getTracks() {
        return tracks;
    }

    /**
     * Setter for Tracks.
     * An array of objects containing [Spotify
     * URIs](/documentation/web-api/concepts/spotify-uris-ids) of the tracks or episodes to remove.
     * For example: `{ "tracks": [{ "uri": "spotify:track:4iV5W9uYEdYUVa79Axb7Rh" },{ "uri":
     * "spotify:track:1301WleyT98MSxVHPZCA6M" }] }`. A maximum of 100 objects can be sent at once.
     * @param tracks Value for List of Track1
     */
    @JsonSetter("tracks")
    public void setTracks(List<Track1> tracks) {
        this.tracks = tracks;
    }

    /**
     * Getter for SnapshotId.
     * The playlist's snapshot ID against which you want to make the changes. The API will validate
     * that the specified items exist and in the specified positions and make the changes, even if
     * more recent changes have been made to the playlist.
     * @return Returns the String
     */
    @JsonGetter("snapshot_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getSnapshotId() {
        return snapshotId;
    }

    /**
     * Setter for SnapshotId.
     * The playlist's snapshot ID against which you want to make the changes. The API will validate
     * that the specified items exist and in the specified positions and make the changes, even if
     * more recent changes have been made to the playlist.
     * @param snapshotId Value for String
     */
    @JsonSetter("snapshot_id")
    public void setSnapshotId(String snapshotId) {
        this.snapshotId = snapshotId;
    }

    /**
     * Converts this PlaylistsTracksRequest2 into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "PlaylistsTracksRequest2 [" + "tracks=" + tracks + ", snapshotId=" + snapshotId
                + "]";
    }

    /**
     * Builds a new {@link PlaylistsTracksRequest2.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link PlaylistsTracksRequest2.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(tracks)
                .snapshotId(getSnapshotId());
        return builder;
    }

    /**
     * Class to build instances of {@link PlaylistsTracksRequest2}.
     */
    public static class Builder {
        private List<Track1> tracks;
        private String snapshotId;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  tracks  List of Track1 value for tracks.
         */
        public Builder(List<Track1> tracks) {
            this.tracks = tracks;
        }

        /**
         * Setter for tracks.
         * @param  tracks  List of Track1 value for tracks.
         * @return Builder
         */
        public Builder tracks(List<Track1> tracks) {
            this.tracks = tracks;
            return this;
        }

        /**
         * Setter for snapshotId.
         * @param  snapshotId  String value for snapshotId.
         * @return Builder
         */
        public Builder snapshotId(String snapshotId) {
            this.snapshotId = snapshotId;
            return this;
        }

        /**
         * Builds a new {@link PlaylistsTracksRequest2} object using the set fields.
         * @return {@link PlaylistsTracksRequest2}
         */
        public PlaylistsTracksRequest2 build() {
            return new PlaylistsTracksRequest2(tracks, snapshotId);
        }
    }
}
