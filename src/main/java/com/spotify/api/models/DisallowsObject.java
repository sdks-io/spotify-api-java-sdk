/*
 * SpotifyWebAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.spotify.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;

/**
 * This is a model class for DisallowsObject type.
 */
public class DisallowsObject {
    private Boolean interruptingPlayback;
    private Boolean pausing;
    private Boolean resuming;
    private Boolean seeking;
    private Boolean skippingNext;
    private Boolean skippingPrev;
    private Boolean togglingRepeatContext;
    private Boolean togglingShuffle;
    private Boolean togglingRepeatTrack;
    private Boolean transferringPlayback;

    /**
     * Default constructor.
     */
    public DisallowsObject() {
    }

    /**
     * Initialization constructor.
     * @param  interruptingPlayback  Boolean value for interruptingPlayback.
     * @param  pausing  Boolean value for pausing.
     * @param  resuming  Boolean value for resuming.
     * @param  seeking  Boolean value for seeking.
     * @param  skippingNext  Boolean value for skippingNext.
     * @param  skippingPrev  Boolean value for skippingPrev.
     * @param  togglingRepeatContext  Boolean value for togglingRepeatContext.
     * @param  togglingShuffle  Boolean value for togglingShuffle.
     * @param  togglingRepeatTrack  Boolean value for togglingRepeatTrack.
     * @param  transferringPlayback  Boolean value for transferringPlayback.
     */
    public DisallowsObject(
            Boolean interruptingPlayback,
            Boolean pausing,
            Boolean resuming,
            Boolean seeking,
            Boolean skippingNext,
            Boolean skippingPrev,
            Boolean togglingRepeatContext,
            Boolean togglingShuffle,
            Boolean togglingRepeatTrack,
            Boolean transferringPlayback) {
        this.interruptingPlayback = interruptingPlayback;
        this.pausing = pausing;
        this.resuming = resuming;
        this.seeking = seeking;
        this.skippingNext = skippingNext;
        this.skippingPrev = skippingPrev;
        this.togglingRepeatContext = togglingRepeatContext;
        this.togglingShuffle = togglingShuffle;
        this.togglingRepeatTrack = togglingRepeatTrack;
        this.transferringPlayback = transferringPlayback;
    }

    /**
     * Getter for InterruptingPlayback.
     * Interrupting playback. Optional field.
     * @return Returns the Boolean
     */
    @JsonGetter("interrupting_playback")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getInterruptingPlayback() {
        return interruptingPlayback;
    }

    /**
     * Setter for InterruptingPlayback.
     * Interrupting playback. Optional field.
     * @param interruptingPlayback Value for Boolean
     */
    @JsonSetter("interrupting_playback")
    public void setInterruptingPlayback(Boolean interruptingPlayback) {
        this.interruptingPlayback = interruptingPlayback;
    }

    /**
     * Getter for Pausing.
     * Pausing. Optional field.
     * @return Returns the Boolean
     */
    @JsonGetter("pausing")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getPausing() {
        return pausing;
    }

    /**
     * Setter for Pausing.
     * Pausing. Optional field.
     * @param pausing Value for Boolean
     */
    @JsonSetter("pausing")
    public void setPausing(Boolean pausing) {
        this.pausing = pausing;
    }

    /**
     * Getter for Resuming.
     * Resuming. Optional field.
     * @return Returns the Boolean
     */
    @JsonGetter("resuming")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getResuming() {
        return resuming;
    }

    /**
     * Setter for Resuming.
     * Resuming. Optional field.
     * @param resuming Value for Boolean
     */
    @JsonSetter("resuming")
    public void setResuming(Boolean resuming) {
        this.resuming = resuming;
    }

    /**
     * Getter for Seeking.
     * Seeking playback location. Optional field.
     * @return Returns the Boolean
     */
    @JsonGetter("seeking")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getSeeking() {
        return seeking;
    }

    /**
     * Setter for Seeking.
     * Seeking playback location. Optional field.
     * @param seeking Value for Boolean
     */
    @JsonSetter("seeking")
    public void setSeeking(Boolean seeking) {
        this.seeking = seeking;
    }

    /**
     * Getter for SkippingNext.
     * Skipping to the next context. Optional field.
     * @return Returns the Boolean
     */
    @JsonGetter("skipping_next")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getSkippingNext() {
        return skippingNext;
    }

    /**
     * Setter for SkippingNext.
     * Skipping to the next context. Optional field.
     * @param skippingNext Value for Boolean
     */
    @JsonSetter("skipping_next")
    public void setSkippingNext(Boolean skippingNext) {
        this.skippingNext = skippingNext;
    }

    /**
     * Getter for SkippingPrev.
     * Skipping to the previous context. Optional field.
     * @return Returns the Boolean
     */
    @JsonGetter("skipping_prev")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getSkippingPrev() {
        return skippingPrev;
    }

    /**
     * Setter for SkippingPrev.
     * Skipping to the previous context. Optional field.
     * @param skippingPrev Value for Boolean
     */
    @JsonSetter("skipping_prev")
    public void setSkippingPrev(Boolean skippingPrev) {
        this.skippingPrev = skippingPrev;
    }

    /**
     * Getter for TogglingRepeatContext.
     * Toggling repeat context flag. Optional field.
     * @return Returns the Boolean
     */
    @JsonGetter("toggling_repeat_context")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getTogglingRepeatContext() {
        return togglingRepeatContext;
    }

    /**
     * Setter for TogglingRepeatContext.
     * Toggling repeat context flag. Optional field.
     * @param togglingRepeatContext Value for Boolean
     */
    @JsonSetter("toggling_repeat_context")
    public void setTogglingRepeatContext(Boolean togglingRepeatContext) {
        this.togglingRepeatContext = togglingRepeatContext;
    }

    /**
     * Getter for TogglingShuffle.
     * Toggling shuffle flag. Optional field.
     * @return Returns the Boolean
     */
    @JsonGetter("toggling_shuffle")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getTogglingShuffle() {
        return togglingShuffle;
    }

    /**
     * Setter for TogglingShuffle.
     * Toggling shuffle flag. Optional field.
     * @param togglingShuffle Value for Boolean
     */
    @JsonSetter("toggling_shuffle")
    public void setTogglingShuffle(Boolean togglingShuffle) {
        this.togglingShuffle = togglingShuffle;
    }

    /**
     * Getter for TogglingRepeatTrack.
     * Toggling repeat track flag. Optional field.
     * @return Returns the Boolean
     */
    @JsonGetter("toggling_repeat_track")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getTogglingRepeatTrack() {
        return togglingRepeatTrack;
    }

    /**
     * Setter for TogglingRepeatTrack.
     * Toggling repeat track flag. Optional field.
     * @param togglingRepeatTrack Value for Boolean
     */
    @JsonSetter("toggling_repeat_track")
    public void setTogglingRepeatTrack(Boolean togglingRepeatTrack) {
        this.togglingRepeatTrack = togglingRepeatTrack;
    }

    /**
     * Getter for TransferringPlayback.
     * Transfering playback between devices. Optional field.
     * @return Returns the Boolean
     */
    @JsonGetter("transferring_playback")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getTransferringPlayback() {
        return transferringPlayback;
    }

    /**
     * Setter for TransferringPlayback.
     * Transfering playback between devices. Optional field.
     * @param transferringPlayback Value for Boolean
     */
    @JsonSetter("transferring_playback")
    public void setTransferringPlayback(Boolean transferringPlayback) {
        this.transferringPlayback = transferringPlayback;
    }

    /**
     * Converts this DisallowsObject into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "DisallowsObject [" + "interruptingPlayback=" + interruptingPlayback + ", pausing="
                + pausing + ", resuming=" + resuming + ", seeking=" + seeking + ", skippingNext="
                + skippingNext + ", skippingPrev=" + skippingPrev + ", togglingRepeatContext="
                + togglingRepeatContext + ", togglingShuffle=" + togglingShuffle
                + ", togglingRepeatTrack=" + togglingRepeatTrack + ", transferringPlayback="
                + transferringPlayback + "]";
    }

    /**
     * Builds a new {@link DisallowsObject.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link DisallowsObject.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .interruptingPlayback(getInterruptingPlayback())
                .pausing(getPausing())
                .resuming(getResuming())
                .seeking(getSeeking())
                .skippingNext(getSkippingNext())
                .skippingPrev(getSkippingPrev())
                .togglingRepeatContext(getTogglingRepeatContext())
                .togglingShuffle(getTogglingShuffle())
                .togglingRepeatTrack(getTogglingRepeatTrack())
                .transferringPlayback(getTransferringPlayback());
        return builder;
    }

    /**
     * Class to build instances of {@link DisallowsObject}.
     */
    public static class Builder {
        private Boolean interruptingPlayback;
        private Boolean pausing;
        private Boolean resuming;
        private Boolean seeking;
        private Boolean skippingNext;
        private Boolean skippingPrev;
        private Boolean togglingRepeatContext;
        private Boolean togglingShuffle;
        private Boolean togglingRepeatTrack;
        private Boolean transferringPlayback;



        /**
         * Setter for interruptingPlayback.
         * @param  interruptingPlayback  Boolean value for interruptingPlayback.
         * @return Builder
         */
        public Builder interruptingPlayback(Boolean interruptingPlayback) {
            this.interruptingPlayback = interruptingPlayback;
            return this;
        }

        /**
         * Setter for pausing.
         * @param  pausing  Boolean value for pausing.
         * @return Builder
         */
        public Builder pausing(Boolean pausing) {
            this.pausing = pausing;
            return this;
        }

        /**
         * Setter for resuming.
         * @param  resuming  Boolean value for resuming.
         * @return Builder
         */
        public Builder resuming(Boolean resuming) {
            this.resuming = resuming;
            return this;
        }

        /**
         * Setter for seeking.
         * @param  seeking  Boolean value for seeking.
         * @return Builder
         */
        public Builder seeking(Boolean seeking) {
            this.seeking = seeking;
            return this;
        }

        /**
         * Setter for skippingNext.
         * @param  skippingNext  Boolean value for skippingNext.
         * @return Builder
         */
        public Builder skippingNext(Boolean skippingNext) {
            this.skippingNext = skippingNext;
            return this;
        }

        /**
         * Setter for skippingPrev.
         * @param  skippingPrev  Boolean value for skippingPrev.
         * @return Builder
         */
        public Builder skippingPrev(Boolean skippingPrev) {
            this.skippingPrev = skippingPrev;
            return this;
        }

        /**
         * Setter for togglingRepeatContext.
         * @param  togglingRepeatContext  Boolean value for togglingRepeatContext.
         * @return Builder
         */
        public Builder togglingRepeatContext(Boolean togglingRepeatContext) {
            this.togglingRepeatContext = togglingRepeatContext;
            return this;
        }

        /**
         * Setter for togglingShuffle.
         * @param  togglingShuffle  Boolean value for togglingShuffle.
         * @return Builder
         */
        public Builder togglingShuffle(Boolean togglingShuffle) {
            this.togglingShuffle = togglingShuffle;
            return this;
        }

        /**
         * Setter for togglingRepeatTrack.
         * @param  togglingRepeatTrack  Boolean value for togglingRepeatTrack.
         * @return Builder
         */
        public Builder togglingRepeatTrack(Boolean togglingRepeatTrack) {
            this.togglingRepeatTrack = togglingRepeatTrack;
            return this;
        }

        /**
         * Setter for transferringPlayback.
         * @param  transferringPlayback  Boolean value for transferringPlayback.
         * @return Builder
         */
        public Builder transferringPlayback(Boolean transferringPlayback) {
            this.transferringPlayback = transferringPlayback;
            return this;
        }

        /**
         * Builds a new {@link DisallowsObject} object using the set fields.
         * @return {@link DisallowsObject}
         */
        public DisallowsObject build() {
            return new DisallowsObject(interruptingPlayback, pausing, resuming, seeking,
                    skippingNext, skippingPrev, togglingRepeatContext, togglingShuffle,
                    togglingRepeatTrack, transferringPlayback);
        }
    }
}
