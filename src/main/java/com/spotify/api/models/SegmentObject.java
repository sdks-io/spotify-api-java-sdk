/*
 * SpotifyWebAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.spotify.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import java.util.List;

/**
 * This is a model class for SegmentObject type.
 */
public class SegmentObject {
    private Double start;
    private Double duration;
    private Double confidence;
    private Double loudnessStart;
    private Double loudnessMax;
    private Double loudnessMaxTime;
    private Double loudnessEnd;
    private List<Double> pitches;
    private List<Double> timbre;

    /**
     * Default constructor.
     */
    public SegmentObject() {
    }

    /**
     * Initialization constructor.
     * @param  start  Double value for start.
     * @param  duration  Double value for duration.
     * @param  confidence  Double value for confidence.
     * @param  loudnessStart  Double value for loudnessStart.
     * @param  loudnessMax  Double value for loudnessMax.
     * @param  loudnessMaxTime  Double value for loudnessMaxTime.
     * @param  loudnessEnd  Double value for loudnessEnd.
     * @param  pitches  List of Double value for pitches.
     * @param  timbre  List of Double value for timbre.
     */
    public SegmentObject(
            Double start,
            Double duration,
            Double confidence,
            Double loudnessStart,
            Double loudnessMax,
            Double loudnessMaxTime,
            Double loudnessEnd,
            List<Double> pitches,
            List<Double> timbre) {
        this.start = start;
        this.duration = duration;
        this.confidence = confidence;
        this.loudnessStart = loudnessStart;
        this.loudnessMax = loudnessMax;
        this.loudnessMaxTime = loudnessMaxTime;
        this.loudnessEnd = loudnessEnd;
        this.pitches = pitches;
        this.timbre = timbre;
    }

    /**
     * Getter for Start.
     * The starting point (in seconds) of the segment.
     * @return Returns the Double
     */
    @JsonGetter("start")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getStart() {
        return start;
    }

    /**
     * Setter for Start.
     * The starting point (in seconds) of the segment.
     * @param start Value for Double
     */
    @JsonSetter("start")
    public void setStart(Double start) {
        this.start = start;
    }

    /**
     * Getter for Duration.
     * The duration (in seconds) of the segment.
     * @return Returns the Double
     */
    @JsonGetter("duration")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getDuration() {
        return duration;
    }

    /**
     * Setter for Duration.
     * The duration (in seconds) of the segment.
     * @param duration Value for Double
     */
    @JsonSetter("duration")
    public void setDuration(Double duration) {
        this.duration = duration;
    }

    /**
     * Getter for Confidence.
     * The confidence, from 0.0 to 1.0, of the reliability of the segmentation. Segments of the song
     * which are difficult to logically segment (e.g: noise) may correspond to low values in this
     * field.
     * @return Returns the Double
     */
    @JsonGetter("confidence")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getConfidence() {
        return confidence;
    }

    /**
     * Setter for Confidence.
     * The confidence, from 0.0 to 1.0, of the reliability of the segmentation. Segments of the song
     * which are difficult to logically segment (e.g: noise) may correspond to low values in this
     * field.
     * @param confidence Value for Double
     */
    @JsonSetter("confidence")
    public void setConfidence(Double confidence) {
        this.confidence = confidence;
    }

    /**
     * Getter for LoudnessStart.
     * The onset loudness of the segment in decibels (dB). Combined with `loudness_max` and
     * `loudness_max_time`, these components can be used to describe the "attack" of the segment.
     * @return Returns the Double
     */
    @JsonGetter("loudness_start")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getLoudnessStart() {
        return loudnessStart;
    }

    /**
     * Setter for LoudnessStart.
     * The onset loudness of the segment in decibels (dB). Combined with `loudness_max` and
     * `loudness_max_time`, these components can be used to describe the "attack" of the segment.
     * @param loudnessStart Value for Double
     */
    @JsonSetter("loudness_start")
    public void setLoudnessStart(Double loudnessStart) {
        this.loudnessStart = loudnessStart;
    }

    /**
     * Getter for LoudnessMax.
     * The peak loudness of the segment in decibels (dB). Combined with `loudness_start` and
     * `loudness_max_time`, these components can be used to describe the "attack" of the segment.
     * @return Returns the Double
     */
    @JsonGetter("loudness_max")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getLoudnessMax() {
        return loudnessMax;
    }

    /**
     * Setter for LoudnessMax.
     * The peak loudness of the segment in decibels (dB). Combined with `loudness_start` and
     * `loudness_max_time`, these components can be used to describe the "attack" of the segment.
     * @param loudnessMax Value for Double
     */
    @JsonSetter("loudness_max")
    public void setLoudnessMax(Double loudnessMax) {
        this.loudnessMax = loudnessMax;
    }

    /**
     * Getter for LoudnessMaxTime.
     * The segment-relative offset of the segment peak loudness in seconds. Combined with
     * `loudness_start` and `loudness_max`, these components can be used to desctibe the "attack" of
     * the segment.
     * @return Returns the Double
     */
    @JsonGetter("loudness_max_time")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getLoudnessMaxTime() {
        return loudnessMaxTime;
    }

    /**
     * Setter for LoudnessMaxTime.
     * The segment-relative offset of the segment peak loudness in seconds. Combined with
     * `loudness_start` and `loudness_max`, these components can be used to desctibe the "attack" of
     * the segment.
     * @param loudnessMaxTime Value for Double
     */
    @JsonSetter("loudness_max_time")
    public void setLoudnessMaxTime(Double loudnessMaxTime) {
        this.loudnessMaxTime = loudnessMaxTime;
    }

    /**
     * Getter for LoudnessEnd.
     * The offset loudness of the segment in decibels (dB). This value should be equivalent to the
     * loudness_start of the following segment.
     * @return Returns the Double
     */
    @JsonGetter("loudness_end")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getLoudnessEnd() {
        return loudnessEnd;
    }

    /**
     * Setter for LoudnessEnd.
     * The offset loudness of the segment in decibels (dB). This value should be equivalent to the
     * loudness_start of the following segment.
     * @param loudnessEnd Value for Double
     */
    @JsonSetter("loudness_end")
    public void setLoudnessEnd(Double loudnessEnd) {
        this.loudnessEnd = loudnessEnd;
    }

    /**
     * Getter for Pitches.
     * Pitch content is given by a “chroma” vector, corresponding to the 12 pitch classes C, C#, D
     * to B, with values ranging from 0 to 1 that describe the relative dominance of every pitch in
     * the chromatic scale. For example a C Major chord would likely be represented by large values
     * of C, E and G (i.e. classes 0, 4, and 7). Vectors are normalized to 1 by their strongest
     * dimension, therefore noisy sounds are likely represented by values that are all close to 1,
     * while pure tones are described by one value at 1 (the pitch) and others near 0. As can be
     * seen below, the 12 vector indices are a combination of low-power spectrum values at their
     * respective pitch frequencies. ![pitch
     * vector](https://developer.spotify.com/assets/audio/Pitch_vector.png)
     * @return Returns the List of Double
     */
    @JsonGetter("pitches")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<Double> getPitches() {
        return pitches;
    }

    /**
     * Setter for Pitches.
     * Pitch content is given by a “chroma” vector, corresponding to the 12 pitch classes C, C#, D
     * to B, with values ranging from 0 to 1 that describe the relative dominance of every pitch in
     * the chromatic scale. For example a C Major chord would likely be represented by large values
     * of C, E and G (i.e. classes 0, 4, and 7). Vectors are normalized to 1 by their strongest
     * dimension, therefore noisy sounds are likely represented by values that are all close to 1,
     * while pure tones are described by one value at 1 (the pitch) and others near 0. As can be
     * seen below, the 12 vector indices are a combination of low-power spectrum values at their
     * respective pitch frequencies. ![pitch
     * vector](https://developer.spotify.com/assets/audio/Pitch_vector.png)
     * @param pitches Value for List of Double
     */
    @JsonSetter("pitches")
    public void setPitches(List<Double> pitches) {
        this.pitches = pitches;
    }

    /**
     * Getter for Timbre.
     * Timbre is the quality of a musical note or sound that distinguishes different types of
     * musical instruments, or voices. It is a complex notion also referred to as sound color,
     * texture, or tone quality, and is derived from the shape of a segment’s spectro-temporal
     * surface, independently of pitch and loudness. The timbre feature is a vector that includes 12
     * unbounded values roughly centered around 0. Those values are high level abstractions of the
     * spectral surface, ordered by degree of importance. For completeness however, the first
     * dimension represents the average loudness of the segment; second emphasizes brightness; third
     * is more closely correlated to the flatness of a sound; fourth to sounds with a stronger
     * attack; etc. See an image below representing the 12 basis functions (i.e. template segments).
     * ![timbre basis
     * functions](https://developer.spotify.com/assets/audio/Timbre_basis_functions.png) The actual
     * timbre of the segment is best described as a linear combination of these 12 basis functions
     * weighted by the coefficient values: timbre = c1 x b1 + c2 x b2 + ... + c12 x b12, where c1 to
     * c12 represent the 12 coefficients and b1 to b12 the 12 basis functions as displayed below.
     * Timbre vectors are best used in comparison with each other.
     * @return Returns the List of Double
     */
    @JsonGetter("timbre")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<Double> getTimbre() {
        return timbre;
    }

    /**
     * Setter for Timbre.
     * Timbre is the quality of a musical note or sound that distinguishes different types of
     * musical instruments, or voices. It is a complex notion also referred to as sound color,
     * texture, or tone quality, and is derived from the shape of a segment’s spectro-temporal
     * surface, independently of pitch and loudness. The timbre feature is a vector that includes 12
     * unbounded values roughly centered around 0. Those values are high level abstractions of the
     * spectral surface, ordered by degree of importance. For completeness however, the first
     * dimension represents the average loudness of the segment; second emphasizes brightness; third
     * is more closely correlated to the flatness of a sound; fourth to sounds with a stronger
     * attack; etc. See an image below representing the 12 basis functions (i.e. template segments).
     * ![timbre basis
     * functions](https://developer.spotify.com/assets/audio/Timbre_basis_functions.png) The actual
     * timbre of the segment is best described as a linear combination of these 12 basis functions
     * weighted by the coefficient values: timbre = c1 x b1 + c2 x b2 + ... + c12 x b12, where c1 to
     * c12 represent the 12 coefficients and b1 to b12 the 12 basis functions as displayed below.
     * Timbre vectors are best used in comparison with each other.
     * @param timbre Value for List of Double
     */
    @JsonSetter("timbre")
    public void setTimbre(List<Double> timbre) {
        this.timbre = timbre;
    }

    /**
     * Converts this SegmentObject into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "SegmentObject [" + "start=" + start + ", duration=" + duration + ", confidence="
                + confidence + ", loudnessStart=" + loudnessStart + ", loudnessMax=" + loudnessMax
                + ", loudnessMaxTime=" + loudnessMaxTime + ", loudnessEnd=" + loudnessEnd
                + ", pitches=" + pitches + ", timbre=" + timbre + "]";
    }

    /**
     * Builds a new {@link SegmentObject.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link SegmentObject.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .start(getStart())
                .duration(getDuration())
                .confidence(getConfidence())
                .loudnessStart(getLoudnessStart())
                .loudnessMax(getLoudnessMax())
                .loudnessMaxTime(getLoudnessMaxTime())
                .loudnessEnd(getLoudnessEnd())
                .pitches(getPitches())
                .timbre(getTimbre());
        return builder;
    }

    /**
     * Class to build instances of {@link SegmentObject}.
     */
    public static class Builder {
        private Double start;
        private Double duration;
        private Double confidence;
        private Double loudnessStart;
        private Double loudnessMax;
        private Double loudnessMaxTime;
        private Double loudnessEnd;
        private List<Double> pitches;
        private List<Double> timbre;



        /**
         * Setter for start.
         * @param  start  Double value for start.
         * @return Builder
         */
        public Builder start(Double start) {
            this.start = start;
            return this;
        }

        /**
         * Setter for duration.
         * @param  duration  Double value for duration.
         * @return Builder
         */
        public Builder duration(Double duration) {
            this.duration = duration;
            return this;
        }

        /**
         * Setter for confidence.
         * @param  confidence  Double value for confidence.
         * @return Builder
         */
        public Builder confidence(Double confidence) {
            this.confidence = confidence;
            return this;
        }

        /**
         * Setter for loudnessStart.
         * @param  loudnessStart  Double value for loudnessStart.
         * @return Builder
         */
        public Builder loudnessStart(Double loudnessStart) {
            this.loudnessStart = loudnessStart;
            return this;
        }

        /**
         * Setter for loudnessMax.
         * @param  loudnessMax  Double value for loudnessMax.
         * @return Builder
         */
        public Builder loudnessMax(Double loudnessMax) {
            this.loudnessMax = loudnessMax;
            return this;
        }

        /**
         * Setter for loudnessMaxTime.
         * @param  loudnessMaxTime  Double value for loudnessMaxTime.
         * @return Builder
         */
        public Builder loudnessMaxTime(Double loudnessMaxTime) {
            this.loudnessMaxTime = loudnessMaxTime;
            return this;
        }

        /**
         * Setter for loudnessEnd.
         * @param  loudnessEnd  Double value for loudnessEnd.
         * @return Builder
         */
        public Builder loudnessEnd(Double loudnessEnd) {
            this.loudnessEnd = loudnessEnd;
            return this;
        }

        /**
         * Setter for pitches.
         * @param  pitches  List of Double value for pitches.
         * @return Builder
         */
        public Builder pitches(List<Double> pitches) {
            this.pitches = pitches;
            return this;
        }

        /**
         * Setter for timbre.
         * @param  timbre  List of Double value for timbre.
         * @return Builder
         */
        public Builder timbre(List<Double> timbre) {
            this.timbre = timbre;
            return this;
        }

        /**
         * Builds a new {@link SegmentObject} object using the set fields.
         * @return {@link SegmentObject}
         */
        public SegmentObject build() {
            return new SegmentObject(start, duration, confidence, loudnessStart, loudnessMax,
                    loudnessMaxTime, loudnessEnd, pitches, timbre);
        }
    }
}
