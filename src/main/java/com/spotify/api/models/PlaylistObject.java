/*
 * SpotifyWebAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.spotify.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;
import java.util.List;

/**
 * This is a model class for PlaylistObject type.
 */
public class PlaylistObject {
    private Boolean collaborative;
    private OptionalNullable<String> description;
    private ExternalUrlObject externalUrls;
    private FollowersObject followers;
    private String href;
    private String id;
    private List<ImageObject> images;
    private String name;
    private PlaylistOwnerObject owner;
    private Boolean mPublic;
    private String snapshotId;
    private PagingPlaylistTrackObject tracks;
    private String type;
    private String uri;

    /**
     * Default constructor.
     */
    public PlaylistObject() {
    }

    /**
     * Initialization constructor.
     * @param  collaborative  Boolean value for collaborative.
     * @param  description  String value for description.
     * @param  externalUrls  ExternalUrlObject value for externalUrls.
     * @param  followers  FollowersObject value for followers.
     * @param  href  String value for href.
     * @param  id  String value for id.
     * @param  images  List of ImageObject value for images.
     * @param  name  String value for name.
     * @param  owner  PlaylistOwnerObject value for owner.
     * @param  mPublic  Boolean value for mPublic.
     * @param  snapshotId  String value for snapshotId.
     * @param  tracks  PagingPlaylistTrackObject value for tracks.
     * @param  type  String value for type.
     * @param  uri  String value for uri.
     */
    public PlaylistObject(
            Boolean collaborative,
            String description,
            ExternalUrlObject externalUrls,
            FollowersObject followers,
            String href,
            String id,
            List<ImageObject> images,
            String name,
            PlaylistOwnerObject owner,
            Boolean mPublic,
            String snapshotId,
            PagingPlaylistTrackObject tracks,
            String type,
            String uri) {
        this.collaborative = collaborative;
        this.description = OptionalNullable.of(description);
        this.externalUrls = externalUrls;
        this.followers = followers;
        this.href = href;
        this.id = id;
        this.images = images;
        this.name = name;
        this.owner = owner;
        this.mPublic = mPublic;
        this.snapshotId = snapshotId;
        this.tracks = tracks;
        this.type = type;
        this.uri = uri;
    }

    /**
     * Initialization constructor.
     * @param  collaborative  Boolean value for collaborative.
     * @param  description  String value for description.
     * @param  externalUrls  ExternalUrlObject value for externalUrls.
     * @param  followers  FollowersObject value for followers.
     * @param  href  String value for href.
     * @param  id  String value for id.
     * @param  images  List of ImageObject value for images.
     * @param  name  String value for name.
     * @param  owner  PlaylistOwnerObject value for owner.
     * @param  mPublic  Boolean value for mPublic.
     * @param  snapshotId  String value for snapshotId.
     * @param  tracks  PagingPlaylistTrackObject value for tracks.
     * @param  type  String value for type.
     * @param  uri  String value for uri.
     */

    protected PlaylistObject(Boolean collaborative, OptionalNullable<String> description,
            ExternalUrlObject externalUrls, FollowersObject followers, String href, String id,
            List<ImageObject> images, String name, PlaylistOwnerObject owner, Boolean mPublic,
            String snapshotId, PagingPlaylistTrackObject tracks, String type, String uri) {
        this.collaborative = collaborative;
        this.description = description;
        this.externalUrls = externalUrls;
        this.followers = followers;
        this.href = href;
        this.id = id;
        this.images = images;
        this.name = name;
        this.owner = owner;
        this.mPublic = mPublic;
        this.snapshotId = snapshotId;
        this.tracks = tracks;
        this.type = type;
        this.uri = uri;
    }

    /**
     * Getter for Collaborative.
     * `true` if the owner allows other users to modify the playlist.
     * @return Returns the Boolean
     */
    @JsonGetter("collaborative")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getCollaborative() {
        return collaborative;
    }

    /**
     * Setter for Collaborative.
     * `true` if the owner allows other users to modify the playlist.
     * @param collaborative Value for Boolean
     */
    @JsonSetter("collaborative")
    public void setCollaborative(Boolean collaborative) {
        this.collaborative = collaborative;
    }

    /**
     * Internal Getter for Description.
     * The playlist description. _Only returned for modified, verified playlists, otherwise_ `null`.
     * @return Returns the Internal String
     */
    @JsonGetter("description")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDescription() {
        return this.description;
    }

    /**
     * Getter for Description.
     * The playlist description. _Only returned for modified, verified playlists, otherwise_ `null`.
     * @return Returns the String
     */
    public String getDescription() {
        return OptionalNullable.getFrom(description);
    }

    /**
     * Setter for Description.
     * The playlist description. _Only returned for modified, verified playlists, otherwise_ `null`.
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = OptionalNullable.of(description);
    }

    /**
     * UnSetter for Description.
     * The playlist description. _Only returned for modified, verified playlists, otherwise_ `null`.
     */
    public void unsetDescription() {
        description = null;
    }

    /**
     * Getter for ExternalUrls.
     * Known external URLs for this playlist.
     * @return Returns the ExternalUrlObject
     */
    @JsonGetter("external_urls")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ExternalUrlObject getExternalUrls() {
        return externalUrls;
    }

    /**
     * Setter for ExternalUrls.
     * Known external URLs for this playlist.
     * @param externalUrls Value for ExternalUrlObject
     */
    @JsonSetter("external_urls")
    public void setExternalUrls(ExternalUrlObject externalUrls) {
        this.externalUrls = externalUrls;
    }

    /**
     * Getter for Followers.
     * Information about the followers of the playlist.
     * @return Returns the FollowersObject
     */
    @JsonGetter("followers")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public FollowersObject getFollowers() {
        return followers;
    }

    /**
     * Setter for Followers.
     * Information about the followers of the playlist.
     * @param followers Value for FollowersObject
     */
    @JsonSetter("followers")
    public void setFollowers(FollowersObject followers) {
        this.followers = followers;
    }

    /**
     * Getter for Href.
     * A link to the Web API endpoint providing full details of the playlist.
     * @return Returns the String
     */
    @JsonGetter("href")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getHref() {
        return href;
    }

    /**
     * Setter for Href.
     * A link to the Web API endpoint providing full details of the playlist.
     * @param href Value for String
     */
    @JsonSetter("href")
    public void setHref(String href) {
        this.href = href;
    }

    /**
     * Getter for Id.
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the playlist.
     * @return Returns the String
     */
    @JsonGetter("id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getId() {
        return id;
    }

    /**
     * Setter for Id.
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the playlist.
     * @param id Value for String
     */
    @JsonSetter("id")
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Getter for Images.
     * Images for the playlist. The array may be empty or contain up to three images. The images are
     * returned by size in descending order. See [Working with
     * Playlists](/documentation/web-api/concepts/playlists). _**Note**: If returned, the source URL
     * for the image (`url`) is temporary and will expire in less than a day._
     * @return Returns the List of ImageObject
     */
    @JsonGetter("images")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<ImageObject> getImages() {
        return images;
    }

    /**
     * Setter for Images.
     * Images for the playlist. The array may be empty or contain up to three images. The images are
     * returned by size in descending order. See [Working with
     * Playlists](/documentation/web-api/concepts/playlists). _**Note**: If returned, the source URL
     * for the image (`url`) is temporary and will expire in less than a day._
     * @param images Value for List of ImageObject
     */
    @JsonSetter("images")
    public void setImages(List<ImageObject> images) {
        this.images = images;
    }

    /**
     * Getter for Name.
     * The name of the playlist.
     * @return Returns the String
     */
    @JsonGetter("name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * The name of the playlist.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for Owner.
     * The user who owns the playlist
     * @return Returns the PlaylistOwnerObject
     */
    @JsonGetter("owner")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public PlaylistOwnerObject getOwner() {
        return owner;
    }

    /**
     * Setter for Owner.
     * The user who owns the playlist
     * @param owner Value for PlaylistOwnerObject
     */
    @JsonSetter("owner")
    public void setOwner(PlaylistOwnerObject owner) {
        this.owner = owner;
    }

    /**
     * Getter for Public.
     * The playlist's public/private status: `true` the playlist is public, `false` the playlist is
     * private, `null` the playlist status is not relevant. For more about public/private status,
     * see [Working with Playlists](/documentation/web-api/concepts/playlists)
     * @return Returns the Boolean
     */
    @JsonGetter("public")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getPublic() {
        return mPublic;
    }

    /**
     * Setter for Public.
     * The playlist's public/private status: `true` the playlist is public, `false` the playlist is
     * private, `null` the playlist status is not relevant. For more about public/private status,
     * see [Working with Playlists](/documentation/web-api/concepts/playlists)
     * @param mPublic Value for Boolean
     */
    @JsonSetter("public")
    public void setPublic(Boolean mPublic) {
        this.mPublic = mPublic;
    }

    /**
     * Getter for SnapshotId.
     * The version identifier for the current playlist. Can be supplied in other requests to target
     * a specific playlist version
     * @return Returns the String
     */
    @JsonGetter("snapshot_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getSnapshotId() {
        return snapshotId;
    }

    /**
     * Setter for SnapshotId.
     * The version identifier for the current playlist. Can be supplied in other requests to target
     * a specific playlist version
     * @param snapshotId Value for String
     */
    @JsonSetter("snapshot_id")
    public void setSnapshotId(String snapshotId) {
        this.snapshotId = snapshotId;
    }

    /**
     * Getter for Tracks.
     * The tracks of the playlist.
     * @return Returns the PagingPlaylistTrackObject
     */
    @JsonGetter("tracks")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public PagingPlaylistTrackObject getTracks() {
        return tracks;
    }

    /**
     * Setter for Tracks.
     * The tracks of the playlist.
     * @param tracks Value for PagingPlaylistTrackObject
     */
    @JsonSetter("tracks")
    public void setTracks(PagingPlaylistTrackObject tracks) {
        this.tracks = tracks;
    }

    /**
     * Getter for Type.
     * The object type: "playlist"
     * @return Returns the String
     */
    @JsonGetter("type")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getType() {
        return type;
    }

    /**
     * Setter for Type.
     * The object type: "playlist"
     * @param type Value for String
     */
    @JsonSetter("type")
    public void setType(String type) {
        this.type = type;
    }

    /**
     * Getter for Uri.
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the playlist.
     * @return Returns the String
     */
    @JsonGetter("uri")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getUri() {
        return uri;
    }

    /**
     * Setter for Uri.
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the playlist.
     * @param uri Value for String
     */
    @JsonSetter("uri")
    public void setUri(String uri) {
        this.uri = uri;
    }

    /**
     * Converts this PlaylistObject into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "PlaylistObject [" + "collaborative=" + collaborative + ", description="
                + description + ", externalUrls=" + externalUrls + ", followers=" + followers
                + ", href=" + href + ", id=" + id + ", images=" + images + ", name=" + name
                + ", owner=" + owner + ", mPublic=" + mPublic + ", snapshotId=" + snapshotId
                + ", tracks=" + tracks + ", type=" + type + ", uri=" + uri + "]";
    }

    /**
     * Builds a new {@link PlaylistObject.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link PlaylistObject.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .collaborative(getCollaborative())
                .externalUrls(getExternalUrls())
                .followers(getFollowers())
                .href(getHref())
                .id(getId())
                .images(getImages())
                .name(getName())
                .owner(getOwner())
                .mPublic(getPublic())
                .snapshotId(getSnapshotId())
                .tracks(getTracks())
                .type(getType())
                .uri(getUri());
        builder.description = internalGetDescription();
        return builder;
    }

    /**
     * Class to build instances of {@link PlaylistObject}.
     */
    public static class Builder {
        private Boolean collaborative;
        private OptionalNullable<String> description;
        private ExternalUrlObject externalUrls;
        private FollowersObject followers;
        private String href;
        private String id;
        private List<ImageObject> images;
        private String name;
        private PlaylistOwnerObject owner;
        private Boolean mPublic;
        private String snapshotId;
        private PagingPlaylistTrackObject tracks;
        private String type;
        private String uri;



        /**
         * Setter for collaborative.
         * @param  collaborative  Boolean value for collaborative.
         * @return Builder
         */
        public Builder collaborative(Boolean collaborative) {
            this.collaborative = collaborative;
            return this;
        }

        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = OptionalNullable.of(description);
            return this;
        }

        /**
         * UnSetter for description.
         * @return Builder
         */
        public Builder unsetDescription() {
            description = null;
            return this;
        }

        /**
         * Setter for externalUrls.
         * @param  externalUrls  ExternalUrlObject value for externalUrls.
         * @return Builder
         */
        public Builder externalUrls(ExternalUrlObject externalUrls) {
            this.externalUrls = externalUrls;
            return this;
        }

        /**
         * Setter for followers.
         * @param  followers  FollowersObject value for followers.
         * @return Builder
         */
        public Builder followers(FollowersObject followers) {
            this.followers = followers;
            return this;
        }

        /**
         * Setter for href.
         * @param  href  String value for href.
         * @return Builder
         */
        public Builder href(String href) {
            this.href = href;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  String value for id.
         * @return Builder
         */
        public Builder id(String id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for images.
         * @param  images  List of ImageObject value for images.
         * @return Builder
         */
        public Builder images(List<ImageObject> images) {
            this.images = images;
            return this;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for owner.
         * @param  owner  PlaylistOwnerObject value for owner.
         * @return Builder
         */
        public Builder owner(PlaylistOwnerObject owner) {
            this.owner = owner;
            return this;
        }

        /**
         * Setter for mPublic.
         * @param  mPublic  Boolean value for mPublic.
         * @return Builder
         */
        public Builder mPublic(Boolean mPublic) {
            this.mPublic = mPublic;
            return this;
        }

        /**
         * Setter for snapshotId.
         * @param  snapshotId  String value for snapshotId.
         * @return Builder
         */
        public Builder snapshotId(String snapshotId) {
            this.snapshotId = snapshotId;
            return this;
        }

        /**
         * Setter for tracks.
         * @param  tracks  PagingPlaylistTrackObject value for tracks.
         * @return Builder
         */
        public Builder tracks(PagingPlaylistTrackObject tracks) {
            this.tracks = tracks;
            return this;
        }

        /**
         * Setter for type.
         * @param  type  String value for type.
         * @return Builder
         */
        public Builder type(String type) {
            this.type = type;
            return this;
        }

        /**
         * Setter for uri.
         * @param  uri  String value for uri.
         * @return Builder
         */
        public Builder uri(String uri) {
            this.uri = uri;
            return this;
        }

        /**
         * Builds a new {@link PlaylistObject} object using the set fields.
         * @return {@link PlaylistObject}
         */
        public PlaylistObject build() {
            return new PlaylistObject(collaborative, description, externalUrls, followers, href, id,
                    images, name, owner, mPublic, snapshotId, tracks, type, uri);
        }
    }
}
