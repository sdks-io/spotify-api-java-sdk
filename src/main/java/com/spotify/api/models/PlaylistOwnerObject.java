/*
 * SpotifyWebAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.spotify.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;

/**
 * This is a model class for PlaylistOwnerObject type.
 */
public class PlaylistOwnerObject {
    private ExternalUrlObject externalUrls;
    private FollowersObject followers;
    private String href;
    private String id;
    private Type4Enum type;
    private String uri;
    private OptionalNullable<String> displayName;

    /**
     * Default constructor.
     */
    public PlaylistOwnerObject() {
    }

    /**
     * Initialization constructor.
     * @param  externalUrls  ExternalUrlObject value for externalUrls.
     * @param  followers  FollowersObject value for followers.
     * @param  href  String value for href.
     * @param  id  String value for id.
     * @param  type  Type4Enum value for type.
     * @param  uri  String value for uri.
     * @param  displayName  String value for displayName.
     */
    public PlaylistOwnerObject(
            ExternalUrlObject externalUrls,
            FollowersObject followers,
            String href,
            String id,
            Type4Enum type,
            String uri,
            String displayName) {
        this.externalUrls = externalUrls;
        this.followers = followers;
        this.href = href;
        this.id = id;
        this.type = type;
        this.uri = uri;
        this.displayName = OptionalNullable.of(displayName);
    }

    /**
     * Initialization constructor.
     * @param  externalUrls  ExternalUrlObject value for externalUrls.
     * @param  followers  FollowersObject value for followers.
     * @param  href  String value for href.
     * @param  id  String value for id.
     * @param  type  Type4Enum value for type.
     * @param  uri  String value for uri.
     * @param  displayName  String value for displayName.
     */

    protected PlaylistOwnerObject(ExternalUrlObject externalUrls, FollowersObject followers,
            String href, String id, Type4Enum type, String uri,
            OptionalNullable<String> displayName) {
        this.externalUrls = externalUrls;
        this.followers = followers;
        this.href = href;
        this.id = id;
        this.type = type;
        this.uri = uri;
        this.displayName = displayName;
    }

    /**
     * Getter for ExternalUrls.
     * Known public external URLs for this user.
     * @return Returns the ExternalUrlObject
     */
    @JsonGetter("external_urls")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ExternalUrlObject getExternalUrls() {
        return externalUrls;
    }

    /**
     * Setter for ExternalUrls.
     * Known public external URLs for this user.
     * @param externalUrls Value for ExternalUrlObject
     */
    @JsonSetter("external_urls")
    public void setExternalUrls(ExternalUrlObject externalUrls) {
        this.externalUrls = externalUrls;
    }

    /**
     * Getter for Followers.
     * Information about the followers of this user.
     * @return Returns the FollowersObject
     */
    @JsonGetter("followers")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public FollowersObject getFollowers() {
        return followers;
    }

    /**
     * Setter for Followers.
     * Information about the followers of this user.
     * @param followers Value for FollowersObject
     */
    @JsonSetter("followers")
    public void setFollowers(FollowersObject followers) {
        this.followers = followers;
    }

    /**
     * Getter for Href.
     * A link to the Web API endpoint for this user.
     * @return Returns the String
     */
    @JsonGetter("href")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getHref() {
        return href;
    }

    /**
     * Setter for Href.
     * A link to the Web API endpoint for this user.
     * @param href Value for String
     */
    @JsonSetter("href")
    public void setHref(String href) {
        this.href = href;
    }

    /**
     * Getter for Id.
     * The [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids) for this user.
     * @return Returns the String
     */
    @JsonGetter("id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getId() {
        return id;
    }

    /**
     * Setter for Id.
     * The [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids) for this user.
     * @param id Value for String
     */
    @JsonSetter("id")
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Getter for Type.
     * The object type.
     * @return Returns the Type4Enum
     */
    @JsonGetter("type")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Type4Enum getType() {
        return type;
    }

    /**
     * Setter for Type.
     * The object type.
     * @param type Value for Type4Enum
     */
    @JsonSetter("type")
    public void setType(Type4Enum type) {
        this.type = type;
    }

    /**
     * Getter for Uri.
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for this user.
     * @return Returns the String
     */
    @JsonGetter("uri")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getUri() {
        return uri;
    }

    /**
     * Setter for Uri.
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for this user.
     * @param uri Value for String
     */
    @JsonSetter("uri")
    public void setUri(String uri) {
        this.uri = uri;
    }

    /**
     * Internal Getter for DisplayName.
     * The name displayed on the user's profile. `null` if not available.
     * @return Returns the Internal String
     */
    @JsonGetter("display_name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDisplayName() {
        return this.displayName;
    }

    /**
     * Getter for DisplayName.
     * The name displayed on the user's profile. `null` if not available.
     * @return Returns the String
     */
    public String getDisplayName() {
        return OptionalNullable.getFrom(displayName);
    }

    /**
     * Setter for DisplayName.
     * The name displayed on the user's profile. `null` if not available.
     * @param displayName Value for String
     */
    @JsonSetter("display_name")
    public void setDisplayName(String displayName) {
        this.displayName = OptionalNullable.of(displayName);
    }

    /**
     * UnSetter for DisplayName.
     * The name displayed on the user's profile. `null` if not available.
     */
    public void unsetDisplayName() {
        displayName = null;
    }

    /**
     * Converts this PlaylistOwnerObject into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "PlaylistOwnerObject [" + "externalUrls=" + externalUrls + ", followers=" + followers
                + ", href=" + href + ", id=" + id + ", type=" + type + ", uri=" + uri
                + ", displayName=" + displayName + "]";
    }

    /**
     * Builds a new {@link PlaylistOwnerObject.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link PlaylistOwnerObject.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .externalUrls(getExternalUrls())
                .followers(getFollowers())
                .href(getHref())
                .id(getId())
                .type(getType())
                .uri(getUri());
        builder.displayName = internalGetDisplayName();
        return builder;
    }

    /**
     * Class to build instances of {@link PlaylistOwnerObject}.
     */
    public static class Builder {
        private ExternalUrlObject externalUrls;
        private FollowersObject followers;
        private String href;
        private String id;
        private Type4Enum type;
        private String uri;
        private OptionalNullable<String> displayName;



        /**
         * Setter for externalUrls.
         * @param  externalUrls  ExternalUrlObject value for externalUrls.
         * @return Builder
         */
        public Builder externalUrls(ExternalUrlObject externalUrls) {
            this.externalUrls = externalUrls;
            return this;
        }

        /**
         * Setter for followers.
         * @param  followers  FollowersObject value for followers.
         * @return Builder
         */
        public Builder followers(FollowersObject followers) {
            this.followers = followers;
            return this;
        }

        /**
         * Setter for href.
         * @param  href  String value for href.
         * @return Builder
         */
        public Builder href(String href) {
            this.href = href;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  String value for id.
         * @return Builder
         */
        public Builder id(String id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for type.
         * @param  type  Type4Enum value for type.
         * @return Builder
         */
        public Builder type(Type4Enum type) {
            this.type = type;
            return this;
        }

        /**
         * Setter for uri.
         * @param  uri  String value for uri.
         * @return Builder
         */
        public Builder uri(String uri) {
            this.uri = uri;
            return this;
        }

        /**
         * Setter for displayName.
         * @param  displayName  String value for displayName.
         * @return Builder
         */
        public Builder displayName(String displayName) {
            this.displayName = OptionalNullable.of(displayName);
            return this;
        }

        /**
         * UnSetter for displayName.
         * @return Builder
         */
        public Builder unsetDisplayName() {
            displayName = null;
            return this;
        }

        /**
         * Builds a new {@link PlaylistOwnerObject} object using the set fields.
         * @return {@link PlaylistOwnerObject}
         */
        public PlaylistOwnerObject build() {
            return new PlaylistOwnerObject(externalUrls, followers, href, id, type, uri,
                    displayName);
        }
    }
}
