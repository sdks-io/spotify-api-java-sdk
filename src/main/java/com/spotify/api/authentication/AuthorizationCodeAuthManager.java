/*
 * SpotifyWebAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.spotify.api.authentication;

import com.spotify.api.ApiHelper;
import com.spotify.api.AuthorizationCodeAuth;
import com.spotify.api.Server;
import com.spotify.api.controllers.OAuthAuthorizationController;
import com.spotify.api.exceptions.ApiException;
import com.spotify.api.models.OAuthScopeEnum;
import com.spotify.api.models.OAuthToken;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.core.authentication.HeaderAuth;
import io.apimatic.coreinterfaces.http.request.ArraySerializationFormat;
import java.io.IOException;
import java.util.Base64;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

/**
 * Utility class for OAuth 2 authorization and token management.
 */
public class AuthorizationCodeAuthManager extends HeaderAuth implements AuthorizationCodeAuth {

    /**
     * Private instance of OAuth 2 API controller.
     */
    private OAuthAuthorizationController oAuthApi;

    /**
     * Private instance of the configuration to be used.
     */
    private GlobalConfiguration config;

    /**
     * Private instance of the auth model containing the auth credentials.
     */
    private AuthorizationCodeAuthModel authModel;

    /**
     * Constructor.
     */
    public AuthorizationCodeAuthManager(AuthorizationCodeAuthModel authModel) {
        super(Collections.singletonMap("Authorization",
                getAuthorizationHeader(authModel.getOAuthToken())));
        this.authModel = authModel;
    }

    /**
    * Apply GlobalConfiguration for token management.
    * @param config GlobalConfiguration instance
    */
    public void applyGlobalConfiguration(GlobalConfiguration config) {
        this.config = config;
        this.oAuthApi = new OAuthAuthorizationController(config);
    }


    /**
     * String value for oAuthClientId.
     * @return oAuthClientId
     */
    public String getOAuthClientId() {
        return authModel.getOAuthClientId();
    }

    /**
     * String value for oAuthClientSecret.
     * @return oAuthClientSecret
     */
    public String getOAuthClientSecret() {
        return authModel.getOAuthClientSecret();
    }

    /**
     * String value for oAuthRedirectUri.
     * @return oAuthRedirectUri
     */
    public String getOAuthRedirectUri() {
        return authModel.getOAuthRedirectUri();
    }

    /**
     * OAuthToken value for oAuthToken.
     * @return oAuthToken
     */
    public OAuthToken getOAuthToken() {
        return authModel.getOAuthToken();
    }

    /**
     * List of OAuthScopeEnum value for oAuthScopes.
     * @return oAuthScopes
     */
    public List<OAuthScopeEnum> getOAuthScopes() {
        return authModel.getOAuthScopes();
    }

    /**
     * Checks if provided credentials matched with existing ones.
     * @param oAuthClientId String value for credentials.
     * @param oAuthClientSecret String value for credentials.
     * @param oAuthRedirectUri String value for credentials.
     * @param oAuthToken OAuthToken value for credentials.
     * @param oAuthScopes List of OAuthScopeEnum value for credentials.
     * @return true if credentials matched.
     */
    public boolean equals(String oAuthClientId, String oAuthClientSecret, String oAuthRedirectUri,
            OAuthToken oAuthToken, List<OAuthScopeEnum> oAuthScopes) {
        return oAuthClientId.equals(getOAuthClientId())
                && oAuthClientSecret.equals(getOAuthClientSecret())
                && oAuthRedirectUri.equals(getOAuthRedirectUri())
                && ((getOAuthToken() == null && oAuthToken == null)
                        || (getOAuthToken() != null && oAuthToken != null
                                && oAuthToken.toString().equals(getOAuthToken().toString())))
                && ((getOAuthScopes() == null && oAuthScopes == null)
                        || (getOAuthScopes() != null && oAuthScopes != null
                                && oAuthScopes.equals(getOAuthScopes())));
    }

    /**
     * Converts this AuthorizationCodeAuthManager into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "AuthorizationCodeAuthManager [" + "oAuthClientId=" + getOAuthClientId()
                + ", oAuthClientSecret=" + getOAuthClientSecret() + ", oAuthRedirectUri="
                + getOAuthRedirectUri() + ", oAuthToken=" + getOAuthToken() + ", oAuthScopes="
                + getOAuthScopes() + "]";
    }

    /**
     * Build an authorization URL for taking the user's consent to access data.
     * @param state An opaque state string.
     * @param additionalParameters Additional parameters to add the the authorization URL.
     * @return Authorization URL
     */
    public String buildAuthorizationUrl(final String state,
            final Map<String, String> additionalParameters) {

        // the uri for api requests
        StringBuilder queryBuilder = new StringBuilder(config.getBaseUri().apply(Server.AUTH_SERVER.value()));
        queryBuilder.append("/authorize");

        // build query params
        Map<String, Object> queryParameters = new HashMap<String, Object>() {
            private static final long serialVersionUID = 1L;
            {
                put("response_type", "code");
                put("client_id", getOAuthClientId());
                put("redirect_uri", getOAuthRedirectUri());
                put("scope", stringJoin(getOAuthScopes(), " "));
                put("state", state);
            }
        };

        // process optional query parameters
        if (additionalParameters != null) {
            queryParameters.putAll(additionalParameters);
        }

        ApiHelper.appendUrlWithQueryParameters(queryBuilder, queryParameters, ArraySerializationFormat.CSV);

        // validate and preprocess url
        return ApiHelper.cleanUrl(queryBuilder);
    }
    
    /**
     * Build an authorization URL for taking the user's consent to access data.
     * @return Authorization URL
     */
    public String buildAuthorizationUrl() {
        return buildAuthorizationUrl(null, null);
    }

    /**
     * Build an authorization URL for taking the user's consent to access data.
     * @param state An opaque state string.
     * @return Authorization URL
     */
    public String buildAuthorizationUrl(final String state) {
        return buildAuthorizationUrl(state, null);
    }

    /**
     * Fetch the OAuth token asynchronously.
     * @param authorizationCode Authorization code returned by the OAuth provider.
     * @param additionalParameters Additional parameters to send during authorization.
     */
    public CompletableFuture<OAuthToken> fetchTokenAsync(final String authorizationCode,
            final Map<String, Object> additionalParameters) {
        final Map<String, Object> aparams =
                additionalParameters == null ? new HashMap<String, Object>() : additionalParameters;
        return oAuthApi.requestTokenAsync(
            getBasicAuthForClient(),
            authorizationCode,
            getOAuthRedirectUri(),
            aparams).thenApply(token -> {
                return token.getResult();
            });
    }

    /**
     * Fetch the OAuth token asynchronously.
     * @param authorizationCode Authorization code returned by the OAuth provider.
     */
    public CompletableFuture<OAuthToken> fetchTokenAsync(final String authorizationCode) {
        return fetchTokenAsync(authorizationCode, null);
    }

    /**
     * Fetch the OAuth token.
     * @param authorizationCode Authorization code returned by the OAuth provider.
     * @param additionalParameters Additional parameters to send during authorization.
     */
    public OAuthToken fetchToken(String authorizationCode, Map<String, Object> additionalParameters)
            throws ApiException, IOException {
        final Map<String, Object> aparams =
                additionalParameters == null ? new HashMap<String, Object>() : additionalParameters;
        OAuthToken token = oAuthApi.requestToken(
            getBasicAuthForClient(),
            authorizationCode,
            getOAuthRedirectUri(),
            aparams).getResult();

        if (token.getExpiresIn() != null && token.getExpiresIn() != 0) {
            token.setExpiry((System.currentTimeMillis() / 1000L) + token.getExpiresIn());
        }

        return token;
    }

    /**
     * Fetch the OAuth token.
     * @param authorizationCode Authorization code returned by the OAuth provider
     */
    public OAuthToken fetchToken(String authorizationCode) throws ApiException, IOException {
        return fetchToken(authorizationCode, null);
    }

    /**
     * Refresh the OAuth token.
     * @param additionalParameters Additional parameters to send during token refresh.
     */
    public CompletableFuture<OAuthToken> refreshTokenAsync(
            final Map<String, Object> additionalParameters) {

        final Map<String, Object> aparams =
                additionalParameters == null ? new HashMap<String, Object>() : additionalParameters;
        return oAuthApi.refreshTokenAsync(
            getBasicAuthForClient(),
            getOAuthToken().getRefreshToken(),
            stringJoin(getOAuthScopes(), " "),
            aparams).thenApply(token -> {
                return token.getResult();
            });
    }

    /**
     * Refresh the OAuth token.
     */
    public CompletableFuture<OAuthToken> refreshTokenAsync() {
        return refreshTokenAsync(null);
    }

    /**
     * Refresh the OAuth token.
     * @param additionalParameters Additional parameters to send during token refresh.
     */
    public OAuthToken refreshToken(final Map<String, Object> additionalParameters)
            throws ApiException, IOException {
        final Map<String, Object> aparams =
                additionalParameters == null ? new HashMap<String, Object>() : additionalParameters;
        OAuthToken token = oAuthApi.refreshToken(
            getBasicAuthForClient(),
            getOAuthToken().getRefreshToken(),
            stringJoin(getOAuthScopes(), " "),
            aparams).getResult();
        return token;
    }

    /**
     * Refresh the OAuth token.
     */
    public OAuthToken refreshToken() throws ApiException, IOException {
        return refreshToken(null);
    }

    /**
     * Build authorization header value for basic auth.
     * @return Authorization header value for this client
     */
    private String getBasicAuthForClient() {
        String val = getOAuthClientId() + ":" + getOAuthClientSecret();
        return "Basic " + new String(Base64.getEncoder().encodeToString(val.getBytes()));
    }

    /**
     * Join string collection elements using delimiter.
     * @param col String collection to join
     * @param delim Delimiter
     * @return String joined by delimiter
     */
    private String stringJoin(Collection<?> col, String delim) {
        if (col == null) {
            return null;
        }
        StringBuilder sb = new StringBuilder();
        Iterator<?> iter = col.iterator();
        if (iter.hasNext()) {
            sb.append(iter.next().toString());
        }
        while (iter.hasNext()) {
            sb.append(delim);
            sb.append(iter.next().toString());
        }
        return sb.toString();
    }

    /**
     * Has the OAuth token expired?.
     * @return True if expired
     */
    public boolean isTokenExpired() {
        if (getOAuthToken() == null) {
            throw new IllegalStateException("OAuth token is missing.");
        }

        return getOAuthToken().getExpiry() != null 
            && getOAuthToken().getExpiry() < (System.currentTimeMillis() / 1000L); 
    }

    /**
    * Create authorization header for API calls.
    * @param token OAuth token
    * @return Authorization header
    */
    private static String getAuthorizationHeader(OAuthToken token) {
        if (token == null) {
            return null;
        }
        return "Bearer " + token.getAccessToken();
    }

    /**
    * Validate the authentication on the httpRequest
    */
    @Override
    public void validate() {
        if (getOAuthToken() == null) {
            setErrorMessage("Client is not authorized."
                + " An OAuth token is needed to make API calls.");
            setValidity(false);
        } else if (isTokenExpired()) {
            setErrorMessage("The oAuth token is expired."
                + " A valid token is needed to make API calls.");
            setValidity(false);
        } else {
            setValidity(true);
        }
     }

    /**
    * Returns the error message if the auth credentials are not valid.
    * @return the auth specific error message.
    */
    @Override
    public String getErrorMessage() {
        String errorMessage = super.getErrorMessage();
        if (errorMessage == null) {
            return null;
        }

        return "AuthorizationCodeAuth - " + errorMessage;
     }

}
